#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВнешнийОбъект = Параметры.ВнешнийОбъект;
	МетаданныеПотребителя = Параметры.ВнешнийОбъект.Метаданные();
	ИмяПотребителя = ?(МетаданныеПотребителя.Синоним <> "",
		МетаданныеПотребителя.Синоним,
		МетаданныеПотребителя.Имя);
	ПолноеИмяПотребителя = МетаданныеПотребителя.ПолноеИмя();
	
	ОбновитьПредставлениеСоздаваемогоОбъекта();
	
	ИспользоватьОбработкуОбъектов1СДокументооборота =
		Константы.ИспользоватьОбработкуОбъектов1СДокументооборота.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" Тогда
		Если Источник <> ЭтотОбъект Тогда
			ПриПодключении();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИнтеграцияС1СДокументооборотом3_ЗаписаноПравило" Тогда
		ОбновитьПредставлениеСоздаваемогоОбъекта();
		
	ИначеЕсли ИмяСобытия = "Документооборот_ВыбратьЗначениеИзСпискаЗавершение" Тогда
		Если Источник = ЭтотОбъект
				И Параметр = "ОбъектДО"
				И ЗначениеЗаполнено(ОбъектДОID)
				И ЗначениеЗаполнено(ОбъектДОТип) Тогда
			// Добавление новой связи.
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
				ОбъектДОID,
				ОбъектДОТип,
				ВнешнийОбъект);
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_ДобавлениеСвязи(
				ОбъектДОID,
				ОбъектДОТип,
				ВнешнийОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДобавлениеСвязи" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("Объект")
				И Параметр.Объект = ВнешнийОбъект Тогда
			НачатьПолучениеДанныхСвязанногоОбъектаДО(Элементы.ГруппаСтраницы.ТекущаяСтраница);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_УдалениеСвязи" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("Объект")
				И Параметр.Объект = ВнешнийОбъект Тогда
			УдалитьСвязь();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДействиеСОбработкой" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("ДанныеОбработки")
				И Параметр.ДанныеОбработки.ПредметID = ОбъектДОID
				И Параметр.ДанныеОбработки.ПредметТип = ОбъектДОТип Тогда
			// Обзор нужно обновить в любом случае.
			ОбзорЗаполнен = Ложь;
			Если Источник <> ЭтотОбъект Тогда
				// Обработку нужно обновить только если действие с обработкой было выполнено в другой форме.
				// В противном случае обработка уже обновлена.
				ОбработкаЗаполнена = Ложь;
			КонецЕсли;
			НачатьОбновлениеФормы(Элементы.ГруппаСтраницы.ТекущаяСтраница, Ложь);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДействиеНадЗадачей" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("ID")
				И Параметр.Свойство("Тип")
				И Параметр.Свойство("ТипОперации")
				И (Параметр.ТипОперации.ВыполнитьДействиеЗадачи
					Или Параметр.ТипОперации.ВзятьВРаботу
					Или Параметр.ТипОперации.ОтменитьВзятиеВРаботу
					Или Параметр.ТипОперации.Перенаправить)
				И ЗадачаПоID(Параметр.ID, Параметр.Тип, Действия.ПолучитьЭлементы()) <> Неопределено Тогда
			ОбзорЗаполнен = Ложь;
			ОбработкаЗаполнена = Ложь;
			НачатьОбновлениеФормы(Элементы.ГруппаСтраницы.ТекущаяСтраница, Ложь);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если Источник = "ИспользоватьОбработкуОбъектов1СДокументооборота" Тогда
			ПеречитатьФункциональныеОпции(ОбъектДОТип);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылкаМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		НавигационнаяСсылкаФорматированнойСтроки,
		"||");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаИС", НавигационнаяСсылкаМассив[1]);
	
	Если НавигационнаяСсылкаМассив[0] = "ФормаЭлемента" Тогда
		ИмяФормыПравил = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаЭлемента";
		
	ИначеЕсли НавигационнаяСсылкаМассив[0] = "ФормаСписка" Тогда
		ИмяФормыПравил = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаСписка";
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыПравил, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектСоздатьНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектДО) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ИнтеграцияС1СДокументооборот3Клиент.НачатьСозданиеСвязанногоОбъектаДО(ВнешнийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектВыбратьНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ТипСоздаваемогоОбъекта) Тогда
		
		ДекорацияОбъектВыбратьНажатиеПослеВыбораТипа(ТипСоздаваемогоОбъекта, ДополнительныеПараметры);
		
	Иначе // тип неизвестен, предложим выбор пользователю
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДекорацияОбъектВыбратьНажатиеПослеВыбораТипа", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбрать в 1С:Документообороте'"));
		ПараметрыФормы.Вставить("ЗаголовокКоманды", НСтр("ru = 'Выбрать'"));
		ПараметрыФормы.Вставить("ОбъектИС", ВнешнийОбъект);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборТипаОбъектаДокументооборота",
			ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьОбъектДО(ОбъектДОНавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектОчиститьНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ОбъектДОID) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияОбъектОчиститьНажатиеЗавершение", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Очистить соответствие для
			|%1?'"), Строка(ВнешнийОбъект));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
		Оповещение,
		ТекстВопроса,
		НСтр("ru='Очистить'"),
		НСтр("ru='Не очищать'"),
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектОчиститьНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйID = ОбъектДОID;
	СохраненныйТип = ОбъектДОТип;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьСвязь(
		ОбъектДОID,
		ОбъектДОТип,
		ВнешнийОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_УдалениеСвязи(
		СохраненныйID,
		СохраненныйТип,
		ВнешнийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяЗакладка = ТекущаяСтраница.Имя;
	
	НачатьОбновлениеФормы(ТекущаяСтраница, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДействия

&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриАктивизацииСтроки(Элемент)
	
	ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
	ТипДерева.ЭтоДеревоОбработки = Истина;
	СостояниеДереваОбработки = ИнтеграцияС1СДокументооборот3Клиент.ТекущееСостояниеДерева(
		ТипДерева,
		Действия.ПолучитьЭлементы(),
		Элементы.Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДействиеЗадачиID) И ЗначениеЗаполнено(ТекущиеДанные.ДействиеЗадачиТип) Тогда
		ПараметрыФормы = Новый Структура("ОсновнойПредметID, ОсновнойПредметТип", ОбъектДОID, ОбъектДОТип);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			ТекущиеДанные.ДействиеЗадачиТип,
			ТекущиеДанные.ДействиеЗадачиID,,
			ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДействияКоманда(Команда)
	
	ОбновитьОбработку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбзорКоманда(Команда)
	
	ОбновитьОбзор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОстановить(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборот3КлиентСервер.ТипОперацииСОбработкой();
	Если СостояниеОбработки = "Executing" Тогда
		ТипОперации.Остановить = Истина;
	Иначе
		ТипОперации.Продолжить = Истина;
	КонецЕсли;
	
	ДействиеСОбработкой(ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправить(Команда)
	
	Если СостояниеОбработки = "Executing" Или СостояниеОбработки = "Stopped" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьПрерываниеОбработкиПослеВводаПричиныПрерывания",
			ЭтотОбъект);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот3.Форма.ПрерываниеОбработкиОбъекта",
			Новый Структура("ОбъектДО, ОбъектДОТип", ОбъектДО, ОбъектДОТип),
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТипОперации = ИнтеграцияС1СДокументооборот3КлиентСервер.ТипОперацииСОбработкой();
		ТипОперации.Начать = Истина;
		ДействиеСОбработкой(ТипОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПрерываниеОбработкиПослеВводаПричиныПрерывания(ПараметрыПрерывания,
		ДополнительныеПараметры) Экспорт
	
	Если ПараметрыПрерывания = Неопределено Или ПараметрыПрерывания = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТипОперации = ИнтеграцияС1СДокументооборот3КлиентСервер.ТипОперацииСОбработкой();
	ТипОперации.Прервать = Истина;
	ДействиеСОбработкой(ТипОперации, ПараметрыПрерывания.ПричинаПрерывания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияЗаполнить(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборот3КлиентСервер.ТипОперацииСОбработкой();
	ТипОперации.Заполнить = Истина;
	ДействиеСОбработкой(ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПерезапуститьОбработку(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборот3КлиентСервер.ТипОперацииСОбработкой();
	ТипОперации.Перезапустить = Истина;
	ДействиеСОбработкой(ТипОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ДекорацияОбъектВыбратьНажатиеПослеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Или Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокументаОтбор = Новый Структура("Значение, ЗначениеID",
		ВидДокументаИзПравил,
		ВидДокументаИзПравилID);
	Отбор = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтборПриВыбореСвязанногоОбъекта(
		ВнешнийОбъект,
		Результат,
		ВидДокументаОтбор);
	ИнтеграцияС1СДокументооборот3Клиент.ВыбратьЗначениеИзСписка(
		Результат,
		"ОбъектДО",
		ЭтотОбъект,
		Отбор);
	
КонецПроцедуры

&НаКлиенте
Функция ЗадачаПоID(ДействиеЗадачиID, ДействиеЗадачиТип, СтрокиДереваОбработки)
	
	Для Каждого Строка Из СтрокиДереваОбработки Цикл
		
		ЗадачаПоID = ЗадачаПоID(ДействиеЗадачиID, ДействиеЗадачиТип, Строка.ПолучитьЭлементы());
		Если ЗадачаПоID <> Неопределено Тогда
			Возврат ЗадачаПоID;
		КонецЕсли;
		
		Если Строка.ДействиеЗадачиID = ДействиеЗадачиID И Строка.ДействиеЗадачиТип = ДействиеЗадачиТип Тогда
			Возврат Строка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДекорацииОбъектаДО()
	
	ОбъектДОЗаполнен = ЗначениеЗаполнено(ОбъектДОID);
	
	Элементы.ДекорацияОбъектСоздать.Видимость = Не ОбъектДОЗаполнен;
	Элементы.ДекорацияОбъектИли.Видимость = Не ОбъектДОЗаполнен;
	Элементы.ДекорацияОбъектВыбрать.Видимость = Не ОбъектДОЗаполнен;
	
	Элементы.ДекорацияОбъект.Видимость = ОбъектДОЗаполнен;
	Элементы.ДекорацияОбъектОчистить.Видимость = ОбъектДОЗаполнен;
	
	Элементы.ПредставлениеHTMLДокумента.Доступность = ОбъектДОЗаполнен;
	Элементы.Действия.Доступность = ОбъектДОЗаполнен;
	
	Элементы.ГруппаКнопкиЗапуска.Видимость = ОбъектДОЗаполнен
		И ОбработкаЗаполнена
		И Элементы.ГруппаКнопкиЗапуска.Видимость;
	Элементы.ГруппаИнформацияОПрерыванииОбработки.Видимость = ОбъектДОЗаполнен
		И ОбработкаЗаполнена
		И Элементы.ГруппаИнформацияОПрерыванииОбработки.Видимость;
	
	Если ОбъектДОЗаполнен Тогда
		ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
		ТипДерева.ЭтоДеревоОбработки = Истина;
		ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДерево(
			ТипДерева,
			Действия.ПолучитьЭлементы(),
			Элементы.Действия,
			СостояниеДереваОбработки);
	КонецЕсли;
	
	Если ДоступенОбзор Тогда
		Элементы.ГруппаСтраницыПолученияДанныхОбзор.ТекущаяСтраница = Элементы.СтраницаДанныеПолученыОбзор;
	Иначе
		Элементы.ГруппаСтраницыПолученияДанныхОбзор.ТекущаяСтраница = Элементы.СтраницаОбзорНедоступен;
	КонецЕсли;
	Если ДоступенПросмотрОбработки Тогда
		Элементы.ГруппаСтраницыПолученияДанныхОбработка.ТекущаяСтраница = Элементы.СтраницаДанныеПолученыОбработка;
	Иначе
		Элементы.ГруппаСтраницыПолученияДанныхОбработка.ТекущаяСтраница = Элементы.СтраницаОбработкаНедоступна;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбзор(ВыводитьОкноОжидания = Истина)
	
	ОбзорЗаполнен = Ложь;
	НачатьОбновлениеФормы(Элементы.СтраницаОбзор, ВыводитьОкноОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбработку(ВыводитьОкноОжидания = Истина)
	
	ОбработкаЗаполнена = Ложь;
	НачатьОбновлениеФормы(Элементы.СтраницаОбработка, ВыводитьОкноОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		НачатьПолучениеДанныхСвязанногоОбъектаДО(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь()
	
	ОчиститьДанныеОбъектаДО();
	ОбновитьВидимостьСтраниц(ОбъектДОТип);
	ОбновитьДекорацииОбъектаДО();
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

// Вызывается при получении и изменении данных о связанном объекте, при удалении связи, при изменении
// настроек интеграции. Определяет доступность функционала и изменяет видимость соответствующих страниц формы.
//
&НаСервере
Процедура ОбновитьВидимостьСтраниц(Знач ТипОбъектаДО)
	
	Элементы.СтраницаОбзор.Видимость = Истина;
	ДоступенОбзор = Истина;
	Если ИнтеграцияС1СДокументооборот3.ЭтоДокументДО3(ТипОбъектаДО) Тогда
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.9.18") Тогда
			ДоступенОбзор = Ложь;
			Элементы.ДекорацияОписаниеОбзорНедоступен.Заголовок = НСтр(
				"ru = 'Просмотр обзора не поддерживается в данной версии 1С:Документооборота.
				|Требуется 1С:Документооборот версии 3.0.9 или выше.'");
		КонецЕсли;
	Иначе
		Элементы.СтраницаОбзор.Видимость = Ложь;
		ДоступенОбзор = Ложь;
		Элементы.ДекорацияОписаниеОбзорНедоступен.Заголовок = НСтр(
			"ru = 'Просмотр обзора доступен только для документов предприятия.
			|Интегрированный объект не поддерживает данный функционал.'");
	КонецЕсли;
	
	Элементы.СтраницаОбработка.Видимость = Истина;
	ДоступенПросмотрОбработки = Истина;
	Если ИспользоватьОбработкуОбъектов1СДокументооборота Тогда
		Если ИнтеграцияС1СДокументооборот3.ОбъектДОПоддерживаетОбработку(ТипОбъектаДО) Тогда
			Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.12.22") Тогда
				ДоступенПросмотрОбработки = Ложь;
				Элементы.ДекорацияОписаниеОбработкаНедоступна.Заголовок = НСтр(
					"ru = 'Просмотр обработки не поддерживается в данной версии 1С:Документооборота.
					|Требуется 1С:Документооборот версии 3.0.12 или выше.'");
			КонецЕсли;
		Иначе
			Элементы.СтраницаОбработка.Видимость = Ложь;
			ДоступенПросмотрОбработки = Ложь;
			Элементы.ДекорацияОписаниеОбработкаНедоступна.Заголовок = НСтр(
				"ru = 'Интегрированный объект не поддерживает функционал обработки.'");
		КонецЕсли;
	Иначе
		Элементы.СтраницаОбработка.Видимость = Ложь;
		ДоступенПросмотрОбработки = Ложь;
		Элементы.ДекорацияОписаниеОбработкаНедоступна.Заголовок = НСтр(
			"ru = 'Функционал обработки выключен в настройках интеграции.'");
	КонецЕсли;
	
	ДоступныеЗакладки = Новый Массив;
	Если Элементы.СтраницаОбзор.Видимость Тогда
		ДоступныеЗакладки.Добавить("СтраницаОбзор");
	КонецЕсли;
	Если Элементы.СтраницаОбработка.Видимость Тогда
		ДоступныеЗакладки.Добавить("СтраницаОбработка");
	КонецЕсли;
	
	// Сохраненная закладка может быть неактуальной.
	Если ЗначениеЗаполнено(ТекущаяЗакладка) И ДоступныеЗакладки.Найти(ТекущаяЗакладка) = Неопределено Тогда
		ТекущаяЗакладка = "";
	КонецЕсли;
	Если ТекущаяЗакладка = "" И ДоступныеЗакладки.Количество() > 0 Тогда
		ТекущаяЗакладка = ДоступныеЗакладки[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяЗакладка) И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы[ТекущаяЗакладка] Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ТекущаяЗакладка];
	КонецЕсли;
	
	Если ДоступныеЗакладки.Количество() > 1 Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при открытии формы, при изменении правил интеграции, при получении и изменении данных о
// связанном объекте. Заполняет декорацию заголовка связанного объекта, а также информацию о недоступности
// правил интеграции.
//
&НаСервере
Процедура ОбновитьЗаголовокСвязанногоОбъекта()
	
	Если ЗначениеЗаполнено(ОбъектДОТип) Тогда
		
		ПредставлениеТипаОбъектаДО = ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(
			ОбъектДОТип,
			"ЕдинственноеЧисло");
		Элементы.ДекорацияОбъектЗаголовок.Заголовок = СтрШаблон("%1:", ПредставлениеТипаОбъектаДО);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПредставлениеСоздаваемогоОбъекта) Тогда
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = СтрШаблон("%1:", ПредставлениеСоздаваемогоОбъекта);
			
		ИначеЕсли ЗначениеЗаполнено(ТипСоздаваемогоОбъекта) Тогда
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = СтрШаблон("%1:",
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(
					ТипСоздаваемогоОбъекта,
					"ЕдинственноеЧисло"));
			
		Иначе
			// Нет подходящих правил.
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Соответствие в 1С:Документообороте:'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаИнфо.Видимость Тогда
		
		Если КоличествоПодходящихПравилИнтеграции = 0 Тогда
			
			ПолноеИмяПотребителяПоЧастям = СтрРазделить(ПолноеИмяПотребителя, ".");
			Если ПолноеИмяПотребителяПоЧастям[0] = "Документ" Тогда
				ПредставлениеТипаОбъектаИС = НСтр("ru = 'документа'");
			ИначеЕсли ПолноеИмяПотребителяПоЧастям[0] = "Справочник" Тогда
				ПредставлениеТипаОбъектаИС = НСтр("ru = 'справочника'");
			Иначе
				ПредставлениеТипаОбъектаИС = НСтр("ru = 'объекта'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
				ПредставлениеОбъектаИС = Строка(ВнешнийОбъект);
			Иначе
				ПредставлениеОбъектаИС = ИмяПотребителя;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектДОТип) Тогда
				// Связанный объект уже есть.
				Попытка
					ПредставлениеТипаОбъектаДО = НРег(ПолучитьСклоненияСтроки(
						ПредставлениеТипаОбъектаДО,
						"Л=ru_RU",
						"ПД=Родительный")[0]);
				Исключение
					ПредставлениеТипаОбъектаДО = НСтр("ru = 'объекта'");
				КонецПопытки;
				Инфо = СтрШаблон(НСтр(
					"ru = 'Не настроено правило интеграции для заполнения %1 1С:Документооборота ""%2"" из %3 ""%4"".'"),
					ПредставлениеТипаОбъектаДО,
					ОбъектДО,
					ПредставлениеТипаОбъектаИС,
					ПредставлениеОбъектаИС);
			Иначе
				// Связанный объект еще не создан.
				Инфо = СтрШаблон(НСтр(
					"ru = 'Не настроено правило интеграции для создания объекта 1С:Документооборота из %1 ""%2"".'"),
					ПредставлениеТипаОбъектаИС,
					ПредставлениеОбъектаИС);
			КонецЕсли;
			
			Команда = "ФормаЭлемента";
			
		Иначе
			
			Инфо = СтрШаблон(НСтр(
				"ru = 'Настроено заполнение разных типов объектов 1С:Документооборота из ""%1"".
				|Измените правила или удалите лишние.'"),
				ИмяПотребителя);
			Команда = "ФормаСписка";
			
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Справочники.ПравилаИнтеграцииС1СДокументооборотом3) Тогда
			Инфо = СтроковыеФункции.ФорматированнаяСтрока(
				СтрШаблон("%1 <a href = ""%2||%3"">%4.</a>",
					Инфо,
					Команда,
					ПолноеИмяПотребителя,
					НСтр("ru = 'Настроить'")));
		КонецЕсли;
		
		Элементы.ДекорацияИнфо.Заголовок = Инфо;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при открытии формы и при изменении правил интеграции. Заполняет представление объекта,
// который можно создать через правила интеграции.
//
&НаСервере
Процедура ОбновитьПредставлениеСоздаваемогоОбъекта()
	
	ТипСоздаваемогоОбъекта = "";
	ПредставлениеСоздаваемогоОбъекта = "";
	ВидДокументаИзПравил = "";
	ВидДокументаИзПравилID = "";
	
	// Получим тип и представление создаваемого объекта, если они однозначны.
	ПодходящиеПравилаИнтеграции = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграцииОбъекта(
		ВнешнийОбъект);
	КоличествоПодходящихПравилИнтеграции = ПодходящиеПравилаИнтеграции.Количество();
	РеквизитыПравил = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПодходящиеПравилаИнтеграции,
		"ТипОбъектаДО, ПредставлениеОбъектаДО, ВидДокументаДО, ВидДокументаДОID");
	Для Каждого Правило Из ПодходящиеПравилаИнтеграции Цикл
		Если Не ЗначениеЗаполнено(ТипСоздаваемогоОбъекта) Тогда
			ТипСоздаваемогоОбъекта = РеквизитыПравил[Правило].ТипОбъектаДО;
		ИначеЕсли ТипСоздаваемогоОбъекта <> РеквизитыПравил[Правило].ТипОбъектаДО Тогда
			ТипСоздаваемогоОбъекта = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Правило Из ПодходящиеПравилаИнтеграции Цикл
		Если Не ЗначениеЗаполнено(ПредставлениеСоздаваемогоОбъекта) Тогда
			ПредставлениеСоздаваемогоОбъекта = РеквизитыПравил[Правило].ПредставлениеОбъектаДО;
		ИначеЕсли ПредставлениеСоздаваемогоОбъекта <> РеквизитыПравил[Правило].ПредставлениеОбъектаДО Тогда
			ПредставлениеСоздаваемогоОбъекта = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Правило Из ПодходящиеПравилаИнтеграции Цикл
		Если Не ЗначениеЗаполнено(ВидДокументаИзПравилID) Тогда
			ВидДокументаИзПравил = РеквизитыПравил[Правило].ВидДокументаДО;
			ВидДокументаИзПравилID = РеквизитыПравил[Правило].ВидДокументаДОID;
		ИначеЕсли ВидДокументаИзПравилID <> РеквизитыПравил[Правило].ВидДокументаДОID Тогда
			ВидДокументаИзПравил = "";
			ВидДокументаИзПравилID = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаИнфо.Видимость = Не ЗначениеЗаполнено(ПредставлениеСоздаваемогоОбъекта)
		И Не ЗначениеЗаполнено(ТипСоздаваемогоОбъекта);
	ОбновитьЗаголовокСвязанногоОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсключение(Знач ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	ФормаОбработанаУспешно = Истина;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		ФормаОбработанаУспешно = Ложь;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.7.31") Тогда
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
		
		НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
		ЗаголовокСообщенияВОбластиПредпросмотра = НастройкиДО.ЗаголовокСообщенияВОбластиПредпросмотра;
		
	Иначе
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
		ФормаОбработанаУспешно = Ложь;
		
	КонецЕсли;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеОбъектаДО()
	
	ОбъектДО = "";
	ОбъектДОID = "";
	ОбъектДОТип = "";
	ОбновитьЗаголовокСвязанногоОбъекта();
	ВидОбъектаДО = "";
	ВидОбъектаДОID = "";
	ВидОбъектаДОТип = "";
	ОбъектДОНавигационнаяСсылка = "";
	ПредставлениеHTML = "";
	Действия.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьФункциональныеОпции(Знач ТипОбъектаДО)
	
	ИспользоватьОбработкуОбъектов1СДокументооборота =
		Константы.ИспользоватьОбработкуОбъектов1СДокументооборота.Получить();
	
	ОбновитьВидимостьСтраниц(ТипОбъектаДО);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьФорму

&НаКлиенте
Процедура НачатьОбновлениеФормы(ТекущаяСтраница, ВыводитьОкноОжидания = Истина)
	
	Если ПустаяСтрока(ОбъектДОID) Или ПустаяСтрока(ОбъектДОТип) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ОбновитьФорму(ТекущаяСтраница.Имя, ВыводитьОкноОжидания);
	Если ДлительнаяОперация = Неопределено Тогда
		// Получать данные из ДО не требуется.
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТекущаяСтраницаИмя, ВыводитьОкноОжидания",
		ТекущаяСтраница.Имя,
		ВыводитьОкноОжидания);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбновлениеФормыЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ВыводитьОкноОжидания,
		НСтр("ru = 'Получение данных из 1С:Документооборота.'"),
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьФорму(Знач ТекущаяСтраницаИмя, Знач ВыводитьОкноОжидания)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = Неопределено;
	
	Если ДоступенОбзор И Не ОбзорЗаполнен И ТекущаяСтраницаИмя = "СтраницаОбзор" Тогда
		Запрос = ИнтеграцияС1СДокументооборот3.HTMLПредпросмотрОбъектаЗапрос(Прокси, ОбъектДОID, ОбъектДОТип);
		Если Не ВыводитьОкноОжидания Тогда
			Элементы.ГруппаСтраницыПолученияДанныхОбзор.ТекущаяСтраница = Элементы.СтраницаЗагрузкаИзДООбзор;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступенПросмотрОбработки И Не ОбработкаЗаполнена И ТекущаяСтраницаИмя = "СтраницаОбработка" Тогда
		Запрос = ИнтеграцияС1СДокументооборот3.ТекущаяОбработкаОбъектаЗапрос(Прокси, ОбъектДОID, ОбъектДОТип);
		Если Не ВыводитьОкноОжидания Тогда
			Элементы.ГруппаСтраницыПолученияДанныхОбработка.ТекущаяСтраница = Элементы.СтраницаЗагрузкаИзДООбработка;
		КонецЕсли;
	КонецЕсли;
	
	Если Запрос <> Неопределено Тогда
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьЗапросАсинхронно(
			Прокси,
			Запрос,
			УникальныйИдентификатор,
			НСтр("ru = 'Получение данных из 1С:Документооборота'"));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеФормыЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОбновитьФормуЗавершение(Результат.РезультатДлительнойОперации, ПараметрыОповещения);
		ОбновитьДекорацииОбъектаДО();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуЗавершение(Знач ОтветСтрока, Знач ПараметрыОповещения)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(Прокси, ОтветСтрока);
	
	Если ДоступенОбзор И ПараметрыОповещения.ТекущаяСтраницаИмя = "СтраницаОбзор" Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
				Прокси, Ответ, "DMError") Тогда
			ТекстСообщения = СтрШаблон(
				"%1
				|
				|%2",
				Ответ.subject,
				Ответ.description);
			ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
				ТекстСообщения,
				ЗаголовокСообщенияВОбластиПредпросмотра);
		Иначе
			ПредставлениеHTML = Ответ.ObjectsHTMLPresentations[0].htmlView;
		КонецЕсли;
		ОбзорЗаполнен = Истина;
		Если Не ПараметрыОповещения.ВыводитьОкноОжидания Тогда
			Элементы.ГруппаСтраницыПолученияДанныхОбзор.ТекущаяСтраница = Элементы.СтраницаДанныеПолученыОбзор;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступенПросмотрОбработки И ПараметрыОповещения.ТекущаяСтраницаИмя = "СтраницаОбработка" Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		ИнтеграцияС1СДокументооборот3.ЗаполнитьОбработкуВФорме(ЭтотОбъект, Ответ);
		ОбработкаЗаполнена = Истина;
		Если Не ПараметрыОповещения.ВыводитьОкноОжидания Тогда
			Элементы.ГруппаСтраницыПолученияДанныхОбработка.ТекущаяСтраница = Элементы.СтраницаДанныеПолученыОбработка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхСвязанногоОбъекта

&НаКлиенте
Процедура НачатьПолучениеДанныхСвязанногоОбъектаДО(ТекущаяСтраница)
	
	ОбзорЗаполнен = Ложь;
	ОбработкаЗаполнена = Ложь;
	
	ПараметрыОповещения = Новый Структура("ВыборкаИдентификаторОбъектаДО, ВыборкаТипОбъектаДО", "", "");
	ДлительнаяОперация = ПолучитьДанныеСвязанногоОбъектаДО(
		ПараметрыОповещения.ВыборкаИдентификаторОбъектаДО,
		ПараметрыОповещения.ВыборкаТипОбъектаДО);
	Если ДлительнаяОперация = Неопределено Тогда
		// Связанного объекта нет.
		ОбновитьДекорацииОбъектаДО();
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("ТекущаяСтраницаИмя", ТекущаяЗакладка);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПолучениеДанныхСвязанногоОбъектаДОЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСвязанногоОбъектаДО(ВыборкаИдентификаторОбъектаДО, ВыборкаТипОбъектаДО)
	
	ОчиститьДанныеОбъектаДО();
	
	ЗапросыПакета = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|ГДЕ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &ВнешнийОбъект");
	Запрос.УстановитьПараметр("ВнешнийОбъект", ВнешнийОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСвязей = Выборка.Количество();
	
	Если КоличествоСвязей = 0 Тогда
		
		ОбновитьВидимостьСтраниц(ОбъектДОТип);
		
	ИначеЕсли КоличествоСвязей = 1 Тогда
		
		Выборка.Следующий();
		ВыборкаИдентификаторОбъектаДО = Выборка.ИдентификаторОбъектаДО;
		ВыборкаТипОбъектаДО = Выборка.ТипОбъектаДО;
		
		ОбновитьВидимостьСтраниц(Выборка.ТипОбъектаДО);
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		ОбъектДляПолученияИзДО = Новый Структура;
		ОбъектДляПолученияИзДО.Вставить("ID", ВыборкаИдентификаторОбъектаДО);
		ОбъектДляПолученияИзДО.Вставить("Тип", ВыборкаТипОбъектаДО);
		ОбъектДляПолученияИзДО.Вставить("ВнешнийОбъектИС", ВнешнийОбъект);
		Колонки = Новый Массив;
		Колонки.Добавить("name");
		Если ВыборкаТипОбъектаДО = "DMDocument" Тогда
			Колонки.Добавить("documentType");
		ИначеЕсли ВыборкаТипОбъектаДО = "DMMeeting" Тогда
			Колонки.Добавить("type");
		КонецЕсли;
		ЗапросыПакета.Добавить(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъектыЗапрос(
				Прокси,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДляПолученияИзДО),
				Колонки));
		
		Если ДоступенОбзор И ТекущаяЗакладка = "СтраницаОбзор" Тогда
			ЗапросыПакета.Добавить(
				ИнтеграцияС1СДокументооборот3.HTMLПредпросмотрОбъектаЗапрос(
					Прокси,
					ВыборкаИдентификаторОбъектаДО,
					ВыборкаТипОбъектаДО));
		КонецЕсли;
		
		Если ДоступенПросмотрОбработки И ТекущаяЗакладка = "СтраницаОбработка" Тогда
			ЗапросыПакета.Добавить(
				ИнтеграцияС1СДокументооборот3.ТекущаяОбработкаОбъектаЗапрос(
					Прокси,
					ВыборкаИдентификаторОбъектаДО,
					ВыборкаТипОбъектаДО));
		КонецЕсли;
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьПакетныйЗапросАсинхронно(
			Прокси,
			ЗапросыПакета,
			УникальныйИдентификатор,
			НСтр("ru = 'Открытие формы Документооборот'"));
		
	ИначеЕсли КоличествоСвязей > 1 Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'С объектом ""%1"" связано более одного объекта в 1С:Документооборот.
			|Общее количество связей: %2'"),
			ВнешнийОбъект,
			КоличествоСвязей);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолучениеДанныхСвязанногоОбъектаДОЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПолучитьДанныеСвязанногоОбъектаДОЗавершение(Результат.РезультатДлительнойОперации, ПараметрыОповещения);
		ОбновитьДекорацииОбъектаДО();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСвязанногоОбъектаДОЗавершение(Знач ОтветНаЗапросыПакетаСтрока, Знач ПараметрыОповещения)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		ОтветНаЗапросыПакетаСтрока);
	
	ОтветПолучениеДанных = ОтветНаЗапросыПакета.responses[0];
	Попытка
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, ОтветПолучениеДанных);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		// На стороне ДО такого документа нет. Дальше можно ничего не проверять.
		Возврат;
	КонецПопытки;
	
	Если ОтветПолучениеДанных.objects.Количество() = 1 Тогда
		ОбъектXDTO = ОтветПолучениеДанных.objects[0];
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "name") Тогда
			ОбъектДО = ОбъектXDTO.name;
			ОбъектДОID = ПараметрыОповещения.ВыборкаИдентификаторОбъектаДО;
			ОбъектДОТип = ПараметрыОповещения.ВыборкаТипОбъектаДО;
			ОбновитьЗаголовокСвязанногоОбъекта();
			ОбъектДОНавигационнаяСсылка = ОбъектXDTO.objectID.navigationRef;
		КонецЕсли;
		Если ОбъектДОТип = "DMDocument"
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "documentType") Тогда
			ВидОбъектаДО = ОбъектXDTO.documentType.name;
			ВидОбъектаДОID = ОбъектXDTO.documentType.objectID.id;
			ВидОбъектаДОТип = ОбъектXDTO.documentType.objectID.type;
		ИначеЕсли ОбъектДОТип = "DMMeeting"
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "type") Тогда
			ВидОбъектаДО = ОбъектXDTO.type.name;
			ВидОбъектаДОID = ОбъектXDTO.type.objectID.id;
			ВидОбъектаДОТип = ОбъектXDTO.type.objectID.type;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступенОбзор И ПараметрыОповещения.ТекущаяСтраницаИмя = "СтраницаОбзор" Тогда
		ОтветПредставлениеHTML = ОтветНаЗапросыПакета.responses[1];
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
				Прокси, ОтветПредставлениеHTML, "DMError") Тогда
			ТекстСообщения = СтрШаблон(
				"%1
				|
				|%2",
				ОтветПредставлениеHTML.subject,
				ОтветПредставлениеHTML.description);
			ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
				ТекстСообщения,
				ЗаголовокСообщенияВОбластиПредпросмотра);
		Иначе
			ПредставлениеHTML = ОтветПредставлениеHTML.ObjectsHTMLPresentations[0].htmlView;
		КонецЕсли;
		ОбзорЗаполнен = Истина;
	КонецЕсли;
	
	Если ДоступенПросмотрОбработки И ПараметрыОповещения.ТекущаяСтраницаИмя = "СтраницаОбработка" Тогда
		ОтветОбработка = ОтветНаЗапросыПакета.responses[1];
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, ОтветОбработка);
		ИнтеграцияС1СДокументооборот3.ЗаполнитьОбработкуВФорме(ЭтотОбъект, ОтветОбработка);
		ОбработкаЗаполнена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДействиеСОбработкой

&НаКлиенте
Процедура ДействиеСОбработкой(ТипОперации, ПричинаПрерывания = "", ТребуетсяОбновлениеДанных = Истина)
	
	ДанныеОбработки = ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки(
		ОбъектДОID,
		ОбъектДОТип,
		СостояниеОбработки,
		ПричинаПрерывания);
	
	Попытка
		ДлительнаяОперацияСОбработкой = ИнтеграцияС1СДокументооборот3ВызовСервера.ДлительнаяОперацияСОбработкой(
			ТипОперации,
			ДанныеОбработки,
			УникальныйИдентификатор,
			ТребуетсяОбновлениеДанных);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
	КонецПопытки;
	
	ПараметрыОповещения = Новый Структура("ТипОперации, ДанныеОбработки", ТипОперации, ДанныеОбработки);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ДействиеСОбработкойЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперацияСОбработкой,
		ОповещениеОЗавершении,
		Истина,
		НСтр("ru = 'Выполняется действие с обработкой.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСОбработкойЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатДействия = ДействиеСОбработкойНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		Если РезультатДействия.Успешно Тогда
			ОбновитьДекорацииОбъектаДО();
			Оповестить("Документооборот_ДействиеСОбработкой", ПараметрыОповещения, ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(, РезультатДействия.ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДействиеСОбработкойНаСервереЗавершение(Знач РезультатДействияСтрока)
	
	ДанныеДляОбновления = Неопределено;
	РезультатДействия = ИнтеграцияС1СДокументооборот3.РезультатДействия(
		РезультатДействияСтрока,
		ДанныеДляОбновления);
	
	Если РезультатДействия.Успешно И ДанныеДляОбновления <> Неопределено Тогда
		ИнтеграцияС1СДокументооборот3.ЗаполнитьОбработкуВФорме(ЭтотОбъект, ДанныеДляОбновления);
		ОбработкаЗаполнена = Истина;
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

#КонецОбласти

#КонецОбласти