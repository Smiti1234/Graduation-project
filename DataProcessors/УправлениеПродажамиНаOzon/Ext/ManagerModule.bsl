
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ИмпортДанных

// Обновляет служебные данные дерева товаров при открытии обработки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ДеревоТоваров                  - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                      см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка        - Структура - код и описание ошибки при выполнении функции, см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                         Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//
Функция ОбновитьСлужебныеДанные(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, СортироватьСтрокиДереваТоваров) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",        ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли;
	
	Отказ = Ложь;
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаOzon.ОбновитьСлужебныеДанные");
		
	Попытка
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
		НалогообложениеНДС     = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		Организация            = НастройкиУчетнойЗаписи.Организация;
		ТекущаяДата            = ТекущаяДатаСеанса();
		ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
		СписокНоменклатуры     = Новый Массив;	// Массив Из СправочникСсылка.Номенклатура -
		
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) Тогда
					СписокНоменклатуры.Добавить(СтрокаДереваВторогоУровня.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Запрос для определения дополнительных реквизитов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
			|				И НЕ СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются,
			|	ЕСТЬNULL(СправочникНоменклатура.ИспользоватьУпаковки, ЛОЖЬ) КАК ИспользоватьУпаковки,
			|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
			|			ТОГДА &СтавкаНДСБезНДС
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
			|				И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|			ТОГДА &СтавкаНДСБезНДС
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
			|			ТОГДА &СтавкаНДСПоУмолчанию
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы)
			|			ТОГДА &СтавкаНДСБезНДС
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
			|				И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|					ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|			ТОГДА &СтавкаНДСПоУмолчанию
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
			|				И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|			ТОГДА &СтавкаНДСБезНДС
			|		ИНАЧЕ ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения)))
			|	КОНЕЦ КАК СтавкаНДС,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
			|				ТОГДА &СтавкаНДСБезНДС
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
			|					И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|				ТОГДА &СтавкаНДСБезНДС
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
			|				ТОГДА &СтавкаНДСПоУмолчанию
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы)
			|				ТОГДА &СтавкаНДСБезНДС
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
			|					И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|						ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|				ТОГДА &СтавкаНДСПоУмолчанию
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
			|					И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|				ТОГДА &СтавкаНДСБезНДС
			|			ИНАЧЕ ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения)))
			|		КОНЕЦ КАК Справочник.СтавкиНДС).Ставка КАК Ставка
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &Страна) КАК СтавкиНДСНоменклатурыПриоритет1
			|		ПО СправочникНоменклатура.Ссылка = СтавкиНДСНоменклатурыПриоритет1.Номенклатура
			|			И (СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.НачалоПериода <= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
			|			И (СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.КонецПериода >= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &ПустаяСтрана) КАК СтавкиНДСНоменклатурыПриоритет2
			|		ПО СправочникНоменклатура.Ссылка = СтавкиНДСНоменклатурыПриоритет2.Номенклатура
			|			И (СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.НачалоПериода <= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
			|			И (СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.КонецПериода >= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &Страна) КАК СтавкиНДСНоменклатурыПриоритет3
			|		ПО (СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.НачалоПериода <= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
			|			И (СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.КонецПериода >= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
			|ГДЕ
			|	СправочникНоменклатура.Ссылка В(&СписокНоменклатуры)";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры",                     СписокНоменклатуры);   
		Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		Запрос.УстановитьПараметр("НалогообложениеНДС",                     НалогообложениеНДС);
		Запрос.УстановитьПараметр("СтавкаНДСПоТипуНалогообложения",         УчетНДСУП.СтавкаНДСПоТипуНалогообложения(НалогообложениеНДС, Организация, ТекущаяДата));
		Запрос.УстановитьПараметр("СтавкаНДСПоУмолчанию",         			УчетНДСУП.СтавкаНДСПоУмолчанию(Организация, ТекущаяДата, Истина, НалогообложениеНДС));
		Запрос.УстановитьПараметр("СтавкаНДСБезНДС",						Справочники.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("Дата",									ТекущаяДата);
		Запрос.УстановитьПараметр("Страна",									ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
		Запрос.УстановитьПараметр("ПустаяСтрана", 							Справочники.СтраныМира.ПустаяСсылка());

		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Заполнение дерева товаров  
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса = СтрЗаменить(
					СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса, 
					НСтр("ru = '<не определена>'"), 
					"");
				СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса;
				СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса;
				
				Отбор = Новый Структура("Номенклатура", СтрокаДереваВторогоУровня.Номенклатура);
				ВыборкаДанных.Сбросить();
				Если ВыборкаДанных.НайтиСледующий(Отбор) Тогда
					СтрокаДереваВторогоУровня.ХарактеристикиИспользуются = ВыборкаДанных.ХарактеристикиИспользуются;
					СтрокаДереваВторогоУровня.ИспользоватьУпаковки       = ВыборкаДанных.ИспользоватьУпаковки;
					СтрокаДереваВторогоУровня.ЕдиницаИзмерения           = ВыборкаДанных.ЕдиницаИзмерения;
					СтрокаДереваВторогоУровня.СтавкаНДС                  = ВыборкаДанных.СтавкаНДС;
					СтрокаДереваВторогоУровня.Ставка                     = ВыборкаДанных.Ставка;
				КонецЕсли;
				
				// Значения реквизитов
				ИнтеграцияСМаркетплейсомOzonСервер.ДополнитьТаблицуЗначенийРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
					Неопределено,
					Неопределено,
					СтрокаДереваВторогоУровня.Категория,
					СтрокаДереваВторогоУровня.ДанныеОбъекта,
					Истина);
					
				// Дерево реквизитов
				СтрокаДереваВторогоУровня.ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
					СтрокаДереваВторогоУровня,
					Неопределено,
					НастройкиУчетнойЗаписи,
					ВидыЦен);
			КонецЦикла;
		КонецЦикла;
		
		ОпределитьНаименованияГруппДереваТоваров(
			ДеревоТоваров, 
			СортироватьСтрокиДереваТоваров, 
			0,
			-1);
		
		Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При обновлении служебных данных возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ВыборкаДанных.Количество() / 100);
	
	Возврат Результат;

КонецФункции

// Формирует список товаров с описаниями для последующего импорта.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры выполнения функции:
//     * ВариантЗагрузкиДанных          - Число - вариант загрузки данных из сервиса, см. реквизит "ВариантЗагрузкиДанных" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * КэшКатегорий                   - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//     * ЗагрузитьЦеныПродажи           - Булево - признак записи цен, см. реквизит "ЗагрузитьЦеныПродажи" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//     * ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//     * ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//     * СледующаяПорцияДанных          - Булево - получить следующую порцию данных с торговой площадки (уже считанные данные будут пропущены).
//     * ИдентификаторыТоваров          - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                          см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров.
//   ДеревоТоваров             - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//                             - Неопределено - заполнение дерева товаров не производится.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка                       - Структура - код и описание ошибки при выполнении функции, 
//                                        см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров                - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                                        Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//                                    - Неопределено - заполнение дерева товаров не производится.
//     * КэшКатегорий                 - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//     * ИдентификаторыТоваров        - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                          см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров.
//     * ОписаниеТоваров              - ТаблицаЗначений - описания товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров.
//     * ОписаниеХарактеристикТоваров - ТаблицаЗначений - описания характеристик товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияХарактеристикТоваров.
//     * ОстаткиТоваров               - ТаблицаЗначений - остатки товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОстатковТоваров.
//     * ЦеныТоваров                  - ТаблицаЗначений - цены товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам.
//                                    - Неопределено - заполнение цен товаров не производится.
//
Функция ПолучитьИмпортируемыеДанныеСТорговойПлощадки(Знач УчетнаяЗаписьМаркетплейса, Знач Параметры, ДеревоТоваров = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",        ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
    Если Параметры.Свойство("КэшКатегорий") 
         И ЗначениеЗаполнено(Параметры.КэшКатегорий) Тогда
        Результат.Вставить("КэшКатегорий", Параметры.КэшКатегорий);
    КонецЕсли;
    Если Параметры.Свойство("ИдентификаторыТоваров") Тогда
        Результат.Вставить("ИдентификаторыТоваров", Параметры.ИдентификаторыТоваров);
    КонецЕсли;
	Если ДеревоТоваров = Неопределено Тогда
    	Результат.Вставить("ОписаниеТоваров",              ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров());
    	Результат.Вставить("ОписаниеХарактеристикТоваров", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияХарактеристикТоваров());
    	Результат.Вставить("ОстаткиТоваров",               ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОстатковТоваров());
    	Результат.Вставить("ЦеныТоваров",                  Неопределено);
    КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.КэшКатегорий = Неопределено Тогда
		Параметры.КэшКатегорий = Новый Структура;
	КонецЕсли;
	
	Отказ = Ложь;
		
	ТипНалогообложенияНДС  = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	КэшИдентификаторов     = Новый Соответствие;
	
	Попытка
		ИмяИдентификатора           = Параметры.ИмяИдентификатора;
		Идентификаторы              = Новый Массив;	// Массив Из Строка - 
		ИдентификаторыПовторные     = Новый Массив;	// Массив Из Строка -
		ИдентификаторыНовые         = Новый Массив;	// Массив Из Строка -
		СтрокаДереваГруппаЗагрузить = Неопределено;
		СтрокаДереваГруппаОшибки    = Неопределено;
		
		Если ДеревоТоваров <> Неопределено Тогда
			Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
					// СтрокаДереваГруппаОбновить
				ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
					СтрокаДереваГруппаЗагрузить = СтрокаДереваПервогоУровня;
				ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
					СтрокаДереваГруппаОшибки = СтрокаДереваПервогоУровня;
				Иначе
					Продолжить;
				КонецЕсли;	
					
				Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИдентификаторПубликации) Тогда
						КэшИдентификаторов.Вставить(СтрокаДереваВторогоУровня.ИдентификаторПубликации, СтрокаДереваВторогоУровня.ИдентификаторОбъектаМаркетплейса);
					КонецЕсли;
					
					Если НЕ СтрокаДереваВторогоУровня.Пометка
						 ИЛИ СтрокаДереваВторогоУровня.ИндексСтатуса = 4 Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если Параметры.СледующаяПорцияДанных
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 5 Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					// Дополнительные фильтры
					Если Параметры.ОтображатьСопоставленные = 1
						 И (НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						 	ИЛИ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
						        И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
						 	ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
						
					ИначеЕсли Параметры.ОтображатьСопоставленные = 2
						 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						 	  И (НЕ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
						         ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
						 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если Параметры.ОтображатьПоСтатусу <> -1
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> Параметры.ОтображатьПоСтатусу Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня[ИмяИдентификатора]) Тогда
						Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
							 И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
							ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);							
						Иначе
							СтрокаДереваВторогоУровня.ИндексСтатуса = 7;
							Идентификаторы.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
							
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
								ИдентификаторыНовые.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Новые товары с торговой площадки
		Если Параметры.ВариантЗагрузкиДанных >= 1 
			 И НЕ (ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
			 	   И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных) Тогда
			ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина);
			НомерПП         = 0;
			
			Пока Истина Цикл    
				НомерПП           = НомерПП + 1;
				КоличествоПозиций = Параметры.ИдентификаторыТоваров.Количество();
				
				Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
					 И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
					Прервать;
				КонецЕсли;
				
				ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьИдентификаторыТоваров(
					УчетнаяЗаписьМаркетплейса, 
					ФильтрПоТоварам, 
					Параметры.ИдентификаторыТоваров,
					Параметры.РазмерПорцииЗагрузкиДанных,
					КэшИдентификаторов, 
					Отказ);

				Если Отказ Тогда
					Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
					Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении идентификаторов товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
					Возврат Результат;
				КонецЕсли;
				
				Если КоличествоПозиций = Параметры.ИдентификаторыТоваров.Количество() Тогда
					Прервать;
				КонецЕсли;
				
				ИдентификаторыТоваров = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров();
				Индекс = КоличествоПозиций;
				Пока Индекс < Параметры.ИдентификаторыТоваров.Количество() Цикл
					ЗаполнитьЗначенияСвойств(ИдентификаторыТоваров.Добавить(), Параметры.ИдентификаторыТоваров[Индекс]);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИдентификаторовТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
					|ПОМЕСТИТЬ ТаблицаИдентификаторовТоваров
					|ИЗ
					|	&ТаблицаИдентификаторовТоваров КАК ТаблицаИдентификаторовТоваров
                    |
                    |ИНДЕКСИРОВАТЬ ПО 
					|	ИдентификаторПубликации
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ 
					|	ТаблицаИдентификаторовТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
					|ИЗ
					|	ТаблицаИдентификаторовТоваров КАК ТаблицаИдентификаторовТоваров
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
					|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
					|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
					|			И ТаблицаИдентификаторовТоваров.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации
					|ГДЕ
					|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса ЕСТЬ NULL
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ТаблицаИдентификаторовТоваров";

				Запрос.Текст = СтрЗаменить(Запрос.Текст, 
					"И ТаблицаИдентификаторовТоваров.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации", 
					"И ТаблицаИдентификаторовТоваров." + ИмяИдентификатора + " = СтатусыПубликацииОбъектовМаркетплейсаOzon." + ИмяИдентификатора);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, 
					"ИНДЕКСИРОВАТЬ ПО 
					|	ИдентификаторПубликации", 
					"ИНДЕКСИРОВАТЬ ПО 
					|	" + ИмяИдентификатора);
				
				Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",     УчетнаяЗаписьМаркетплейса);
				Запрос.УстановитьПараметр("ТаблицаИдентификаторовТоваров", ИдентификаторыТоваров);
				
				УстановитьПривилегированныйРежим(Истина);
				ВыборкаДанных = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				
				Пока ВыборкаДанных.Следующий() Цикл
					Если Идентификаторы.Найти(ВыборкаДанных[ИмяИдентификатора]) = Неопределено 
						 И ИдентификаторыПовторные.Найти(ВыборкаДанных[ИмяИдентификатора]) = Неопределено Тогда
						Идентификаторы.Добавить(ВыборкаДанных[ИмяИдентификатора]);
						ИдентификаторыНовые.Добавить(ВыборкаДанных[ИмяИдентификатора]);
						
						Если ДеревоТоваров <> Неопределено Тогда
							Если СтрокаДереваГруппаЗагрузить = Неопределено Тогда
								СтрокаДереваГруппаЗагрузить                 = ДеревоТоваров.Строки.Вставить(Мин(2, ДеревоТоваров.Строки.Количество()));
								СтрокаДереваГруппаЗагрузить.ВариантЗагрузки = 2;
								СтрокаДереваГруппаЗагрузить.ИндексСтатуса   = -2;
							КонецЕсли;
							
							СтрокаДереваВторогоУровня                                  = СтрокаДереваГруппаЗагрузить.Строки.Добавить();
							СтрокаДереваВторогоУровня.ВариантЗагрузки                  = 2;
							СтрокаДереваВторогоУровня.ИндексСтатуса                    = 6;
							СтрокаДереваВторогоУровня.ИдентификаторПубликации          = ВыборкаДанных.ИдентификаторПубликации;
							СтрокаДереваВторогоУровня.ИдентификаторОбъектаМаркетплейса = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
							СтрокаДереваВторогоУровня.ДанныеОбъекта                    = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса            = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров();
							СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса      = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов(Истина);
							СтрокаДереваВторогоУровня.ЦеныТовара                       = Новый Массив;
							СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
							СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Товар;
							СтрокаДереваВторогоУровня.ОбъектПубликации                 = Неопределено;
						КонецЕсли;

						Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
							 И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Идентификаторы.Количество() = 0 Тогда
			Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данных для загрузки с торговой площадки не найдено.'");
			Возврат Результат;
		КонецЕсли;
		
		// Описание товаров                                
		Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
			ПараметрыЗапроса = ИнтеграцияСМаркетплейсомOzonСервер.НовыеПараметрыЗапросаПолученияОписанияТоваров(Идентификаторы, ,);
		Иначе
			ПараметрыЗапроса = ИнтеграцияСМаркетплейсомOzonСервер.НовыеПараметрыЗапросаПолученияОписанияТоваров(, Идентификаторы,);
		КонецЕсли;
		
		ОписаниеТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОписаниеТоваров(
			УчетнаяЗаписьМаркетплейса, 
			ПараметрыЗапроса, 
			Параметры.КэшКатегорий, 
			КэшИдентификаторов,
			Отказ);
		ОписаниеТоваров.Индексы.Добавить(ИмяИдентификатора);
		
		Если Отказ Тогда
			Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении описания товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ОписаниеТоваров.Количество() > 0 Тогда
			// Характеристики товаров
			Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина, Идентификаторы,);
			Иначе
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина, , Идентификаторы);
			КонецЕсли;
			
			ОписаниеХарактеристикТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОписаниеХарактеристикТоваров(
				УчетнаяЗаписьМаркетплейса, 
				ФильтрПоТоварам, 
				Параметры.КэшКатегорий, 
				КэшИдентификаторов,
				Отказ);
			ОписаниеХарактеристикТоваров.Индексы.Добавить(ИмяИдентификатора);
			
			Если Отказ Тогда
				Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении описания характеристик товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				Возврат Результат;
			КонецЕсли;
			
			// Данные соответствия категорий  
			ИдентификаторыКатегорий = ОписаниеТоваров.ВыгрузитьКолонку("ИдентификаторКатегорииМаркетплейса");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.Категория1С КАК Категория1С,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию КАК ЗначениеПоУмолчаниюИдентификатор,
				|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	СоответствияАтрибутовМаркетплейсов.ПорядокСортировки КАК ПорядокСортировки
				|ИЗ
				|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
				|ГДЕ
				|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
				|	И СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса В (&ИдентификаторыКатегорий)";

			Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
			Запрос.УстановитьПараметр("ИдентификаторыКатегорий",   ИдентификаторыКатегорий);
			
			УстановитьПривилегированныйРежим(Истина);
			СоответствияАтрибутовМаркетплейсов = Запрос.Выполнить().Выгрузить();
			СоответствияАтрибутовМаркетплейсов.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
			УстановитьПривилегированныйРежим(Ложь);

		Иначе           
			ОписаниеХарактеристикТоваров       = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияХарактеристикТоваров();
			СоответствияАтрибутовМаркетплейсов = Неопределено;
		КонецЕсли;
		
		Если ИдентификаторыНовые.Количество() > 0 Тогда
			// Остатки товаров
			Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина, ИдентификаторыНовые,);
			Иначе
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина, , ИдентификаторыНовые);
			КонецЕсли;
			
			ОстаткиТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, Отказ);
			ОстаткиТоваров.Индексы.Добавить(ИмяИдентификатора);	
			
			Если Отказ Тогда
				Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении остатков товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				Возврат Результат;
			КонецЕсли;
			
		Иначе
			ОстаткиТоваров = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОстатковТоваров();
		КонецЕсли;

		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"Обработка.УправлениеПродажамиНаOzon.ПолучитьИмпортируемыеДанныеСТорговойПлощадки");
	
		Если ИдентификаторыНовые.Количество() > 0 Тогда
			// Поиск номенклатурных позиций
			РазделителиСловПоиска     = ",/(";
			ПараметрыРасчетаСтавкиНДС = Новый Структура("НалогообложениеНДС, Организация, Дата", 
				ТипНалогообложенияНДС, НастройкиУчетнойЗаписи.Организация, ТекущаяДатаСеанса());
			
			РезультатПоиска = ИнтеграцияСМаркетплейсомOzonСервер.НайтиНоменклатурыХарактеристикиУпаковки(
				ИдентификаторыНовые, 
				ИмяИдентификатора,
				ОписаниеТоваров,
				ОписаниеХарактеристикТоваров,
				ПараметрыРасчетаСтавкиНДС, 
				РазделителиСловПоиска, 
				Истина);
				
			РезультатПоискаОсновныхСправочников = РезультатПоиска.ОсновныеСправочники;
			РезультатПоискаКатегорий            = Неопределено;
			
			Если РезультатПоиска.Категории <> Неопределено Тогда
				РезультатПоискаКатегорий = ИнтеграцияСМаркетплейсомOzonСервер.ВыборкаИсточникаКатегорииМаркетплейса(
					РезультатПоиска.Категории, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, Ложь, Истина);
			КонецЕсли;
				
		Иначе
			РезультатПоискаОсновныхСправочников = Неопределено;
			РезультатПоискаКатегорий            = Неопределено;
		КонецЕсли;
		
		// Цены товаров
		ЦеныТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам(
			УчетнаяЗаписьМаркетплейса, 
			Идентификаторы,
			ИмяИдентификатора);
		Если ЦеныТоваров <> Неопределено Тогда
			ЦеныТоваров.Индексы.Добавить(ИмяИдентификатора);
		КонецЕсли;
		
		// Заполнение дерева товаров  
		Если ДеревоТоваров <> Неопределено Тогда
			Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
					Если ИдентификаторыПовторные.Найти(СтрокаДереваВторогоУровня[ИмяИдентификатора]) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;					
					
					СтрокаДереваВторогоУровня.Изображения.Очистить();
					СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Очистить();
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Очистить();
					СтрокаДереваВторогоУровня.ЦеныТовара = Новый Массив;
					
					Отбор = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);
					
					// Цены товаров           
					Если ЦеныТоваров <> Неопределено Тогда
						НайденныеСтрокиЦеныТоваров = ЦеныТоваров.НайтиСтроки(Отбор);
						Для каждого ЭлементКоллекции Из НайденныеСтрокиЦеныТоваров Цикл
							СтрокаДереваВторогоУровня.ЦеныТовара.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции));
						КонецЦикла;
					КонецЕсли;
											
					// Описание товаров
					НайденныеСтрокиОписаниеТоваров = ОписаниеТоваров.НайтиСтроки(Отбор);
					
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня[ИмяИдентификатора])
						 И НайденныеСтрокиОписаниеТоваров.Количество() > 0 Тогда
						// Заполнить строки дерева
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
							ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, НайденныеСтрокиОписаниеТоваров[0],, "Изображения");
						КонецЕсли;                                                                           
						
						// Изображения
						СтрокаДереваВторогоУровня.Изображения = НайденныеСтрокиОписаниеТоваров[0].Изображения.Скопировать();
						
						// Данные из сервиса
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Добавить(), НайденныеСтрокиОписаниеТоваров[0]);
						
						НайденныеСтрокиОписаниеХарактеристикТоваров = ОписаниеХарактеристикТоваров.НайтиСтроки(Отбор);
						Если НайденныеСтрокиОписаниеХарактеристикТоваров.Количество() > 0 Тогда
							СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса = НайденныеСтрокиОписаниеХарактеристикТоваров[0].ЗначенияАтрибутов.Скопировать();
						КонецЕсли;
						
						// Остатки и схемы работы
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
							ОстатокFBO = 0;
							РезервFBO  = 0;
							ОстатокFBS = 0;
							РезервFBS  = 0;
							
							НайденныеСтрокиОстаткиТоваров = ОстаткиТоваров.НайтиСтроки(Отбор);							
							Для каждого ЭлементКоллекции Из НайденныеСтрокиОстаткиТоваров Цикл
								Если ЭлементКоллекции.ТипСкладаМаркетплейса = "FBO" Тогда
									ОстатокFBO = ОстатокFBO + ЭлементКоллекции.КоличествоВНаличии;
									РезервFBO  = РезервFBO  + ЭлементКоллекции.КоличествоЗарезервировано;
								ИначеЕсли ЭлементКоллекции.ТипСкладаМаркетплейса = "FBS" Тогда
									ОстатокFBS = ОстатокFBS + ЭлементКоллекции.КоличествоВНаличии;
									РезервFBS  = РезервFBS  + ЭлементКоллекции.КоличествоЗарезервировано;
								КонецЕсли;
							КонецЦикла;
						
							СтрокаДереваВторогоУровня.ДатаАктуальностиОстатковМаркетплейса = ТекущаяДатаСеанса();
							СтрокаДереваВторогоУровня.ОстатокFBO                           = ОстатокFBO;
							СтрокаДереваВторогоУровня.РезервFBO                            = РезервFBO;
							СтрокаДереваВторогоУровня.ОстатокFBS                           = ОстатокFBS;
							СтрокаДереваВторогоУровня.РезервFBS                            = РезервFBS;
							СтрокаДереваВторогоУровня.ПродаетсяПоСхемеРаботыFBS            = (ОстатокFBS > 0) ИЛИ (РезервFBS > 0);
						КонецЕсли;
						
						Если НайденныеСтрокиОписаниеХарактеристикТоваров.Количество() > 0
							 И НайденныеСтрокиОписаниеХарактеристикТоваров[0].ФильтрВидимости = "ARCHIVED" Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве;
						КонецЕсли;
						
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
							СтрокаДереваВторогоУровня.Пометка       = (Параметры.ВариантЗагрузкиДанных >= 1);
							СтрокаДереваВторогоУровня.ИндексСтатуса = 6;

							// Подобрать номенклатуру, характеристику, упаковку
							РезультатПоиска = ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьНоменклатуруХарактеристикуУпаковку(
								РезультатПоискаОсновныхСправочников,
								УчетнаяЗаписьМаркетплейса,
								СтрокаДереваВторогоУровня[ИмяИдентификатора],
								ИмяИдентификатора);
							
							СтрокаДереваВторогоУровня.Номенклатура                              = РезультатПоиска.Номенклатура;
							СтрокаДереваВторогоУровня.ХарактеристикиИспользуются                = РезультатПоиска.ХарактеристикиИспользуются;
							СтрокаДереваВторогоУровня.Характеристика                            = РезультатПоиска.Характеристика;
							СтрокаДереваВторогоУровня.ИспользоватьУпаковки                      = РезультатПоиска.ИспользоватьУпаковки;
							СтрокаДереваВторогоУровня.Упаковка                                  = РезультатПоиска.Упаковка;
							СтрокаДереваВторогоУровня.ЕдиницаИзмерения                          = РезультатПоиска.ЕдиницаИзмерения;
							СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = РезультатПоиска.Категория;
							СтрокаДереваВторогоУровня.Категория                                 = РезультатПоиска.Категория;
							СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса;
							СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса;
							СтрокаДереваВторогоУровня.СтавкаНДС                                 = РезультатПоиска.СтавкаНДС;
							СтрокаДереваВторогоУровня.Ставка                                    = РезультатПоиска.Ставка;
							
							Если РезультатПоискаКатегорий <> Неопределено
								 И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
								Отбор = Новый Структура("Категория1С, ИдентификаторОбъектаМаркетплейса", СтрокаДереваВторогоУровня.Категория, СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса);
								РезультатПоискаКатегорий.Сбросить();
								Если РезультатПоискаКатегорий.НайтиСледующий(Отбор) Тогда
									СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = РезультатПоискаКатегорий.РодительКатегории1С;
									СтрокаДереваВторогоУровня.Категория                                 = РезультатПоискаКатегорий.Категория1С;
									СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = РезультатПоискаКатегорий.ИдентификаторОбъектаМаркетплейса;
									СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = РезультатПоискаКатегорий.НаименованиеОбъектаМаркетплейса;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							СтрокаДереваВторогоУровня.Пометка       = Ложь;
							СтрокаДереваВторогоУровня.ИндексСтатуса = 7;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса) Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками; 
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОшибки = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'") 
								+ " " + СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОшибки;
								
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
								СтрокаДереваВторогоУровня.Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками; 
								СтрокаДереваВторогоУровня.ОписаниеОшибки = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'") 
									+ " " + СтрокаДереваВторогоУровня.ОписаниеОшибки;
							КонецЕсли;
						КонецЕсли;

					Иначе
						СтрокаДереваВторогоУровня.Пометка       = Ложь;
						СтрокаДереваВторогоУровня.ИндексСтатуса = 4;
					КонецЕсли;
					
					// Значения реквизитов
					ИнтеграцияСМаркетплейсомOzonСервер.ДополнитьТаблицуЗначенийРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						Параметры.КэшКатегорий,
						СоответствияАтрибутовМаркетплейсов,
						СтрокаДереваВторогоУровня.Категория,
						СтрокаДереваВторогоУровня.ДанныеОбъекта,
						Истина);
						
					Если СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Количество() > 0 Тогда
						// Описание товара
						Если НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса) Тогда
							// Аннотация (описание)
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", "4191"));
							Если НайденныеСтроки.Количество() > 0 Тогда
								СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
									СтрокаДереваВторогоУровня.ОписаниеОбъектаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						// Объединение в одну карточку
						Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", "Объединить на одной карточке");
						НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() = 0 Тогда
							Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", "Combine into One PDP");
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						КонецЕсли;
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОбъединяетсяВОднуКарточку        = Истина;
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ЗначениеОбъединенияВОднуКарточку = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
								СтрокаДереваВторогоУровня.ОбъединяетсяВОднуКарточку        = Истина;
								СтрокаДереваВторогоУровня.ЗначениеОбъединенияВОднуКарточку = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
					// Дерево реквизитов
					СтрокаДереваВторогоУровня.ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						СтрокаДереваВторогоУровня,
						СтрокаДереваВторогоУровня.ЦеныТовара,
						НастройкиУчетнойЗаписи,
						ВидыЦен);
						
					// Различия
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 4 Тогда
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
						ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
						
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
						ЕстьРазличияКатегорииOzon = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
						
						Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
						ЕстьРазличияЦеновыеПоказатели = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
						
						Отбор = Новый Структура("ЕстьРазличия", Истина);
						ЕстьРазличия = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество() - ЕстьРазличияСтавкаНДС - ЕстьРазличияКатегорииOzon - ЕстьРазличияЦеновыеПоказатели;
						
						Если ЕстьРазличия > 0 Тогда
							СтрокаДереваВторогоУровня.Пометка       = (Параметры.ВариантЗагрузкиДанных <= 1);
							СтрокаДереваВторогоУровня.ИндексСтатуса = 6;
						ИначеЕсли Параметры.ЗагрузитьЦеныПродажи И (ЕстьРазличияЦеновыеПоказатели > 0) Тогда
							СтрокаДереваВторогоУровня.Пометка = (Параметры.ВариантЗагрузкиДанных <= 1);
						КонецЕсли;
						
					Иначе
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
						ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 
					 ИЛИ СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = 0;
				
				Пока Индекс < СтрокаДереваПервогоУровня.Строки.Количество() Цикл
					СтрокаДереваВторогоУровня = СтрокаДереваПервогоУровня.Строки[Индекс];
					
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = 4 Тогда
						Если СтрокаДереваГруппаОшибки = Неопределено Тогда
							СтрокаДереваГруппаОшибки                 = ДеревоТоваров.Строки.Вставить(Мин(3, ДеревоТоваров.Строки.Количество()));
							СтрокаДереваГруппаОшибки.ВариантЗагрузки = 3;
							СтрокаДереваГруппаОшибки.ИндексСтатуса   = -2;
						КонецЕсли;
						
						ПеренестиСтрокуДереваТоваровВДругуюГруппу(ДеревоТоваров, СтрокаДереваВторогоУровня, СтрокаДереваГруппаОшибки);
						
					Иначе
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ОпределитьНаименованияГруппДереваТоваров(
				ДеревоТоваров, 
				Параметры.СортироватьСтрокиДереваТоваров, 
				Параметры.ОтображатьСопоставленные,
				Параметры.ОтображатьПоСтатусу);
		КонецЕсли;	
		
		Если ДеревоТоваров <> Неопределено Тогда
			Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		Иначе
			Результат.Вставить("ОписаниеТоваров",              ОписаниеТоваров);
			Результат.Вставить("ОписаниеХарактеристикТоваров", ОписаниеХарактеристикТоваров);
			Результат.Вставить("ОстаткиТоваров",               ОстаткиТоваров);
			Результат.Вставить("ЦеныТоваров",                  ЦеныТоваров);
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.КэшКатегорий) Тогда
			Результат.Вставить("КэшКатегорий", Параметры.КэшКатегорий);
		КонецЕсли;		
		Результат.Вставить("ИдентификаторыТоваров", Параметры.ИдентификаторыТоваров);
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При импорте данных с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Идентификаторы.Количество() / 10);
	
	Возврат Результат;

КонецФункции

// Записывает загруженные данные с торговой площадки в информационную базу.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ДеревоТоваров             - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   Параметры                 - Структура - параметры выполнения функции:
//     * ВариантЗагрузкиДанных          - Число - вариант загрузки данных из сервиса, см. реквизит "ВариантЗагрузкиДанных" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ЗагрузитьЦеныПродажи           - Булево - признак записи цен, см. реквизит "ЗагрузитьЦеныПродажи" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ЗаписатьТолькоЦены             - Булево - Истина, если необходимо записать только цены товаров.
//     * ТолькоСоздатьНоменклатуру      - Булево - Истина, если необходимо только создать элементы справочника "Номенклатура".
//     * ЗагрузитьИзображения           - Булево - Истина, если необходимо загрузить изображения товаров.
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//     * ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//     * ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка         - Структура - код и описание ошибки при выполнении функции, 
//                          см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров  - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * Записано       - Число - количество записанных данных;
//     * ВТомЧислеНовых - Число - количество новых записанных данных;
//     * НеЗаписано     - Число - количество данных с ошибками записи;
//     * Пропущено      - Массив Из Структура - информация о пропущенных записях:
//       ** НомерСтроки   - Число - номер строки дерева товаров;
//       ** Сообщение     - Строка - описание ошибки.
//     * ЗагруженыЦены  - Булево - в результате выполнения функции были загружены цены товаров.
//
Функция ЗаписатьЗагруженныеДанныеСТорговойПлощадки(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, Знач Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",         ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
    Результат.Вставить("ДеревоТоваров",  ДеревоТоваров);
    Результат.Вставить("Записано",       0);
    Результат.Вставить("ВТомЧислеНовых", 0);
    Результат.Вставить("НеЗаписано",     0);
    Результат.Вставить("Пропущено",      Новый Массив);
    Результат.Вставить("ЗагруженыЦены",  Параметры.ЗагрузитьЦеныПродажи ИЛИ Параметры.ЗаписатьТолькоЦены);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли; 
	
	ДоступнаУстановкаЦен = ПравоДоступа("Проведение", Метаданные.Документы.УстановкаЦенНоменклатуры);
	
	Если НЕ ДоступнаУстановкаЦен Тогда
		Результат.Вставить("ЗагруженыЦены", Ложь);
		
		Если Параметры.ЗаписатьТолькоЦены Тогда
			Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Для пользователя не доступна установка цен номенклатуры.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаOzon.ЗаписатьЗагруженныеДанныеСТорговойПлощадки");
	
	ТипНалогообложенияНДС  = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	
	Попытка
		ТаблицаТоваров    = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
		Идентификаторы    = Новый Массив;	// Массив Из Строка -
		ИмяИдентификатора = Параметры.ИмяИдентификатора;
		
		МассивПолейТаблицыТоваров = Новый Массив;
		Для Каждого Колонка Из ТаблицаТоваров.Колонки Цикл
			МассивПолейТаблицыТоваров.Добавить(Колонка.Имя);
		КонецЦикла;
		ПоляТаблицыТоваров = СтрСоединить(МассивПолейТаблицыТоваров, ", "); // Строка
		
		ВсегоОтмечено       = 0;
		ВсегоНеПолучено     = 0;
		ВсегоНеСопоставлено = 0;
		
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
				// СтрокаДереваГруппаОбновить 
			ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
				// СтрокаДереваГруппаЗагрузить 
			Иначе
				Продолжить;
			КонецЕсли;	
				
			Индекс = 0;
			Пока Индекс < СтрокаДереваПервогоУровня.Строки.Количество() Цикл
				СтрокаДереваВторогоУровня = СтрокаДереваПервогоУровня.Строки[Индекс];
				
				// Дополнительные фильтры
				Если Параметры.ОтображатьСопоставленные = 1
					 И (НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
					 	ИЛИ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
					        И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
					 	ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
					Индекс = Индекс + 1;
					Продолжить;
					
				ИначеЕсли Параметры.ОтображатьСопоставленные = 2
					 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
					 	  И (НЕ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
					         ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
					 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ОтображатьПоСтатусу <> -1
					 И СтрокаДереваВторогоУровня.ИндексСтатуса <> Параметры.ОтображатьПоСтатусу Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;

				// Отмеченные позиции
				Если СтрокаДереваВторогоУровня.Пометка Тогда
					ВсегоОтмечено = ВсегоОтмечено + 1;
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = 5 Тогда
						ВсегоНеПолучено = ВсегоНеПолучено + 1;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) И НЕ Параметры.СоздатьЭлементыНоменклатуры Тогда
						ВсегоНеСопоставлено = ВсегоНеСопоставлено + 1;
					КонецЕсли;
				КонецЕсли;				
				
				Если НЕ СтрокаДереваВторогоУровня.Пометка 
					 ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИдентификаторПубликации)
					 ИЛИ СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 И Параметры.ВариантЗагрузкиДанных = 2
					 ИЛИ СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 И Параметры.ВариантЗагрузкиДанных = 0
					 ИЛИ СтрокаДереваВторогоУровня.ВариантЗагрузки = 3 
					 ИЛИ СтрокаДереваВторогоУровня.ИндексСтатуса = 4 
					 ИЛИ СтрокаДереваВторогоУровня.ИндексСтатуса = 5
					 ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) И НЕ Параметры.СоздатьЭлементыНоменклатуры Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ЗаписатьТолькоЦены 
					 И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				// Создать номенклатуру
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 
					 И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
					 И (Параметры.СоздатьЭлементыНоменклатуры 
					    ИЛИ Параметры.ТолькоСоздатьНоменклатуру) Тогда
					НачатьТранзакцию();
					
					Попытка  
						Номенклатура                    = Справочники.Номенклатура.СоздатьЭлемент();
						Номенклатура.ТипНоменклатуры    = Перечисления.ТипыНоменклатуры.Товар;
						Номенклатура.Наименование       = СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса;
						Номенклатура.НаименованиеПолное = СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса;
						Номенклатура.Описание           = СтрокаДереваВторогоУровня.ОписаниеОбъектаМаркетплейса;
						Номенклатура.Артикул            = СтрокаДереваВторогоУровня.ИдентификаторПубликации;
						
						Номенклатура.ОбменДанными.Загрузка = Истина;
						Номенклатура.Записать();
						
						СтрокаДереваВторогоУровня.Номенклатура                    = Номенклатура.Ссылка;
						СтрокаДереваВторогоУровня.НаименованиеОбъектаМаркетплейса = Номенклатура.Наименование;
						
						ТекущаяКатегория = ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(
							УчетнаяЗаписьМаркетплейса,
							СтрокаДереваВторогоУровня.Номенклатура,
							СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса,
							ИсточникКатегории);
								
						СтрокаДереваВторогоУровня.Категория                                 = ТекущаяКатегория.Категория;
						СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = ТекущаяКатегория.ИсточникКатегории;
						СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = ТекущаяКатегория.ИдентификаторКатегории;
						СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = ТекущаяКатегория.НаименованиеКатегории;
						 
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    СтрокаДереваВторогоУровня.Характеристика);
						СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрокаДереваВторогоУровня.Упаковка);
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                    Новый Структура("НалогообложениеНДС, Организация, Дата", 
							ТипНалогообложенияНДС, НастройкиУчетнойЗаписи.Организация, ТекущаяДатаСеанса()));

						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДереваВторогоУровня, СтруктураДействий, Неопределено);
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(СтрокаДереваВторогоУровня.Номенклатура, "ИспользоватьУпаковки, ЕдиницаИзмерения"));
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При создании новой номенклатурной позиции «%1» возникла ошибка: %2.'", 
								ОбщегоНазначения.КодОсновногоЯзыка()),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ТекстСообщения);
							
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
							Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка создания новой номенклатурной позиции «%1».'"),
							    СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));
						Результат.НеЗаписано = Результат.НеЗаписано + 1;
						Индекс = Индекс + 1;
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				Если Параметры.ТолькоСоздатьНоменклатуру Тогда
					СтрокаДереваВторогоУровня.Пометка       = Ложь;
					СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса - 100;
					
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ЗагрузитьЦеныПродажи ИЛИ Параметры.ЗаписатьТолькоЦены Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), СтрокаДереваВторогоУровня);
					Идентификаторы.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
				
					Если Параметры.ЗаписатьТолькоЦены Тогда
						СтрокаДереваВторогоУровня.Пометка       = Ложь;
						СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса - 100;
						
						Индекс = Индекс + 1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Изображения
				Если Параметры.ЗагрузитьИзображения Тогда
					НачатьТранзакцию();
					
					Попытка                                                                          
						Записать = Ложь;
						
						Если СтрокаДереваВторогоУровня.Изображения.Колонки.Найти("Обработано") = Неопределено Тогда
							СтрокаДереваВторогоУровня.Изображения.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
						КонецЕсли;
						СтрокаДереваВторогоУровня.Изображения.ЗаполнитьЗначения(Ложь, "Обработано");
						
						БлокировкаДанных = Новый БлокировкаДанных;
						ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
						ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
						ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса",    Перечисления.ВидыОбъектовМаркетплейсов.Изображение);
						ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаДереваВторогоУровня.Номенклатура);
						ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаДереваВторогоУровня.Характеристика);
						ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",                  СтрокаДереваВторогоУровня.Упаковка);
						БлокировкаДанных.Заблокировать();

						НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
						НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(Перечисления.ВидыОбъектовМаркетплейсов.Изображение);
						НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаДереваВторогоУровня.Номенклатура);
						НаборЗаписей.Отбор.Характеристика.Установить(СтрокаДереваВторогоУровня.Характеристика);
						НаборЗаписей.Отбор.Упаковка.Установить(СтрокаДереваВторогоУровня.Упаковка);
						НаборЗаписей.Прочитать();
						
						Для каждого Запись Из НаборЗаписей Цикл          
							Если ЗначениеЗаполнено(Запись.ПредставлениеОбъектаМаркетплейса) Тогда
								Отбор = Новый Структура("ПутьКФайлу", Запись.ПредставлениеОбъектаМаркетплейса);
								НайденныеСтроки = СтрокаДереваВторогоУровня.Изображения.НайтиСтроки(Отбор);
								Если НайденныеСтроки.Количество() = 0 Тогда
									Если Запись.Статус <> Перечисления.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется Тогда
										ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
										Если ДанныеОбъекта = Неопределено Тогда
											ДанныеОбъекта = ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокАтрибутовИзображения();
										КонецЕсли;
										ДанныеОбъекта.Вставить("ЭтоОсновноеИзображение", Ложь);
										Если НЕ ДанныеОбъекта.Свойство("СсылкаНаФайлВСервисеПубличныхСсылок") Тогда
											ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
										КонецЕсли;
										Если НЕ ДанныеОбъекта.Свойство("УдаляемыеСсылки") Тогда
											ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);
										КонецЕсли;
										Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.УдаляемыеСсылки.Получить(Запись.ПредставлениеОбъектаМаркетплейса)) Тогда
											ДанныеОбъекта.УдаляемыеСсылки.Вставить(Запись.ПредставлениеОбъектаМаркетплейса, ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
										КонецЕсли;
										ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = "";
										
										Запись.Статус                           = Перечисления.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется;
										Запись.Состояние                        = НСтр("ru = 'Не используется'");
										Запись.ОписаниеСостояния                = НСтр("ru = 'Не используется'");
										Запись.ПредставлениеОбъектаМаркетплейса = "";
										Запись.ДанныеОбъекта                    = Новый ХранилищеЗначения(ДанныеОбъекта);
										Запись.ДатаОбновления                   = ТекущаяДатаСеанса();
										
										Записать = Истина;
									КонецЕсли;
									
								Иначе
									Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
										СтрокаТаблицыЗначений.Обработано = Истина;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Отбор = Новый Структура("Обработано", Ложь);
						НайденныеСтроки = СтрокаДереваВторогоУровня.Изображения.НайтиСтроки(Отбор);
						Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
							АдресВременногоХранилищаФайла = Неопределено;
							
							ДанныеИзображения = ИнтеграцияСМаркетплейсамиСервер.ДанныеФайлаПоВнешнейСсылке(СтрокаТаблицыЗначений.ПутьКФайлу);
							Если ДанныеИзображения.Статус 
								 И ИнтеграцияСМаркетплейсамиСервер.ЭтоФайлКартинки(ДанныеИзображения.Путь) Тогда
								АдресВременногоХранилищаФайла = ДанныеИзображения.Путь;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(АдресВременногоХранилищаФайла) Тогда
								ИмяФайла              = СтрЗаменить(СтрокаТаблицыЗначений.ПутьКФайлу, "\", "/");
								ИмяФайла              = Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца) + 1);
								ИмяФайлаБезРасширения = Сред(ИмяФайла, 1, СтрНайти(ИмяФайла, ".") - 1);
								РасширениеФайла       = НРег(Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
								
								ОбменДанными = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
								ОбменДанными.ОбменДанными.Загрузка = Истина;
								
								ДополнительныеРеквизиты = Новый Структура;
								ДополнительныеРеквизиты.Вставить("ПубликуетсяВСервисах", Истина);
								ДополнительныеРеквизиты.Вставить("ДатаСоздания",         ТекущаяУниверсальнаяДата());
								
								ПараметрыФайла                             = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
								ПараметрыФайла.Автор                       = Пользователи.АвторизованныйПользователь();
								ПараметрыФайла.ВладелецФайлов              = СтрокаДереваВторогоУровня.Номенклатура;
								ПараметрыФайла.ИмяБезРасширения            = ИмяФайлаБезРасширения;
								ПараметрыФайла.РасширениеБезТочки          = РасширениеФайла;
								ПараметрыФайла.ГруппаФайлов                = Неопределено;
								ПараметрыФайла.ВремяИзмененияУниверсальное = ДополнительныеРеквизиты.ДатаСоздания;
								
								ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВременногоХранилищаФайла,, СтрокаТаблицыЗначений.ПутьКФайлу);
								Если ПрисоединенныйФайл <> Неопределено Тогда
									ДанныеОбъекта                                     = ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокАтрибутовИзображения();
									ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = СтрокаТаблицыЗначений.ПутьКФайлу;
									ДанныеОбъекта.ЭтоОсновноеИзображение              = СтрокаТаблицыЗначений.ОсновноеИзображение;
									ДанныеОбъекта.ЭтоИзображение360                   = СтрокаТаблицыЗначений.Изображение360;
									ДанныеОбъекта.УдаляемыеСсылки                     = Новый Соответствие;
									
									Запись                                  = НаборЗаписей.Добавить();
									Запись.УчетнаяЗаписьМаркетплейса        = СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса;
									Запись.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Изображение;
									Запись.Номенклатура                     = СтрокаДереваВторогоУровня.Номенклатура;
									Запись.Характеристика                   = СтрокаДереваВторогоУровня.Характеристика;
									Запись.Упаковка                         = СтрокаДереваВторогоУровня.Упаковка;
                                    Запись.ОбъектПубликации                 = ПрисоединенныйФайл;
									Запись.ИдентификаторПубликации          = ИнтеграцияСМаркетплейсомOzonСервер.ХешСуммаПрисоединенногоФайла(ПрисоединенныйФайл);
									Запись.Статус                           = Перечисления.СтатусыОбъектовМаркетплейсаOzon.Загружен;
									Запись.НаименованиеОбъектаМаркетплейса  = Строка(ПрисоединенныйФайл);
									Запись.ПредставлениеОбъектаМаркетплейса = СтрокаТаблицыЗначений.ПутьКФайлу;
									Запись.ДанныеОбъекта                    = Новый ХранилищеЗначения(ДанныеОбъекта);
									Запись.ДатаСоздания                     = ТекущаяДатаСеанса();
									
									Записать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если Записать Тогда
							НаборЗаписей.Записать(Истина);
						КонецЕсли;
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При записи сведений по изображениям товарной позиции «%1» возникла ошибка: %2.'", 
								ОбщегоНазначения.КодОсновногоЯзыка()),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ТекстСообщения);
							
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
							Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'При записи сведений по изображениям товарной позиции «%1» возникли ошибки.'"),
							    СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));
					КонецПопытки;
				КонецЕсли;
				
				// Запись данных объекта 
				НачатьТранзакцию();
				
				Попытка  
					// Корректировка данных
					ДанныеОбъекта = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
					Для каждого СтрокаТаблицыЗначений Из СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса Цикл
						Если НЕ СтрокаТаблицыЗначений.ТолькоТекущее Тогда
							ЗаполнитьЗначенияСвойств(ДанныеОбъекта.Добавить(), СтрокаТаблицыЗначений);
						КонецЕсли;
					КонецЦикла;
					ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса, "УчетнаяЗаписьМаркетплейса");
					
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Номенклатура,                                                                   "Номенклатура");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Характеристика,                                                                 "Характеристика");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Упаковка,                                                                       "Упаковка");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Категория,                                                                      "Категория1С");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса,                                                  "ИсточникКатегорииМаркетплейса");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрЗаменить(СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_"), "ИдентификаторИсточникаКатегорииМаркетплейса");
						
						СтрокаДереваВторогоУровня.ДатаСоздания                    = ТекущаяДатаСеанса();
						СтрокаДереваВторогоУровня.НаименованиеОбъектаМаркетплейса = ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТоварнойПозиции(
							СтрокаДереваВторогоУровня.Номенклатура, 
							СтрокаДереваВторогоУровня.Характеристика, 
							СтрокаДереваВторогоУровня.Упаковка);
							
					Иначе
						СтрокаДереваВторогоУровня.ДатаОбновления = ТекущаяДатаСеанса();
					КонецЕсли;
					
					СтрокаДереваВторогоУровня.ДанныеОбъекта              = ДанныеОбъекта.Скопировать();
					СтрокаДереваВторогоУровня.ИсточникиСхожихПредложений = СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ИсточникиСхожихПредложений.Скопировать();
					
					// РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
					ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса",    СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаДереваВторогоУровня.Номенклатура);
					ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаДереваВторогоУровня.Характеристика);
					ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",                  СтрокаДереваВторогоУровня.Упаковка);
					БлокировкаДанных.Заблокировать();

					НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
					НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса);
					НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаДереваВторогоУровня.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(СтрокаДереваВторогоУровня.Характеристика);
					НаборЗаписей.Отбор.Упаковка.Установить(СтрокаДереваВторогоУровня.Упаковка);
					НаборЗаписей.Отбор.ОбъектПубликации.Установить(Неопределено);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() = 0 Тогда
						Запись = НаборЗаписей.Добавить();
						
					ИначеЕсли СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ОтменитьТранзакцию();

						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Товарная позиция «%1» не записана, т.к. уже существует другая позиция с таким набором ключевых полей: %2, %3, %4, %5.'"),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса,
							СтрокаДереваВторогоУровня.Номенклатура,
							СтрокаДереваВторогоУровня.Характеристика,
							СтрокаДереваВторогоУровня.Упаковка);
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
							Индекс + 1, ТекстСообщения));
						Результат.НеЗаписано = Результат.НеЗаписано + 1;
						Индекс = Индекс + 1;
						
						// Удаление дубля товара
						Отбор = Новый Структура(ПоляТаблицыТоваров);
						ЗаполнитьЗначенияСвойств(Отбор, СтрокаДереваВторогоУровня);
						СтрокиТовара = ТаблицаТоваров.НайтиСтроки(Отбор);
						Для Каждого СтрокаТовара Из СтрокиТовара Цикл
							ТаблицаТоваров.Удалить(СтрокаТовара);
							Прервать;
						КонецЦикла;
						
						Продолжить;
						
					Иначе
						Запись = НаборЗаписей[0];
					КонецЕсли;
									 
					ИсключаяСвойства = "ИсточникиСхожихПредложений";
									 
					Если НЕ Параметры.ЗагрузитьЦеныПродажи Тогда
						ИсключаяСвойства = ИсключаяСвойства
									     + ", ЦенаДоСкидки, ЦенаСоСкидкой, МинимальнаяЦена";
					КонецЕсли;
					
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ИсключаяСвойства = ИсключаяСвойства
										 + ", ДанныеОбъекта, ДатаВыгрузкиЦенПродажи";
						
						ЗаполнитьЗначенияСвойств(Запись, СтрокаДереваВторогоУровня,, ИсключаяСвойства);
						Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса) Тогда
							Запись.ИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса;
							Запись.НаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса;
						КонецЕсли;
									   
					Иначе
						ИсключаяСвойства = ИсключаяСвойства
										 + ", УчетнаяЗаписьМаркетплейса, ВидОбъектаМаркетплейса"
										 + ", " + Параметры.ИмяИдентификатора
										 + ", ПродаетсяПоСхемеРаботыFBO, ПродаетсяПоСхемеРаботыFBS, ПродаетсяПоСхемеРаботыDBS"
										 + ", ОписаниеОбъектаМаркетплейса"
										 + ", ДатаАктуальностиОстатковМаркетплейса, ОстатокFBO, РезервFBO, ОстатокFBS, РезервFBS";
						
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0],, ИсключаяСвойства);
						ЗаполнитьЗначенияСвойств(Запись, СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0],, ИсключаяСвойства);
						Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса) Тогда
							Запись.ОписаниеОбъектаМаркетплейса = СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса;
						КонецЕсли;
					КонецЕсли;
					
					Запись.ДанныеОбъекта              = Новый ХранилищеЗначения(СтрокаДереваВторогоУровня.ДанныеОбъекта);
					Запись.ИсточникиСхожихПредложений = Новый ХранилищеЗначения(СтрокаДереваВторогоУровня.ИсточникиСхожихПредложений);
					
					НаборЗаписей.Записать(Истина);					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При записи сведений по товарной позиции «%1» возникла ошибка: %2.'", 
							ОбщегоНазначения.КодОсновногоЯзыка()),
						СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстСообщения);
						
					Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
						Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При записи сведений по товарной позиции «%1» возникли ошибки.'"),
						    СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));
					Результат.НеЗаписано = Результат.НеЗаписано + 1;
					Индекс = Индекс + 1;
					Продолжить;
				КонецПопытки;
			
				// Значения реквизитов
				Для каждого СтрокаТаблицыЗначений Из СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса Цикл
					Если НЕ СтрокаТаблицыЗначений.ТолькоТекущее Тогда
						СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = СтрокаТаблицыЗначений.ОбязательныйАтрибут;
						СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений;
						СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка;
						СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = СтрокаТаблицыЗначений.ТипЗначенияАтрибута;
						СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса;
						СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = СтрокаТаблицыЗначений.НеЗаполненАтрибут;
						СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса;
						СтрокаТаблицыЗначений.ЕстьРазличия                                     = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТолькоТекущее", Истина);
				НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
				Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Удалить(СтрокаТаблицыЗначений);
				КонецЦикла;
				
				Результат.Записано = Результат.Записано + 1;
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
					Результат.ВТомЧислеНовых = Результат.ВТомЧислеНовых + 1;
				КонецЕсли;

				СтрокаДереваВторогоУровня.Пометка         = Ложь;
				СтрокаДереваВторогоУровня.ВариантЗагрузки = 0;
				СтрокаДереваВторогоУровня.ИндексСтатуса   = -999;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		// Загрузить цены 
		Если ТаблицаТоваров.Количество() > 0
			 И ДоступнаУстановкаЦен Тогда
			СозданныеДокументы = ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров,, Ложь, Ложь);
			Если СозданныеДокументы = Неопределено Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			ИначеЕсли СозданныеДокументы.Получить(УчетнаяЗаписьМаркетплейса) = Неопределено Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			ИначеЕсли СозданныеДокументы.Получить(УчетнаяЗаписьМаркетплейса).Количество() = 0 Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			КонецЕсли;
			
			ЦеныТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам(
				УчетнаяЗаписьМаркетплейса, 
				Идентификаторы,
				ИмяИдентификатора);
			Если ЦеныТоваров <> Неопределено Тогда
				ЦеныТоваров.Индексы.Добавить(ИмяИдентификатора);
			КонецЕсли;
			
		Иначе
			ЦеныТоваров = Неопределено;
		КонецЕсли;
		
		// Окончание
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				Если СтрокаДереваВторогоУровня.ИндексСтатуса < 0 Тогда
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = -999 Тогда
						Если СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками 
							 ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ОписаниеОшибки)
								 И СтрокаДереваВторогоУровня.Статус <> Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 0;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.КПубликации Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 1;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.НаМодерации Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 1;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 2;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.Загружен Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 3;
						КонецЕсли;
					Иначе
						СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса + 100;
					КонецЕсли;
					
					// Цены товаров
					Если ЦеныТоваров <> Неопределено Тогда
						СтрокаДереваВторогоУровня.ЦеныТовара = Новый Массив;
						Отбор = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						НайденныеСтрокиЦеныТоваров = ЦеныТоваров.НайтиСтроки(Отбор);
						Для каждого ЭлементКоллекции Из НайденныеСтрокиЦеныТоваров Цикл
							СтрокаДереваВторогоУровня.ЦеныТовара.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции));
						КонецЦикла;
					КонецЕсли;
					
					// Дерево реквизитов
					СтрокаДереваВторогоУровня.ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						СтрокаДереваВторогоУровня,
						СтрокаДереваВторогоУровня.ЦеныТовара,
						НастройкиУчетнойЗаписи,
						ВидыЦен);
					
					// Различия
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
					ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
					ЕстьРазличияКатегорииOzon = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
					
					Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
					ЕстьРазличияЦеновыеПоказатели = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОпределитьНаименованияГруппДереваТоваров(
			ДеревоТоваров, 
			Ложь, 
			Параметры.ОтображатьСопоставленные,
			Параметры.ОтображатьПоСтатусу);
		
		Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		
		Если Результат.Записано = 0 И Результат.НеЗаписано = 0 Тогда
			Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данных, отмеченных для записи, не найдено.'");
			
			Если ВсегоОтмечено > 0 
				 И (ВсегоНеПолучено > 0 ИЛИ ВсегоНеСопоставлено > 0) Тогда
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данные не записаны, так как для отмеченных позиций'");
				Если ВсегоНеПолучено > 0 Тогда
					Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'не получены обновленные данные с торговой площадки'");
				КонецЕсли;
				Если ВсегоНеСопоставлено > 0 Тогда
					Если ВсегоНеПолучено > 0 Тогда
						Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'или'");
					КонецЕсли;
					Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'не выполнено сопоставление данным учетной системы 1С'");
				КонецЕсли;
				Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + ".";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки 	    = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При импорте данных с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Идентификаторы.Количество());
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИмпортДанныхСлужебный

// Формирует наименования групп первого уровня дерева товаров.
//
// Параметры:
//   ДеревоТоваров                  - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                      см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//   ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//   ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//
Процедура ОпределитьНаименованияГруппДереваТоваров(ДеревоТоваров, Знач СортироватьСтрокиДереваТоваров = Истина, 
            Знач ОтображатьСопоставленные = 0, Знач ОтображатьПоСтатусу = -1)
    
    Индекс = 0;
    
    Пока Индекс < ДеревоТоваров.Строки.Количество() Цикл
        СтрокаДереваПервогоУровня = ДеревоТоваров.Строки[Индекс];
        
        Если СтрокаДереваПервогоУровня.Строки.Количество() = 0 Тогда
            ДеревоТоваров.Строки.Удалить(СтрокаДереваПервогоУровня);
            Продолжить;
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
            ШаблонПредставления = НСтр("ru = 'Обновить (%1 из %2)'");
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
            ШаблонПредставления = НСтр("ru = 'Загрузить (%1 из %2)'");
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
            ШаблонПредставления = НСтр("ru = 'Не найдены (%2)'");
        КонецЕсли;
        
        КоличествоСтрок           = СтрокаДереваПервогоУровня.Строки.Количество();
        КоличествоОтмеченныхСтрок = 0;
        
        Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
            Если ОтображатьСопоставленные = 1
                 И (НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
                    ИЛИ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
                        И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
                    ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
                
            ИначеЕсли ОтображатьСопоставленные = 2
                      И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
                      И (НЕ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
                         ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
                      И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
            КонецЕсли;
            
            Если ОтображатьПоСтатусу <> -1
                 И СтрокаДереваВторогоУровня.ИндексСтатуса <> ОтображатьПоСтатусу Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
            КонецЕсли;
            
            КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(СтрокаДереваВторогоУровня.Пометка, 1, 0);
        КонецЦикла;
        
        Если КоличествоСтрок = 0 Тогда
            ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%1 из %2)", "");
            ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%2)", "");
        КонецЕсли;
        
        СтрокаДереваПервогоУровня.Пометка                          = (КоличествоОтмеченныхСтрок > 0);
        СтрокаДереваПервогоУровня.КоличествоОтмеченныхСтрок        = КоличествоОтмеченныхСтрок;
        СтрокаДереваПервогоУровня.ПредставлениеОбъектаМаркетплейса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            ШаблонПредставления,
            КоличествоОтмеченныхСтрок,
            КоличествоСтрок);
        
        Если СортироватьСтрокиДереваТоваров Тогда
            СтрокаДереваПервогоУровня.Строки.Сортировать("ПредставлениеОбъектаМаркетплейса");
        КонецЕсли;
        
        Индекс = Индекс + 1;
    КонецЦикла;
        
КонецПроцедуры

// Осуществляет перенос строки дерева товаров между родителями.
// 
// Параметры:
//   ДеревоТоваров - ДеревоЗначений       - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                            см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   Источник      - СтрокаДереваЗначений - строка дерева товаров, которую необходимо перенести.
//   Приемник      - СтрокаДереваЗначений - строка-родитель дерева товаров, в которую необходимо перенести Источник.
//
Процедура ПеренестиСтрокуДереваТоваровВДругуюГруппу(ДеревоТоваров, Источник, Приемник) 
	
	СтрокаДереваВторогоУровня = Приемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, Источник,, "ДеревоРеквизитов, Изображения, ДанныеОбъекта, ДанныеТовараИзСервиса, ЗначенияРеквизитовИзСервиса");

	СтрокаДереваВторогоУровня.ДеревоРеквизитов            = Источник.ДеревоРеквизитов.Скопировать();
	СтрокаДереваВторогоУровня.Изображения                 = Источник.Изображения.Скопировать();
	СтрокаДереваВторогоУровня.ДанныеОбъекта               = Источник.ДанныеОбъекта.Скопировать();
	СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса       = Источник.ДанныеТовараИзСервиса.Скопировать();
	СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса = Источник.ЗначенияРеквизитовИзСервиса.Скопировать();
	СтрокаДереваВторогоУровня.ЦеныТовара                  = ОбщегоНазначения.СкопироватьРекурсивно(Источник.ЦеныТовара);
	
	СтрокаДереваПервогоУровня = Источник.Родитель;
	СтрокаДереваПервогоУровня.Строки.Удалить(Источник);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
