#Область ПрограммныйИнтерфейс

// Выполняет заполнение регистров взаиморасчетов в новой архитектуре по переданной структуре параметров.
//
// Параметры:
//	ОсновныеПараметры - Структура - Параметры пересчета, см. СтруктураПараметровЗаполненияВзаиморасчетов
//
Процедура ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры) Экспорт
	
	#Область ИнициализацияЗапросаИПеременных
	
	РеквизитыАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновныеПараметры.АналитикаУчетаПоПартнерам, "Организация, Контрагент");
	Организация = РеквизитыАналитики.Организация;
	Контрагент = РеквизитыАналитики.Контрагент;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	
	ЗапросГлобальныхПеременных = Новый Запрос;
	ЗапросГлобальныхПеременных.Текст = "
	|ВЫБРАТЬ
	|	Справочник.Объект КАК Объект,
	|	Справочник.Договор КАК Договор,
	|	ЕСТЬNULL(Справочник.Договор.ВариантКурсаДоговора, ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора,
	|	Справочник.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	ЕСТЬNULL(Справочник.Объект.ГрафикИсполненияДоговора, Неопределено) КАК ГрафикИсполненияДоговора,
	|	ЕСТЬNULL(КурсыВалют.КурсЧислительВалютыВзаиморасчетов, 0) КАК КурсЧислительВалютыВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.КурсЗнаменательВалютыВзаиморасчетов, 0) КАК КурсЗнаменательВалютыВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.КурсЧислительВалютыУправленческогоУчета, 0) КАК КурсЧислительВалютыУправленческогоУчета,
	|	ЕСТЬNULL(КурсыВалют.КурсЗнаменательВалютыУправленческогоУчета, 0) КАК КурсЗнаменательВалютыУправленческогоУчета
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК Справочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыИКурсыДокументов КАК КурсыВалют
	|		ПО Справочник.Объект = КурсыВалют.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних() КАК КурсыВалютПоДоговору
	|		ПО Справочник.Договор = КурсыВалютПоДоговору.Договор
	|ГДЕ
	|	Справочник.Ссылка = &ОбъектРасчетов
	|";
	ЗапросГлобальныхПеременных.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ОсновныеПараметры.АналитикаУчетаПоПартнерам);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ОбъектРасчетов",             ОсновныеПараметры.ОбъектРасчетов);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаРасчетов",             ОсновныеПараметры.ВалютаРасчетов);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
	Результаты =  ЗапросГлобальныхПеременных.ВыполнитьПакет();
	
	РеквизитыОбъектаРасчетов = Результаты[0].Выгрузить();
	Если РеквизитыОбъектаРасчетов.Количество() = 1 Тогда
		Объект             = РеквизитыОбъектаРасчетов[0].Объект;
		ГрафикИсполненияДоговора = РеквизитыОбъектаРасчетов[0].ГрафикИсполненияДоговора;
		ФиксированныйКурсРегл = ?(
			РеквизитыОбъектаРасчетов[0].КурсЗнаменательВалютыВзаиморасчетов = 0,
			0,
			РеквизитыОбъектаРасчетов[0].КурсЧислительВалютыВзаиморасчетов
				/ РеквизитыОбъектаРасчетов[0].КурсЗнаменательВалютыВзаиморасчетов);
		ФиксированныйКурсУпр = ?(
			РеквизитыОбъектаРасчетов[0].КурсЗнаменательВалютыВзаиморасчетов = 0
			ИЛИ РеквизитыОбъектаРасчетов[0].КурсЧислительВалютыУправленческогоУчета = 0,
			0,
			РеквизитыОбъектаРасчетов[0].КурсЧислительВалютыВзаиморасчетов
				* РеквизитыОбъектаРасчетов[0].КурсЗнаменательВалютыУправленческогоУчета
				/ (РеквизитыОбъектаРасчетов[0].КурсЗнаменательВалютыВзаиморасчетов
					* РеквизитыОбъектаРасчетов[0].КурсЧислительВалютыУправленческогоУчета));
		ВариантКурсаДоговора       = РеквизитыОбъектаРасчетов[0].ВариантКурсаДоговора;
		ФиксированныйКурсНакладной = РеквизитыОбъектаРасчетов[0].ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Накладная
		                             И ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки;
		Договор                    = РеквизитыОбъектаРасчетов[0].Договор;
	Иначе
		ФиксированныйКурсНакладной = Ложь;
		Объект                     = Неопределено;
		ГрафикИсполненияДоговора   = Неопределено;
		ФиксированныйКурсРегл      = 0;
		ФиксированныйКурсУпр       = 0;
		ВариантКурсаДоговора       = Перечисления.ВариантыКурсаДоговора.Переменный;
		Договор                    = Неопределено;
	КонецЕсли;
	
	//Если график исполнения в договоре, то вместо графика заказа будет уточняться график договора.
	//Если пользователь каким-то образом ввел заказы с графиками по такому договору, то все этапы таких заказов будут отнесены к графику договора
	//и закрываться будут по ФИФО независимо от привязки накладных к заказам
	ГрафикВДоговоре = ЗначениеЗаполнено(ГрафикИсполненияДоговора);
	
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ХозяйственныеОперацииНеОтгрузка = ХозяйственныеОперацииНеОтгрузка();
	
	НастройкиХО = Новый Соответствие;
	
	//Хозяйственные операции для заполнения.
	ХозяйственныеОперации = Новый Соответствие; 
	
	Если ОсновныеПараметры.ЭтоРасчетыСКлиентами Тогда
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента);
		
		ИмяРегистраРасчетов = "РасчетыСКлиентамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСКлиентамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСКлиентамиПланОтгрузок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		НастройкиХО.Вставить("ЗачетОплаты", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента);
		НастройкиХО.Вставить("ПереоценкаПоложительная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль);
		НастройкиХО.Вставить("ПереоценкаОтрицательная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток);
	Иначе
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
		
		ИмяРегистраРасчетов = "РасчетыСПоставщикамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСПоставщикамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСПоставщикамиПланПоставок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		НастройкиХО.Вставить("ЗачетОплаты", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику);
		НастройкиХО.Вставить("ПереоценкаПоложительная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток);
		НастройкиХО.Вставить("ПереоценкаОтрицательная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль);
	КонецЕсли;
		
	Если ОсновныеПараметры.ПорядокФакт = Неопределено Тогда
		ОсновныеПараметры.ПорядокФакт = "";
	КонецЕсли;
	
	Если ОсновныеПараметры.ПорядокПлан = Неопределено Тогда
		ОсновныеПараметры.ПорядокПлан = "";
	КонецЕсли;
	
	ЗачетОплатПоДатеПлатежа = Константы.ЗачетОплатПоДатеПлатежа.Получить() = 1;
	
	ГлобальныеПеременные = ОбщегоНазначения.СкопироватьРекурсивно(ОсновныеПараметры); 
	ГлобальныеПеременные.Вставить("Организация", Организация);
	ГлобальныеПеременные.Вставить("ЕжедневнаяПереоценка", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	ГлобальныеПеременные.Вставить("ГрафикВДоговоре",               ГрафикВДоговоре);
	ГлобальныеПеременные.Вставить("ПорядокПереоценки",             Новый Соответствие);
	ГлобальныеПеременные.Вставить("РазмерПорцииЗаписи",            РазмерПорцииЗаписи);
	ГлобальныеПеременные.Вставить("ХозяйственныеОперации",         ХозяйственныеОперации);
	ГлобальныеПеременные.Вставить("НастройкиХО",                   НастройкиХО);
	ГлобальныеПеременные.Вставить("РассчитыватьПлан",              Лев(ГлобальныеПеременные.ПорядокПлан, 4) <> "3000");
	ГлобальныеПеременные.Вставить("РассчитыватьФакт",              Лев(ГлобальныеПеременные.ПорядокФакт, 4) <> "3000");
	ГлобальныеПеременные.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	ГлобальныеПеременные.Вставить("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
	ГлобальныеПеременные.Вставить("Договор",                        Договор);
	ГлобальныеПеременные.Вставить("ВариантКурсаДоговора",           ВариантКурсаДоговора);
	ГлобальныеПеременные.Вставить("ЗачетОплатПоДатеПлатежа",        ЗачетОплатПоДатеПлатежа);
	ГлобальныеПеременные.Вставить("Порядок", Мин(ГлобальныеПеременные.ПорядокФакт,ГлобальныеПеременные.ПорядокПлан));
	ГлобальныеПеременные.Вставить("ФиксированныйКурсНакладной",     ФиксированныйКурсНакладной);
	ГлобальныеПеременные.Вставить("ФиксированныйКурсРегл",          ФиксированныйКурсРегл);
	ГлобальныеПеременные.Вставить("ФиксированныйКурсУпр",           ФиксированныйКурсУпр);
	
	ИспользоватьРегистрКоличествоЗаписейРегистраторовРасчетов = ОбработчикОбновленияРегистраВзаиморасчетовВыполнен(
		"РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	ГлобальныеПеременные.Вставить("УчитыватьКоличествоЗаписейРегистраторовРасчетов", ИспользоватьРегистрКоличествоЗаписейРегистраторовРасчетов);
	
	Запрос                         = Новый Запрос;
	Менеджер                       = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("ОбъектРасчетов",             ГлобальныеПеременные.ОбъектРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ГлобальныеПеременные.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами",       ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("Регистратор",                ГлобальныеПеременные.Регистратор);
	Запрос.УстановитьПараметр("Порядок",                    ГлобальныеПеременные.Порядок);
	
	Если ЗначениеЗаполнено(ГлобальныеПеременные.Порядок) Тогда
		НачалоДняПорядка     = Дата(Лев(ГлобальныеПеременные.Порядок,8));
	Иначе
		НачалоДняПорядка = Дата(1,1,1,1,1,2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГлобальныеПеременные.ПорядокФакт) Тогда
		НачалоДняПорядкаФакт = Дата(Лев(ГлобальныеПеременные.ПорядокФакт,8));
	Иначе
		НачалоДняПорядкаФакт = Дата(1,1,1,1,1,2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоДняПорядка",           НачалоДняПорядка);
	Запрос.УстановитьПараметр("НачалоДняПорядкаФакт",       НачалоДняПорядкаФакт);
	Запрос.УстановитьПараметр("ЗачетОплатПоДатеПлатежа",    ЗачетОплатПоДатеПлатежа);
	Запрос.УстановитьПараметр("Объект",                     Объект);
	
	Запрос.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ГрафикВДоговоре",            ГрафикВДоговоре);
	Запрос.УстановитьПараметр("ГрафикИсполненияДоговора",   ГрафикИсполненияДоговора);
	Запрос.УстановитьПараметр("РазмерПорцииЗаписи",         РазмерПорцииЗаписи);
	Запрос.УстановитьПараметр("ТипРасчетов",                ТипРасчетов);
	
	Запрос.УстановитьПараметр("СписокТиповЗаказов",         СписокТиповРегистраторовПланов());
	Запрос.УстановитьПараметр("НепересчитываемыеХО",        НепересчитываемыеХозяйственныеОперации());
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ПустыеСсылкиНаЗаказы());
	
	#КонецОбласти
	
	//Движения до начала пересчета и остатки.
	СформироватьВТДанныхРегистров(Запрос, ГлобальныеПеременные);
	//Данные регистров с порядком меньше порядка начала расчета, далее дополняются.
	ТаблицаРасчетовПоСрокам     = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраРасчетов); // Таблица значений
	Если ГлобальныеПеременные.РассчитыватьПлан Тогда
		ТаблицаПланОплат            = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОплат); //Движения только служебных регистраторов
		ТаблицаПланОтгрузокПоставок = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;

	//Движения после начала пересчета и остатки до начала пересчета для распределения.
	РасчетыОтгрузкиПоставки     = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные);
	
	//Учтены только приходы по заказам, графикам и предоплатным накладным.
	//Остальные расходы и приходы добавляются при распределении фактических взаиморасчетов.
	РасчетыОплаты              = ПолучитьОплаты(Запрос, ГлобальныеПеременные);
	
	Если ГлобальныеПеременные.РассчитыватьПлан Тогда
		// Остатки плановых оплат для уточнения и закрытия нераспределенными авансами.
		ОстаткиПлановыхОплат       = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРасчетыПланОплатОстатки"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
		ОстаткиПлановыхОплат.Индексы.Добавить("ДокументПлан,ВариантОплаты");
		ОстаткиПлановыхОплат.Индексы.Добавить("ДокументПлан");
		
		// Остатки плановых отгрузок для уточнения и закрытия нераспределенными авансами.
		ОстаткиПлановыхОтгрузок       = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРасчетыПланОтгрузокПоставокОстатки"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
		ОстаткиПлановыхОтгрузок.Индексы.Добавить("ДокументПлан");
		
		// Остатки и движения нераспределенных авансов.
		ДвиженияПредоплатыДляСуммирования = ОстаткиНераспределенныхАвансовПлановойОплатыНаНачалоПересчета(Запрос);
		
		ОстаткиАвансов = ДвиженияПредоплатыДляСуммирования.Скопировать(Новый Структура("Зачтено, ОстатокПоложительный", Ложь, Истина));
		ОстаткиАвансов.Свернуть("ДатаВозникновения,ДатаПлановогоПогашения,ДокументПлан","Сумма");
		
		ДвиженияПредоплатыДляСуммирования.Свернуть("ДатаДвижения,ДокументПлан,ДатаВозникновения,ДатаПлановогоПогашения,Регистратор,ПорядокОперации,Просуммировано","Сумма");
		
		//Расходные движения накладных, которые распределяются на остатки плановых графиков.
		УточненияГрафиковОплат          = ПолучитьУточненияГрафиковОплат(Запрос, ГлобальныеПеременные);
		УточненияГрафиковОтгрузок       = ПолучитьУточненияГрафиковОтгрузок(Запрос, ГлобальныеПеременные);
		
		//Приходные движения заказов, так же в эту таблицу дописываются движения уточнений графика.
		//Используется для переноса движений в таблицу записей регистра накопления и для определения остатков плановых оплат на каждый день.
		ДвиженияПлановыхОплатДляСуммирования = ПолучитьПриходныеДвиженияПоПлановымОплатам(Запрос, ГлобальныеПеременные);
		ДвиженияПлановыхОтгрузокДляСуммирования = ПолучитьПриходныеДвиженияПоПлановымОтгрузкам(Запрос, ГлобальныеПеременные);
		
	КонецЕсли;
	
	НужнаПереоценка = (ГлобальныеПеременные.ВалютаРасчетов <> ВалютаРегламентированногоУчета 
			ИЛИ ГлобальныеПеременные.ВалютаРасчетов <> ВалютаУправленческогоУчета)
		И РасчетыОтгрузкиПоставки.Количество() > 0
		И НЕ ОсновныеПараметры.НачальноеЗаполнение;
	
	Если НужнаПереоценка Тогда
		ДатаНачалаКурсов = Мин(РасчетыОтгрузкиПоставки[0].Период,
									?(РасчетыОплаты.Количество() > 0,
										РасчетыОплаты[0].Период,
										РасчетыОтгрузкиПоставки[0].Период));
		ТаблицаКурсовВалют = ПолучитьКурсыВалют(Запрос, ДатаНачалаКурсов, ГлобальныеПеременные);
		ГлобальныеПеременные.Вставить("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
		
		ДатаНачалаКурсовыхРазниц = Макс(НачалоДняПорядкаФакт,
			?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[0].ДатаВозникновения, ТекущаяДатаСеанса()));
		ДатаОкончанияКурсовыхРазниц = Макс(НачалоДняПорядка, ТекущаяДатаСеанса(),
			?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[РасчетыОтгрузкиПоставки.Количество()-1].ДатаВозникновения, ТекущаяДатаСеанса()),
			?(РасчетыОплаты.Количество() > 0, РасчетыОплаты[РасчетыОплаты.Количество()-1].ДатаВозникновения, ТекущаяДатаСеанса()));
		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
			ДатаНачалаКурсовыхРазниц,
			ДатаОкончанияКурсовыхРазниц,
			ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
		ГлобальныеПеременные.Вставить("ДокументыРасчетаКурсовыхРазниц", ДокументыРасчетаКурсовыхРазниц);
		
	КонецЕсли;
	
	//Для определения курса корректировки реализации в минус.
	//Ключ     - ДокументСсылка.РеализациТоваровУслуг, ДокументСсылка.АктВыполненныхРабот
	//Значение - Структура
	//     * СуммаДокумента, СуммаДокументаРегл, СуммаДокументаУпр - нужны для определения среднего курса реализации при проведении корректировок.
	
	МассивСвязанныхДокументов = РасчетыОтгрузкиПоставки.ВыгрузитьКолонку("СвязанныйДокумент");
	МассивСвязанныхДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСвязанныхДокументов);
	МассивСвязанныхДокументовОплаты = РасчетыОплаты.ВыгрузитьКолонку("СвязанныйДокумент");
	МассивСвязанныхДокументовОплаты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСвязанныхДокументовОплаты);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязанныхДокументов,МассивСвязанныхДокументовОплаты,Истина);
	Запрос.УстановитьПараметр("МассивСвязанныхДокументов",МассивСвязанныхДокументов);
	
	ДанныеНакладных = Новый Соответствие;
	ТаблицаДанныхНакладных = ПолучитьДанныеНакладных(Запрос);
	Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
		ДанныеНакладных.Вставить(Строка.Накладная,
									СтруктураСумм(Строка.Сумма,
													Строка.СуммаРегл,
													Строка.СуммаУпр));
	КонецЦикла;
	ГлобальныеПеременные.Вставить("ДанныеНакладных", ДанныеНакладных);
	
	ЗаписейОплаты           = РасчетыОплаты.Количество();
	ЗаписейОтгрузкиПоставки = РасчетыОтгрузкиПоставки.Количество();
	
	Индексы = Новый Структура;
	//Индекс текущей обрабатываемой строки отгрузок.
	Индексы.Вставить("ИндексОтгрузкиПоставки", 0);
	//Индекс текущей обрабатываемой строки оплат.
	Индексы.Вставить("ИндексОплаты", 0);
	
	ПоследняяДатаЗачета    = НачалоДняПорядка;
	ПоследнийПорядокЗачета = ГлобальныеПеременные.Порядок;
	
	#Область РаспределениеОплатНаНакладные
	
	ТаблицаЗачетовОплат = Новый ТаблицаЗначений;
	ТаблицаЗачетовОплат.Колонки.Добавить("ЗачетАванса", Новый ОписаниеТипов("Булево"));
	ТаблицаЗачетовОплат.Колонки.Добавить("ЭтоКорректировка", Новый ОписаниеТипов("Булево"));
	ТаблицаЗачетовОплат.Колонки.Добавить("ДатаПогашенияАвансаУточнена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗачетовОплат.Колонки.Добавить("ПериодЗачета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаЗачетовОплат.Колонки.Добавить("ПорядокЗачета", ОбщегоНазначения.ОписаниеТипаСтрока(28));
	ТаблицаЗачетовОплат.Колонки.Добавить("ИндексСтрокиОплат", Новый ОписаниеТипов("Число"));
	ТаблицаЗачетовОплат.Колонки.Добавить("ИндексСтрокиОтгрузокПоставок", Новый ОписаниеТипов("Число"));
	ТаблицаЗачетовОплат.Колонки.Добавить("Сумма", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип));
	ТаблицаЗачетовОплат.Колонки.Добавить("ПриходДобавлен", Новый ОписаниеТипов("Булево"));
	ТаблицаЗачетовОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаЗачетовОплат.Колонки.Добавить("ДатаПлановогоПогашенияОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ТаблицаЗачетовОплат.Индексы.Добавить("ДокументОплаты,ДатаПогашенияАвансаУточнена");
	
	Пока (Индексы.ИндексОплаты + Индексы.ИндексОтгрузкиПоставки) < (ЗаписейОплаты + ЗаписейОтгрузкиПоставки) Цикл
		
		Если Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОплаты           = РасчетыОплаты[Индексы.ИндексОплаты];
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			
			Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения < 0 Или СтрокаОплаты.СуммаДляРаспределения < 0 Тогда
				ВызватьИсключение(СтрШаблон(НСтр("ru = 'В регистрах взаиморасчетов обнаружены отрицательные остатки на дату %1. Проведение невозможно.'"),
					НачалоДняПорядкаФакт));
			КонецЕсли;
			
			Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения > 0 И СтрокаОплаты.СуммаДляРаспределения > 0 Тогда
			
				ЗачетВПределахРегистратора = 
					СтрокаОплаты.Регистратор = СтрокаОтгрузкиПоставки.Регистратор
					И (СтрокаОплаты.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.РасчетныйДокумент
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом
						ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
					//Дата равна, тип записи может отличаться
					И Лев(СтрокаОплаты.ПорядокОперации,9) = Лев(СтрокаОтгрузкиПоставки.ПорядокОперации,9)
					// Перенос задолженности - сначала надо отразить задолженность
					И СтрокаОплаты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами
					// Возвраты оплат должны сначала проходить по долгу (реклассификация)
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту;
			
				//Оплата раньше отгрузки.
				Если СтрокаОплаты.ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации 
					//В пределах регистратора (при расчетах по накладным) должен происходить зачет аванса.
					ИЛИ ЗачетВПределахРегистратора Тогда
					
					//Добавление строки зачета.
					СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
					СтрокаЗачета.ЗачетАванса       = Истина;
					СтрокаЗачета.ЭтоКорректировка  = Ложь;
					СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
					СтрокаЗачета.ПриходДобавлен    = СтрокаОплаты.ПриходДобавлен;
					Строказачета.ДатаПогашенияАвансаУточнена = СтрокаОплаты.ЭтоОстаток;
					Если НЕ ЗачетВПределахРегистратора Тогда
						СтрокаЗачета.ПериодЗачета                   = СтрокаОтгрузкиПоставки.ПериодЗачета;
						СтрокаЗачета.ПорядокЗачета                  = СтрокаОтгрузкиПоставки.ПорядокЗачета;
					Иначе
						СтрокаЗачета.ПериодЗачета                   = СтрокаОтгрузкиПоставки.Период;
						СтрокаЗачета.ПорядокЗачета                  = СтрокаОтгрузкиПоставки.ПорядокОперации;
					КонецЕсли;
					СтрокаЗачета.ИндексСтрокиОтгрузокПоставок    = РасчетыОтгрузкиПоставки.Индекс(СтрокаОтгрузкиПоставки);//СтрокаОтгрузкиПоставки.ИндексОсновнойТаблицы;
					СтрокаЗачета.Сумма                           = Мин(СтрокаОплаты.СуммаДляРаспределения, СтрокаОтгрузкиПоставки.СуммаДляРаспределения);
					
					СтрокаОплаты.СуммаДляРаспределения           = СтрокаОплаты.СуммаДляРаспределения - СтрокаЗачета.Сумма;
					СтрокаОтгрузкиПоставки.СуммаДляРаспределения = СтрокаОтгрузкиПоставки.СуммаДляРаспределения - СтрокаЗачета.Сумма;
					
					Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения = 0 Тогда
						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
						СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
					КонецЕсли;
					
					Если ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаПриобретения")
						И ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаРеализации")
						И ГлобальныеПеременные.РассчитыватьПлан Тогда
						
						Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.Порядок Тогда
							НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
							НовСтр.ДатаДвижения       = НачалоДня(СтрокаОплаты.Период);
							
							НовСтр.ДокументПлан       = СтрокаОплаты.Регистратор;
							НовСтр.ДатаВозникновения = СтрокаОплаты.Период;
							НовСтр.Сумма             = СтрокаЗачета.Сумма;
							
							НовСтр.ПорядокОперации   = СтрокаОплаты.ПорядокОперации;
							НовСтр.Регистратор       = СтрокаОплаты.Регистратор;
							НовСтр.Просуммировано    = ЛОЖЬ;
						КонецЕсли;
						
						НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
						
						НовСтр.ДатаДвижения              = НачалоДня(СтрокаОтгрузкиПоставки.ПериодЗачета);
						
						НовСтр.ДокументПлан      = СтрокаОплаты.РасчетныйДокумент;
						НовСтр.ДатаВозникновения = СтрокаОплаты.ДатаВозникновения;
						НовСтр.Сумма             = -СтрокаЗачета.Сумма;
						
						НовСтр.Регистратор       = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						НовСтр.ПорядокОперации   = СтрокаОтгрузкиПоставки.ПорядокОперации;
						НовСтр.Просуммировано    = ЛОЖЬ;
						
					КонецЕсли;
					
				//Отгрузка раньше оплаты.
				Иначе
				
					//Обычная оплата.
					Если НЕ СтрокаОплаты.ЭтоКорректировка 
						ИЛИ РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, Регистратор", ИСТИНА, СтрокаОплаты.СвязанныйДокумент)).Количество() = 0 Тогда
						
						Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения > 0 И СтрокаОплаты.СуммаДляРаспределения > 0 Тогда
							
							СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
							СтрокаЗачета.ЗачетАванса       = Ложь;
							СтрокаЗачета.ЭтоКорректировка  = СтрокаОплаты.ЭтоКорректировка;
							СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
							СтрокаЗачета.ПриходДобавлен    = СтрокаОтгрузкиПоставки.ПриходДобавлен;
							Строказачета.ДатаПогашенияАвансаУточнена = СтрокаОплаты.ЭтоОстаток;
							//Зачет постоплаты на накладные с минимальной датой платежа.
							Если НачалоДня(СтрокаОтгрузкиПоставки.ПериодЗачета) > НачалоДня(СтрокаОплаты.ПериодЗачета) Тогда
								СтрокаЗачета.ПериодЗачета                = СтрокаОтгрузкиПоставки.ПериодЗачета;
								СтрокаЗачета.ПорядокЗачета               = СтрокаОтгрузкиПоставки.ПорядокЗачета;
							Иначе
								СтрокаЗачета.ПериодЗачета                = СтрокаОплаты.ПериодЗачета;
								СтрокаЗачета.ПорядокЗачета               = СтрокаОплаты.ПорядокЗачета;
							КонецЕсли;
							СтрокаЗачета.ИндексСтрокиОтгрузокПоставок    = РасчетыОтгрузкиПоставки.Индекс(СтрокаОтгрузкиПоставки);
							СтрокаЗачета.Сумма                           = Мин(СтрокаОплаты.СуммаДляРаспределения, СтрокаОтгрузкиПоставки.СуммаДляРаспределения);
							
							СтрокаОплаты.СуммаДляРаспределения           = СтрокаОплаты.СуммаДляРаспределения - СтрокаЗачета.Сумма;
							СтрокаОтгрузкиПоставки.СуммаДляРаспределения = СтрокаОтгрузкиПоставки.СуммаДляРаспределения - СтрокаЗачета.Сумма;
							
							Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения = 0 Тогда
								Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
								СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
							КонецЕсли;
							
							ДатаЗачетаОтличаетсяОтДатыОплаты = НачалоДня(СтрокаЗачета.ПериодЗачета) <> НачалоДня(СтрокаОплаты.Период)
								И СтрокаОплаты.Регистратор <> СтрокаОтгрузкиПоставки.Регистратор;
							
							Если ДатаЗачетаОтличаетсяОтДатыОплаты И ГлобальныеПеременные.РассчитыватьПлан Тогда
								
								Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.Порядок Тогда
									
									НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
									НовСтр.ДатаДвижения      = НачалоДня(СтрокаОплаты.Период);
									
									НовСтр.ДокументПлан      = СтрокаОплаты.РасчетныйДокумент;
									НовСтр.ДатаВозникновения = СтрокаОплаты.ДатаВозникновения;
									НовСтр.Сумма             = СтрокаЗачета.Сумма;
									
									НовСтр.Регистратор       = СтрокаОплаты.Регистратор;
									НовСтр.ПорядокОперации   = СтрокаОплаты.ПорядокОперации;
									НовСтр.Просуммировано    = ЛОЖЬ;
									
								КонецЕсли;
								
								НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
								НовСтр.ДатаДвижения      = НачалоДня(СтрокаЗачета.ПериодЗачета);
								
								НовСтр.ДокументПлан      = СтрокаОплаты.РасчетныйДокумент;
								НовСтр.ДатаВозникновения = СтрокаОплаты.ДатаВозникновения;
								НовСтр.Сумма             = -СтрокаЗачета.Сумма;
								
								НовСтр.Регистратор       = СтрокаОплаты.Регистратор;
								НовСтр.ПорядокОперации   = СтрокаЗачета.ПорядокЗачета;
								НовСтр.Просуммировано    = ЛОЖЬ;
								
							КонецЕсли;
							
							
						КонецЕсли;
						
					//Корректировка накладной в минус.
					Иначе
						
						ОстаткиСвязанногоДокумента = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, Регистратор", ИСТИНА, СтрокаОплаты.СвязанныйДокумент));
						Для Каждого СтрокаОстаткаСвязанногоДокумента Из ОстаткиСвязанногоДокумента Цикл
							Если СтрокаОплаты.ПорядокОперации < СтрокаОстаткаСвязанногоДокумента.ПорядокОперации 
								ИЛИ СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения = 0 Тогда
								Продолжить;
							Иначе //Если это корректировка и накладная еще не оплачена полностью, то расчетным документом должна являться накладная.
								
								Если СтрокаОплаты.СуммаДляРаспределения > 0 И СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения > 0 Тогда
									СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
									СтрокаЗачета.ЗачетАванса       = Ложь;
									СтрокаЗачета.ЭтоКорректировка  = Истина;
									СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
									СтрокаЗачета.ИндексСтрокиОтгрузокПоставок = РасчетыОтгрузкиПоставки.Индекс(СтрокаОстаткаСвязанногоДокумента);
									СтрокаЗачета.ПериодЗачета      = СтрокаОплаты.ПериодЗачета;
									СтрокаЗачета.ПорядокЗачета     = СтрокаОплаты.ПорядокЗачета;
									СтрокаЗачета.Сумма             = Мин(СтрокаОплаты.СуммаДляРаспределения, СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения);
									СтрокаЗачета.ПриходДобавлен    = СтрокаОстаткаСвязанногоДокумента.ПриходДобавлен;
									
									СтрокаОплаты.СуммаДляРаспределения                     = СтрокаОплаты.СуммаДляРаспределения - СтрокаЗачета.Сумма;
									СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения = СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения - СтрокаЗачета.Сумма;
									СтрокаОстаткаСвязанногоДокумента.ЕстьОстаток = СтрокаОстаткаСвязанногоДокумента.СуммаДляРаспределения > 0;
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЦикла;
						СтрокаОплаты.ЭтоКорректировка = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Если СтрокаОтгрузкиПоставки.СуммаДляРаспределения = 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаОплаты.СуммаДляРаспределения = 0 Тогда
				Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
			КонецЕсли;
			
		Иначе
			
			//Оплаты распределены, остальные отгрузки в приход.
			Если Индексы.ИндексОплаты = ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки Тогда 
				
				СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
				
				СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
				СтрокаЗачета.ЗачетАванса       = Ложь;
				СтрокаЗачета.ЭтоКорректировка  = Ложь;
				СтрокаЗачета.ИндексСтрокиОплат = -1;
				СтрокаЗачета.ИндексСтрокиОтгрузокПоставок = Индексы.ИндексОтгрузкиПоставки;
				СтрокаЗачета.ПериодЗачета      = СтрокаОтгрузкиПоставки.ПериодЗачета;
				СтрокаЗачета.ПорядокЗачета     = СтрокаОтгрузкиПоставки.ПорядокЗачета;
				СтрокаЗачета.Сумма             = СтрокаОтгрузкиПоставки.СуммаДляРаспределения;
				СтрокаЗачета.ПриходДобавлен    = СтрокаОтгрузкиПоставки.ПриходДобавлен;
				
				Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
				
			//Отгрузки распределены, остальные оплаты в приход.
			ИначеЕсли Индексы.ИндексОплаты < ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки = ЗаписейОтгрузкиПоставки Тогда
				
				СтрокаОплаты = РасчетыОплаты[Индексы.ИндексОплаты];
				
				СтрокаЗачета = ТаблицаЗачетовОплат.Добавить();
				СтрокаЗачета.ЗачетАванса       = Ложь;
				СтрокаЗачета.ЭтоКорректировка  = Ложь;
				СтрокаЗачета.ИндексСтрокиОплат = Индексы.ИндексОплаты;
				СтрокаЗачета.ИндексСтрокиОтгрузокПоставок = -1;
				СтрокаЗачета.ПериодЗачета      = СтрокаОплаты.ПериодЗачета;
				СтрокаЗачета.ПорядокЗачета     = СтрокаОплаты.ПорядокЗачета;
				СтрокаЗачета.Сумма             = СтрокаОплаты.СуммаДляРаспределения;
				СтрокаЗачета.ПриходДобавлен    = СтрокаОплаты.ПриходДобавлен;
				
				Если ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаПриобретения")
					И ТипЗнч(СтрокаОплаты.Регистратор) <> Тип("ДокументСсылка.КорректировкаРеализации") 
					И СтрокаОплаты.ПорядокОперации > ГлобальныеПеременные.Порядок
					И ГлобальныеПеременные.РассчитыватьПлан Тогда
					НовСтр = ДвиженияПредоплатыДляСуммирования.Добавить();
					НовСтр.ДатаДвижения       = НачалоДня(СтрокаОплаты.Период);
					
					НовСтр.ДокументПлан      = СтрокаОплаты.Регистратор;
					НовСтр.ДатаВозникновения = СтрокаОплаты.Период;
					НовСтр.Сумма             = СтрокаОплаты.СуммаДляРаспределения;
					
					НовСтр.ПорядокОперации   = СтрокаОплаты.ПорядокОперации;
					НовСтр.Регистратор       = СтрокаОплаты.Регистратор;
					НовСтр.Просуммировано    = ЛОЖЬ;
				КонецЕсли;
				
				Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследняяДатаЗачета = ?(Год(ПоследняяДатаЗачета)=1,ТекущаяДатаСеанса(),ПоследняяДатаЗачета);
	
	#КонецОбласти
	
	#Область РаспределениеПлановыхГрафиков
	
	Для Каждого Стр Из ТаблицаЗачетовОплат Цикл
		Если Стр.ИндексСтрокиОплат <> -1 Тогда
			Стр.ДокументОплаты = РасчетыОплаты[Стр.ИндексСтрокиОплат].Регистратор;
			Если НЕ ЗначениеЗаполнено(Стр.ДатаПлановогоПогашенияОплаты) Тогда
				Стр.ДатаПлановогоПогашенияОплаты = РасчетыОплаты[Стр.ИндексСтрокиОплат].ДатаПлановогоПогашения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ГлобальныеПеременные.РассчитыватьПлан Тогда
		
		// При зачете по дате платежа могут добавляться в случайном порядке.
		ДвиженияПредоплатыДляСуммирования.Сортировать("ДатаДвижения");
		ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты = ДвиженияПредоплатыДляСуммирования.Скопировать();
		ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Свернуть("ДатаДвижения,ДокументПлан,ДатаВозникновения,Регистратор,ПорядокОперации","Сумма");
		ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Сортировать("ДатаДвижения УБЫВ");
		
		// 1. Определяем список дат, на конец которых нужно сделать перераспределение неиспользованных авансов.
		#Область СписокДатДляДвижений
		СписокДатДвиженийПредоплаты = ДвиженияПредоплатыДляСуммирования.Скопировать(Новый Структура("Просуммировано",Ложь),"ДатаДвижения").ВыгрузитьКолонку("ДатаДвижения");
		СписокДатДвиженийПлановыхОплат = ДвиженияПлановыхОплатДляСуммирования.Скопировать(,"Дата").ВыгрузитьКолонку("Дата");
		СписокДатДвиженийПлановыхОтгрузок = ДвиженияПлановыхОтгрузокДляСуммирования.Скопировать(,"Дата").ВыгрузитьКолонку("Дата");
		СписокДатУточненийОплат = УточненияГрафиковОплат.Скопировать(,"ДатаДвижения").ВыгрузитьКолонку("ДатаДвижения");
		СписокДатУточненийОтгрузок = УточненияГрафиковОтгрузок.Скопировать(,"ДатаДвижения").ВыгрузитьКолонку("ДатаДвижения");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатДвиженийПлановыхОплат);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатДвиженийПлановыхОтгрузок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатУточненийОплат);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДатДвиженийПредоплаты, СписокДатУточненийОтгрузок);
		МассивДат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокДатДвиженийПредоплаты);
		СписокДат = Новый СписокЗначений;
		СписокДат.ЗагрузитьЗначения(МассивДат);
		СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		#КонецОбласти
		
		Для Каждого ЗначениеСписка Из СписокДат Цикл
			
			// 2. Добавляем приходы по заказам и свернем остатки плановых оплат и отгрузок
			#Область ДобавлениеДвиженийПлановыхОплат
			Пока ДвиженияПлановыхОплатДляСуммирования.Количество() > 0 Цикл
				Строка = ДвиженияПлановыхОплатДляСуммирования[0];
				Если Строка.Дата <= ЗначениеСписка.Значение Тогда
					НовСтр = ОстаткиПлановыхОплат.Добавить();
					НовСтр.ДокументПлан = Строка.Регистратор;
					НовСтр.ДатаВозникновения = Строка.ДатаВозникновения;
					НовСтр.ДатаПлановогоПогашения = Строка.ДатаПлановогоПогашения;
					НовСтр.ВариантОплаты = Строка.ВариантОплаты;
					НовСтр.НераспределенныйАванс = Ложь;
					НовСтр.КОплате = Строка.Сумма;
					
					ДвиженияПлановыхОплатДляСуммирования.Удалить(0);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ОстаткиПлановыхОплат.Сортировать("НераспределенныйАванс,ДатаПлановогоПогашения,ДатаВозникновения,ВариантОплаты", Новый СравнениеЗначений);
			#КонецОбласти
			
			#Область ДобавлениеДвиженийПлановыхОтгрузок
			Пока ДвиженияПлановыхОтгрузокДляСуммирования.Количество() > 0 Цикл
				Строка = ДвиженияПлановыхОтгрузокДляСуммирования[0];
				Если Строка.Дата <= ЗначениеСписка.Значение Тогда
					НовСтр = ОстаткиПлановыхОтгрузок.Добавить();
					НовСтр.ДокументПлан = Строка.Регистратор;
					НовСтр.ДатаВозникновения = Строка.ДатаВозникновения;
					НовСтр.ДатаПлановогоПогашения = Строка.ДатаПлановогоПогашения;
					НовСтр.НераспределенныйАванс = Ложь;
					НовСтр.Сумма = Строка.Сумма;
					
					ДвиженияПлановыхОтгрузокДляСуммирования.Удалить(0);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ОстаткиПлановыхОтгрузок.Свернуть("ДокументПлан,ДатаПлановогоПогашения,ДатаВозникновения,НераспределенныйАванс","Сумма");
			ОстаткиПлановыхОтгрузок.Сортировать("НераспределенныйАванс,ДатаПлановогоПогашения,ДатаВозникновения");
			#КонецОбласти
			
			// 3. Добавляем уточнения графика оплат по заказам и сторнируем записи нераспределенных авансов, если они были.
			#Область УточнениеГрафикаОплаты
			
			счУточнения = 0;
			Пока счУточнения < УточненияГрафиковОплат.Количество() Цикл
				СтрокаУточнения = УточненияГрафиковОплат[счУточнения];
				Если СтрокаУточнения.ДатаДвижения > ЗначениеСписка.Значение Тогда
					Прервать;
				Иначе
					
					//С учетом варианта оплаты
					СтрокиОстатков = ОстаткиПлановыхОплат.НайтиСтроки(Новый Структура("ДокументПлан,ВариантОплаты",СтрокаУточнения.Заказ,СтрокаУточнения.ВариантОплаты));
					СуммаСписано = 0;
					Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
						Если СтрокаУточнения.Сумма = 0 И СуммаСписано = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаОстатков.НераспределенныйАванс = Ложь И СтрокаОстатков.КОплате > 0  И СтрокаУточнения.Сумма > 0 Тогда
							СуммаСписания = Мин(СтрокаОстатков.КОплате, СтрокаУточнения.Сумма);
							УменьшитьПланОплатыПоЗаказу(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
							СуммаСписано = СуммаСписано + СуммаСписания;
						// Нужно сторнировать именно заказ строки уточнения
						ИначеЕсли СтрокаОстатков.НераспределенныйАванс = Истина И СтрокаОстатков.КОплате < 0 И СуммаСписано > 0 Тогда
							СуммаСписания = -Мин(-СтрокаОстатков.КОплате, СуммаСписано);
							СторнироватьНераспределенныйАванс(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
							СуммаСписано = СуммаСписано + СуммаСписания;
						КонецЕсли;
					КонецЦикла;
					
					//Без учета варианта оплаты
					Если СтрокаУточнения.Сумма > 0 Тогда
						СтрокиОстатков = ОстаткиПлановыхОплат.НайтиСтроки(Новый Структура("ДокументПлан",СтрокаУточнения.Заказ));
						Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
							Если СтрокаУточнения.Сумма = 0 И СуммаСписано = 0 Тогда
								Прервать;
							КонецЕсли;
							Если НЕ СтрокаОстатков.НераспределенныйАванс И СтрокаОстатков.КОплате > 0 И СтрокаУточнения.Сумма > 0 Тогда
								СуммаСписания = Мин(СтрокаОстатков.КОплате,СтрокаУточнения.Сумма);
								УменьшитьПланОплатыПоЗаказу(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
								СуммаСписано = СуммаСписано + СуммаСписания;
							ИначеЕсли СтрокаОстатков.НераспределенныйАванс И СтрокаОстатков.КОплате < 0  И СуммаСписано > 0 Тогда
								СуммаСписания = -Мин(-СтрокаОстатков.КОплате, СуммаСписано);
								СторнироватьНераспределенныйАванс(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
								СуммаСписано = СуммаСписано + СуммаСписания;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				Если СтрокаУточнения.Сумма = 0 Тогда
					УточненияГрафиковОплат.Удалить(счУточнения);
				Иначе
					счУточнения = счУточнения + 1;
				КонецЕсли;
			КонецЦикла;
			#КонецОбласти
			
			// 4. Добавляем уточнения графика отгрузок по заказам и сторнируем записи нераспределенных авансов, если они были.
			#Область УточнениеГрафикаОтгрузки
			счУточнения = 0;
			Пока счУточнения < УточненияГрафиковОтгрузок.Количество() Цикл
				СтрокаУточнения = УточненияГрафиковОтгрузок[счУточнения];
				Если СтрокаУточнения.ДатаДвижения > ЗначениеСписка.Значение Тогда
					Прервать;
				Иначе
					СтрокиОстатков = ОстаткиПлановыхОтгрузок.НайтиСтроки(Новый Структура("ДокументПлан",СтрокаУточнения.Заказ));
					СуммаСписано = 0;
					Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
						Если СтрокаУточнения.Сумма = 0 И СуммаСписано = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаОстатков.НераспределенныйАванс = Ложь И СтрокаОстатков.Сумма > 0  И СтрокаУточнения.Сумма > 0 Тогда
							СуммаСписания = Мин(СтрокаОстатков.Сумма,СтрокаУточнения.Сумма);
							УменьшитьПланОтгрузкиПоЗаказу(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
							СуммаСписано = СуммаСписано + СуммаСписания;
						// Нужно уточнить именно заказ рту
						ИначеЕсли СтрокаОстатков.НераспределенныйАванс = Истина И СтрокаОстатков.Сумма < 0 И СуммаСписано > 0 Тогда
							СуммаСписания = -Мин(-СтрокаОстатков.Сумма, СуммаСписано);
							СторнироватьНераспределенныйАвансПланаОтгрузок(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, СтрокаУточнения, СуммаСписания);
							СуммаСписано = СуммаСписано + СуммаСписания;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				Если СтрокаУточнения.Сумма = 0 Тогда
					УточненияГрафиковОтгрузок.Удалить(счУточнения);
				Иначе
					счУточнения = счУточнения + 1;
				КонецЕсли;
			КонецЦикла;
			#КонецОбласти
			
			// 5. Обновим остатки предоплат
			#Область ДобавлениеДвиженийПоПредоплате 
			Для Каждого Строка Из ДвиженияПредоплатыДляСуммирования Цикл
				Если Строка.ДатаДвижения <= ЗначениеСписка.Значение Тогда
					Если НЕ Строка.Просуммировано Тогда
						НовСтр = ОстаткиАвансов.Добавить();
						НовСтр.ДокументПлан           = Строка.ДокументПлан;
						НовСтр.ДатаВозникновения      = Строка.ДатаВозникновения;
						НовСтр.ДатаПлановогоПогашения = Строка.ДатаПлановогоПогашения;
						НовСтр.Сумма                  = Строка.Сумма;
						Строка.Просуммировано         = Истина;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ДвиженияПредоплатыДляСуммированияПланОтгрузок = ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Скопировать();
			#КонецОбласти
			
			// Дельта авансов = Остаток авансов на конец дня - остаток на начало дня + нераспределенная дельта за прошлый день
			СуммаАвансовДляРаспределенияПоГрафикуОплат = ОстаткиАвансов.Итог("Сумма") + ОстаткиПлановыхОплат.Скопировать(Новый Структура("НераспределенныйАванс",Истина)).Итог("КОплате");
			СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = ОстаткиАвансов.Итог("Сумма") + ОстаткиПлановыхОтгрузок.Скопировать(Новый Структура("НераспределенныйАванс",Истина)).Итог("Сумма");
			ОстаткиАвансов.Свернуть("ДокументПлан, ДатаВозникновения, ДатаПлановогоПогашения","Сумма");
			ОстаткиАвансов.Сортировать("ДатаВозникновения УБЫВ");
			
			// 6. Распределение дельты суммы авансов за день по графикам плановой оплаты (движения с флагом "НераспределенныйАванс")
			#Область РаспределениеАвансовПоГрафикуОплаты
			//Если дельта положительная (сумма авансов увеличилась) то смотрим остатки с учетом уже зачтенных нераспределенных авансов (НераспределенныйАванс = Истина или Ложь)
			Если СуммаАвансовДляРаспределенияПоГрафикуОплат > 0 Тогда
				ОстаткиПлановыхОплатКопия = ОстаткиПлановыхОплат.Скопировать();
				ОстаткиПлановыхОплатКопия.Свернуть("ДокументПлан,ДатаПлановогоПогашения,ДатаВозникновения,ВариантОплаты","КОплате");
				Для Каждого СтрокаОстатков Из ОстаткиПлановыхОплатКопия Цикл
					Если СуммаАвансовДляРаспределенияПоГрафикуОплат = 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаОстатков.КОплате <= 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты Цикл
						СуммаСписания = Мин(СуммаАвансовДляРаспределенияПоГрафикуОплат,ДвижениеПредоплаты.Сумма,СтрокаОстатков.КОплате);
						Если СуммаСписания <= 0 ИЛИ ДвижениеПредоплаты.ДатаДвижения > ЗначениеСписка.Значение Тогда
							Продолжить;
						КонецЕсли;
						
						УменьшитьПланОплатыПоЗаказу(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
						СуммаАвансовДляРаспределенияПоГрафикуОплат = СуммаАвансовДляРаспределенияПоГрафикуОплат - СуммаСписания;
						
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли СуммаАвансовДляРаспределенияПоГрафикуОплат < 0 Тогда
				//Если дельта отрицательная то нужно уменьшить только зачтенные нераспределенные авансы (НераспределенныйАванс = Истина)
				ОстаткиПлановыхОплатКопия = ОстаткиПлановыхОплат.Скопировать(Новый Структура("НераспределенныйАванс",Истина));
				ОстаткиПлановыхОплатКопия.Сортировать("ДатаПлановогоПогашения УБЫВ,ДатаВозникновения УБЫВ,ВариантОплаты УБЫВ", Новый СравнениеЗначений);
				Для Каждого СтрокаОстатков Из ОстаткиПлановыхОплатКопия Цикл
					Если СуммаАвансовДляРаспределенияПоГрафикуОплат = 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаОстатков.КОплате >= 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты Цикл
						СуммаСписания = -Мин(-СуммаАвансовДляРаспределенияПоГрафикуОплат,-ДвижениеПредоплаты.Сумма,-СтрокаОстатков.КОплате);
						Если ДвижениеПредоплаты.ДатаДвижения > ЗначениеСписка.Значение ИЛИ СуммаСписания >= 0 Тогда
							Продолжить;
						КонецЕсли;
							
						СторнироватьНераспределенныйАванс(ТаблицаПланОплат, ОстаткиПлановыхОплат, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
						СуммаАвансовДляРаспределенияПоГрафикуОплат = СуммаАвансовДляРаспределенияПоГрафикуОплат - СуммаСписания;
							
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			// 7. Распределение дельты суммы авансов за день по графикам плановой отгрузки (движения с флагом "НераспределенныйАванс")
			#Область РаспределениеАвансовПоГрафикуОтгрузки
			Если СуммаАвансовДляРаспределенияПоГрафикуОтгрузок > 0 Тогда
				ОстаткиПлановыхОтгрузокКопия = ОстаткиПлановыхОтгрузок.Скопировать();
				//Если дельта положительная (сумма авансов увеличилась) то смотрим остатки с учетом уже зачтенных нераспределенных авансов (НераспределенныйАванс = Истина или Ложь)
				ОстаткиПлановыхОтгрузокКопия.Свернуть("ДокументПлан,ДатаПлановогоПогашения,ДатаВозникновения","Сумма");
				Для Каждого СтрокаОстатков Из ОстаткиПлановыхОтгрузокКопия Цикл
					Если СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаОстатков.Сумма > 0 Тогда
						Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляСуммированияПланОтгрузок Цикл
							Если ДвижениеПредоплаты.ДатаДвижения = ЗначениеСписка.Значение //Подбираем движения текущего дня, ведь именно они изменили Остаток аванса
								И ДвижениеПредоплаты.ДатаДвижения >= СтрокаОстатков.ДатаВозникновения //График отгрузок уточняют только предоплаты введенные после заказа.
								И ДвижениеПредоплаты.Сумма > 0
								И СуммаАвансовДляРаспределенияПоГрафикуОтгрузок > 0 Тогда
								
								СуммаСписания = Мин(СуммаАвансовДляРаспределенияПоГрафикуОтгрузок,ДвижениеПредоплаты.Сумма,СтрокаОстатков.Сумма);
								
								УменьшитьПланОтгрузкиПоЗаказу(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
								УточнитьГрафикПогашенияАванса(ТаблицаЗачетовОплат, ДвижениеПредоплаты, СуммаСписания, СтрокаОстатков.ДатаПлановогоПогашения, ЗачетОплатПоДатеПлатежа);
								
								СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = СуммаАвансовДляРаспределенияПоГрафикуОтгрузок - СуммаСписания;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СуммаАвансовДляРаспределенияПоГрафикуОтгрузок < 0 Тогда
				//Если дельта отрицательная то нужно уменьшить только зачтенные нераспределенные авансы (НераспределенныйАванс = Истина)
				ОстаткиПлановыхОтгрузокКопия = ОстаткиПлановыхОтгрузок.Скопировать(Новый Структура("НераспределенныйАванс",Истина));
				ОстаткиПлановыхОтгрузокКопия.Сортировать("ДатаПлановогоПогашения УБЫВ,ДатаВозникновения УБЫВ");
				Для Каждого СтрокаОстатков Из ОстаткиПлановыхОтгрузокКопия Цикл
					Если СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаОстатков.НераспределенныйАванс И СтрокаОстатков.Сумма < 0 Тогда
						Для Каждого ДвижениеПредоплаты Из ДвиженияПредоплатыДляСуммированияПланОтгрузок Цикл
							Если ДвижениеПредоплаты.ДатаДвижения = ЗначениеСписка.Значение
								И ДвижениеПредоплаты.Сумма < 0
								И СуммаАвансовДляРаспределенияПоГрафикуОтгрузок < 0 Тогда
								СуммаСписания = -Мин(-СуммаАвансовДляРаспределенияПоГрафикуОтгрузок,-ДвижениеПредоплаты.Сумма,-СтрокаОстатков.Сумма);
								
								СторнироватьНераспределенныйАвансПланаОтгрузок(ТаблицаПланОтгрузокПоставок, ОстаткиПлановыхОтгрузок, СтрокаОстатков, ДвижениеПредоплаты, СуммаСписания, КонецДня(ЗначениеСписка.Значение));
								
								СуммаАвансовДляРаспределенияПоГрафикуОтгрузок = СуммаАвансовДляРаспределенияПоГрафикуОтгрузок - СуммаСписания;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			// 8. Удаление учтенных строк движений по предоплате
			#Область УдалениеУстаревшихСтрок
			сч = 0;
			Пока сч < ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Количество() Цикл
				Строка = ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты[сч];
				Если Строка.ДатаДвижения <= ЗначениеСписка.Значение И Строка.Сумма = 0 Тогда
					ДвиженияПредоплатыДляРаспределенияПоГрафикуОплаты.Удалить(сч);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			#КонецОбласти
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДобавлениеЗаписейЗачетаОплаты
	
	ТаблицаЗачетовОплат.Свернуть("ЗачетАванса,ЭтоКорректировка,ПериодЗачета,ПорядокЗачета,ИндексСтрокиОплат,ИндексСтрокиОтгрузокПоставок,ПриходДобавлен,ДокументОплаты,ДатаПлановогоПогашенияОплаты","Сумма");
	
	ТаблицаЗачетовОплат.Индексы.Добавить("ИндексСтрокиОплат,ПриходДобавлен");
	ТаблицаЗачетовОплат.Индексы.Добавить("ИндексСтрокиОтгрузокПоставок,ПриходДобавлен");
	ТаблицаЗачетовОплат.Индексы.Добавить("ИндексСтрокиОплат,ЭтоКорректировка");
	
	Для Каждого СтрокаЗачета Из ТаблицаЗачетовОплат Цикл
		
		Если СтрокаЗачета.ИндексСтрокиОплат <> -1 И СтрокаЗачета.ИндексСтрокиОтгрузокПоставок <> -1 Тогда
		
		СтрокаОплаты           = РасчетыОплаты[СтрокаЗачета.ИндексСтрокиОплат];
		СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[СтрокаЗачета.ИндексСтрокиОтгрузокПоставок];
		СуммаСписания          = СтрокаЗачета.Сумма;
		ПоследняяДатаЗачета    = Макс(СтрокаЗачета.ПериодЗачета,ПоследняяДатаЗачета);
		ПоследнийПорядокЗачета = Макс(СтрокаЗачета.ПорядокЗачета,ПоследнийПорядокЗачета);
		
		Если СтрокаЗачета.ЗачетАванса Тогда
			
			//Приход предоплаты.
			ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОплат);
			
			//Переоценка накладной до даты оплаты.
			Если НужнаПереоценка И ЗачетОплатПоДатеПлатежа И НачалоМесяца(СтрокаЗачета.ПериодЗачета) > НачалоМесяца(СтрокаОтгрузкиПоставки.Период) Тогда
				ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор);
			КонецЕсли;
			
			//Переброс аванса на расчетный документ - накладную.
			//Если истина - будет просто уменьшена предоплата, иначе будет создана запись по приходу и расходу долга.
			ДвойнаяЗаписьНеНужна = ХозяйственныеОперацииНеОтгрузка.Найти(СтрокаОтгрузкиПоставки.ХозяйственнаяОперация) <> Неопределено И НЕ СтрокаОтгрузкиПоставки.Сторно;
			
			//Возврат аванса отражаем по курсу возврата. Взаимозачет всегда по своему курсу.
			Если (СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
				И СтрокаОтгрузкиПоставки.РучнойКурсРегл)
				ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса
					И (СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
						ИЛИ СтрокаОтгрузкиПоставки.РучнойКурсРегл)Тогда
				СуммаСписанияРегл = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаРегл/СтрокаОтгрузкиПоставки.ИсходнаяСумма,
					СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
			//Остальные авансы по курсу аванса.
			Иначе
				СуммаСписанияРегл = СуммаСписания(0, СтрокаОплаты.СуммаРегл, СтрокаОплаты.Сумма, СуммаСписания);
			КонецЕсли;
			
			Если (СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
				И СтрокаОтгрузкиПоставки.РучнойКурсУпр)
				ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса 
					И (СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
						ИЛИ СтрокаОтгрузкиПоставки.РучнойКурсРегл)Тогда
				СуммаСписанияУпр = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаУпр/СтрокаОтгрузкиПоставки.ИсходнаяСумма,
					СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
			Иначе
				СуммаСписанияУпр = СуммаСписания(0, СтрокаОплаты.СуммаУпр, СтрокаОплаты.Сумма, СуммаСписания);
			КонецЕсли;
			
			ДатаЗачетаОтличаетсяОтДатыНакладной = НачалоДня(СтрокаЗачета.ПериодЗачета) <> НачалоДня(СтрокаОтгрузкиПоставки.Период);
			Если СтрокаОтгрузкиПоставки.РучнойКурсУпр ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса ИЛИ ДатаЗачетаОтличаетсяОтДатыНакладной Тогда
				ПриходДолгУпр = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаУпр/СтрокаОтгрузкиПоставки.ИсходнаяСумма, 
					СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
			Иначе
				ПриходДолгУпр = СуммаСписанияУпр;
			КонецЕсли;
			Если СтрокаОтгрузкиПоставки.РучнойКурсРегл ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса ИЛИ ДатаЗачетаОтличаетсяОтДатыНакладной Тогда
				ПриходДолгРегл = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаРегл/СтрокаОтгрузкиПоставки.ИсходнаяСумма, 
					СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания);
			Иначе
				ПриходДолгРегл = СуммаСписанияРегл;
			КонецЕсли;
			
			#Область РасходПредоплата
			Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
				НовСтр_Предоплата_Расход                          = ТаблицаРасчетовПоСрокам.Добавить();
				НовСтр_Предоплата_Расход.ВидДвижения              = ВидДвиженияНакопления.Расход;
				
				НовСтр_Предоплата_Расход.ДокументРегистратор      = СтрокаОтгрузкиПоставки.Регистратор;
				НовСтр_Предоплата_Расход.ВалютаДокумента          = СтрокаОтгрузкиПоставки.ВалютаДокумента;
				НовСтр_Предоплата_Расход.Период                   = СтрокаЗачета.ПериодЗачета;
				НовСтр_Предоплата_Расход.РасчетныйДокумент        = СтрокаОплаты.РасчетныйДокумент;
				НовСтр_Предоплата_Расход.ДатаВозникновения        = СтрокаОплаты.ДатаВозникновения;
				НовСтр_Предоплата_Расход.ДатаПлановогоПогашения   = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),СтрокаОплаты.ДатаПлановогоПогашения, СтрокаЗачета.ДатаПлановогоПогашенияОплаты);
				НовСтр_Предоплата_Расход.ПорядокЗачета            = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
				НовСтр_Предоплата_Расход.ПорядокОперации          = СтрокаЗачета.ПорядокЗачета;
				НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
				НовСтр_Предоплата_Расход.СвязанныйДокумент        = СтрокаОплаты.СвязанныйДокумент;
				Если НовСтр_Предоплата_Расход.ДокументРегистратор  = СтрокаОплаты.Регистратор Тогда
					НовСтр_Предоплата_Расход.КорОбъектРасчетов        = СтрокаОплаты.КорОбъектРасчетов;
					НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
				КонецЕсли;
				НовСтр_Предоплата_Расход.Сторно                   = СтрокаОтгрузкиПоставки.Сторно;
				
				Если СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
					И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
					И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера Тогда
					ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
				ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
					И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомитенту")
					И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом Тогда
					ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
				ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
					И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
					И (СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом) Тогда
					Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
						ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
					Иначе
						ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
					КонецЕсли;
				ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
					И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.Бронирование")
					И (СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеЧерезАгента
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеЧерезПодотчетноеЛицо) Тогда
					ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом;
				Иначе
					ХозяйственнаяОперацияЗачетАванса = ХозяйственныеОперации["ЗачетАванса"];
				КонецЕсли;
				
				Если ДвойнаяЗаписьНеНужна Тогда
					НовСтр_Предоплата_Расход.ХозяйственнаяОперация = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
					НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = СтрокаОтгрузкиПоставки.НастройкаХозяйственнойОперации;
					НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи = СтрокаОтгрузкиПоставки.ИдентификаторФинЗаписи;
				Иначе
					НовСтр_Предоплата_Расход.ХозяйственнаяОперация = ХозяйственнаяОперацияЗачетАванса;
					ИдентификаторЗачетаАванса = Новый УникальныйИдентификатор;
					НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
					НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи = ИдентификаторЗачетаАванса;
				КонецЕсли;
				
				НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
				НовСтр_Предоплата_Расход.ПредоплатаРегл = СуммаСписанияРегл;
				НовСтр_Предоплата_Расход.ПредоплатаУпр  = СуммаСписанияУпр;
			КонецЕсли;
			
			#КонецОбласти
			
			Если НЕ ДвойнаяЗаписьНеНужна ИЛИ ДатаЗачетаОтличаетсяОтДатыНакладной Тогда
				Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен И СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
				#Область ПриходДолг
				
					//Отражаем приход на сумму долга по курсу предоплаты.
					НовСтр_Долг_Приход = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Долг_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
					
					НовСтр_Долг_Приход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
					НовСтр_Долг_Приход.ВалютаДокумента               = СтрокаОтгрузкиПоставки.ВалютаДокумента;
					НовСтр_Долг_Приход.ПорядокОперации               = СтрокаОтгрузкиПоставки.ПорядокОперации;
					НовСтр_Долг_Приход.Сторно                        = СтрокаОтгрузкиПоставки.Сторно;
					НовСтр_Долг_Приход.Период                        = СтрокаОтгрузкиПоставки.Период;
					НовСтр_Долг_Приход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
					НовСтр_Долг_Приход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
					НовСтр_Долг_Приход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
					НовСтр_Долг_Приход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
					НовСтр_Долг_Приход.ХозяйственнаяОперация         = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
					НовСтр_Долг_Приход.НастройкаХозяйственнойОперации = СтрокаОтгрузкиПоставки.НастройкаХозяйственнойОперации;
					НовСтр_Долг_Приход.ИдентификаторФинЗаписи        = СтрокаОтгрузкиПоставки.ИдентификаторФинЗаписи;
					//возврат ДС, статья должна быть
					НовСтр_Долг_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
					НовСтр_Долг_Приход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
					НовСтр_Долг_Приход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
					НовСтр_Долг_Приход.СвязанныйДокумент             = Неопределено;
					
					НовСтр_Долг_Приход.Долг                          = СуммаСписания;
					НовСтр_Долг_Приход.ДолгРегл                      = ПриходДолгРегл;
					НовСтр_Долг_Приход.ДолгУпр                       = ПриходДолгУпр;
					
				#КонецОбласти
				КонецЕсли;
				
				#Область РасходДолг
				Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
				//Переносим предоплату на расчетный документ отгрузки.
				НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
				НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
				
				НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОтгрузкиПоставки.ВалютаДокумента;
				
				НовСтр_Долг_Расход.Период                        = СтрокаЗачета.ПериодЗачета;
				НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственнаяОперацияЗачетАванса;
				НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
				НовСтр_Долг_Расход.ИдентификаторФинЗаписи        = ИдентификаторЗачетаАванса;
				НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
				НовСтр_Долг_Расход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
				НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
				НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаЗачета.ПорядокЗачета;
				НовСтр_Долг_Расход.ПорядокОперации               = СтрокаЗачета.ПорядокЗачета;
				НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
				НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
				НовСтр_Долг_Расход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
				НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
				НовСтр_Долг_Расход.Сторно                        = СтрокаОтгрузкиПоставки.Сторно;
				НовСтр_Долг_Расход.СвязанныйДокумент             = Неопределено;
				
				НовСтр_Долг_Расход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
				НовСтр_Долг_Расход.ДолгУпр                       = НовСтр_Предоплата_Расход.ПредоплатаУпр;
				НовСтр_Долг_Расход.ДолгРегл                      = НовСтр_Предоплата_Расход.ПредоплатаРегл;
				КонецЕсли;
				#КонецОбласти
			
			КонецЕсли;
			
			//Уменьшаем строку оплаты на сумму зачета
			СтрокаОплаты.Сумма         = СтрокаОплаты.Сумма     - СуммаСписания;
			СтрокаОплаты.СуммаРегл     = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
			СтрокаОплаты.СуммаУпр      = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
			
			//Уменьшаем сумму строку отгрузки, которая пойдет в приход.
			Если СтрокаОтгрузкиПоставки.РучнойКурсРегл И НЕ ДвойнаяЗаписьНеНужна Тогда
				СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - ПриходДолгРегл;
				//В строке отгрузки может быть нулевая сумма к приходованию, но не нулевая сумма к переоценке.
				СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСписанияРегл;
			Иначе
				//Выше могла произойти переоценка, поэтому сумму для переоценки нужно изменить так же как сумму регл
				ПересчитанныйОстатокРегл = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаРегл/СтрокаОтгрузкиПоставки.ИсходнаяСумма, СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СтрокаОтгрузкиПоставки.Сумма-СуммаСписания);
				СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - (СтрокаОтгрузкиПоставки.СуммаРегл -ПересчитанныйОстатокРегл);
				СтрокаОтгрузкиПоставки.СуммаРегл = ПересчитанныйОстатокРегл;
			КонецЕсли;
			
			Если СтрокаОтгрузкиПоставки.РучнойКурсУпр И НЕ ДвойнаяЗаписьНеНужна Тогда
				СтрокаОтгрузкиПоставки.СуммаУпр = СтрокаОтгрузкиПоставки.СуммаУпр - ПриходДолгУпр;
				СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСписанияУпр;
			Иначе
				ПересчитанныйОстатокУпр = СуммаСписания(СтрокаОтгрузкиПоставки.ИсходнаяСуммаУпр/СтрокаОтгрузкиПоставки.ИсходнаяСумма, СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СтрокаОтгрузкиПоставки.Сумма-СуммаСписания);
				СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - (СтрокаОтгрузкиПоставки.СуммаУпр -ПересчитанныйОстатокУпр);
				СтрокаОтгрузкиПоставки.СуммаУпр = ПересчитанныйОстатокУпр;
			КонецЕсли;
			
			СтрокаОтгрузкиПоставки.Сумма                  = СтрокаОтгрузкиПоставки.Сумма - СуммаСписания;
			
			//Хранит средневзвешанные курсы накладных для проведения корректировок.
			Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
				ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, СтруктураСумм());
			КонецЕсли;
			
			ДанныеНакладной                    = ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор];
			ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента     + СуммаСписания;
			ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СуммаСписанияРегл;
			ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СуммаСписанияУпр;
			
			Если СтрокаОплаты.Сумма = 0 Тогда
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки.Период,
					СтрокаОплаты, "Предоплата", -Окр(СтрокаОплаты.СуммаРегл, 2), -Окр(СтрокаОплаты.СуммаУпр, 2));
			КонецЕсли;
			
			Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
				СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, Макс(НачалоДня(СтрокаЗачета.ПериодЗачета), НачалоДня(СтрокаОтгрузкиПоставки.Период)),
					СтрокаОтгрузкиПоставки, "Долг", -СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, -СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки);
			КонецЕсли;
			
		//Отгрузка раньше оплаты.
		Иначе
			
			ХозяйственныеОперацииПереноса = ХозяйственныеОперацииПереносаРасчетов();
			
			ДатаЗачетаОтличаетсяОтДатыОплаты = НачалоДня(СтрокаЗачета.ПериодЗачета) <> НачалоДня(СтрокаОплаты.Период)
				И СтрокаОплаты.Регистратор <> СтрокаОтгрузкиПоставки.Регистратор;
			
			//Обычная оплата.
			Если НЕ СтрокаЗачета.ЭтоКорректировка Тогда
				
				//Добавляем строку прихода долга по отгрузке/поставке.
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОтгрузокПоставок);
				
				//Переоценка накладной до даты оплаты.
				Если НужнаПереоценка Тогда
					ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор, СтрокаЗачета.ПериодЗачета);
				КонецЕсли;
				
				//Списываем долг по курсу аванса.
				СуммаСписанияРегл = СуммаСписания(0, СтрокаОплаты.СуммаРегл, СтрокаОплаты.Сумма, СуммаСписания);
				СуммаСписанияУпр = СуммаСписания(0, СтрокаОплаты.СуммаУпр, СтрокаОплаты.Сумма, СуммаСписания);
				
				#Область РасходДолг
				Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
					НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
					НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
					//Взаимозачет считаем взаимозачетом
					НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
					Если ДатаЗачетаОтличаетсяОтДатыОплаты Тогда
						НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ЗачетАванса"];
						НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
					ИначеЕсли ХозяйственныеОперацииПереноса.Найти(СтрокаОплаты.ХозяйственнаяОперация) <> Неопределено Тогда
						НовСтр_Долг_Расход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
					Иначе
						НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ПогашениеЗадолженности"];
					КонецЕсли;
					НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
					НовСтр_Долг_Расход.Период                        = СтрокаЗачета.ПериодЗачета;
					НовСтр_Долг_Расход.ПорядокОперации               = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
					
					НовСтр_Долг_Расход.ИдентификаторФинЗаписи        = СтрокаОплаты.ИдентификаторФинЗаписи;
					НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
					НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
					НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
					НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
					НовСтр_Долг_Расход.КорОбъектРасчетов             = ?(ЗначениеЗаполнено(СтрокаОтгрузкиПоставки.КорОбъектРасчетов), СтрокаОтгрузкиПоставки.КорОбъектРасчетов, СтрокаОплаты.КорОбъектРасчетов);
					НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам  = ?(ЗначениеЗаполнено(СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам), СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам, СтрокаОплаты.КорАналитикаУчетаПоПартнерам);
					НовСтр_Долг_Расход.Сторно                        = СтрокаОплаты.Сторно;
					
					НовСтр_Долг_Расход.Долг     = СуммаСписания;
					НовСтр_Долг_Расход.ДолгРегл = СуммаСписанияРегл;
					НовСтр_Долг_Расход.ДолгУпр  = СуммаСписанияУпр;
				КонецЕсли;
				#КонецОбласти
				
				//Уменьшаем строку оплаты на зачтенную сумму.
				СтрокаОплаты.Сумма       = СтрокаОплаты.Сумма     - СуммаСписания;
				СтрокаОплаты.СуммаРегл   = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
				СтрокаОплаты.СуммаУпр    = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
				
				//Уменьшаем строку отгрузки/поставки на зачтенную сумму.
				СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
				СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - СуммаСписанияРегл;
				СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - СуммаСписанияУпр;
				СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСписанияРегл;
				СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСписанияУпр;
				
				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаЗачета.ПериодЗачета),
						СтрокаОтгрузкиПоставки, "Долг", -СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, -СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки);
				КонецЕсли;
				
			//Корректировка накладной в минус.
			Иначе
				
				//Добавляем строку прихода по долгу для сторнируемой накладной.
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОтгрузокПоставок);
				
				//Переоценка накладной до даты оплаты.
				Если НужнаПереоценка И НачалоМесяца(СтрокаОтгрузкиПоставки.ДатаВозникновения) < НачалоМесяца(СтрокаОплаты.ДатаВозникновения) Тогда
					ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор, СтрокаЗачета.ПериодЗачета, Ложь);
				КонецЕсли;
				
				Если СтрокаОплаты.РучнойКурсРегл
					Или ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент] = Неопределено Тогда
					СуммаСторноРегл = Окр(СуммаСписания * СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма,2);
				Иначе
					СуммаСторноРегл = Окр(СуммаСписания * 
						(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаРегл 
							/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
				КонецЕсли;
						
				Если СтрокаОплаты.РучнойКурсУпр
					Или ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент] = Неопределено Тогда
					СуммаСторноУпр = Окр(СуммаСписания * СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма,2);
				Иначе
					СуммаСторноУпр = Окр(СуммаСписания * 
						(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаУпр 
							/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
				КонецЕсли;
				
				#Область СторноЗапись
				Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
					НовСтр_Сторно = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Сторно.ВидДвижения = ВидДвиженияНакопления.Расход;
					
					НовСтр_Сторно.ДокументРегистратор   = СтрокаОплаты.Регистратор;
					НовСтр_Сторно.РасчетныйДокумент     = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
					НовСтр_Сторно.ХозяйственнаяОперация = СтрокаОплаты.ХозяйственнаяОперация;
					НовСтр_Сторно.ВалютаДокумента       = СтрокаОплаты.ВалютаДокумента;
					НовСтр_Сторно.СвязанныйДокумент     = СтрокаОплаты.СвязанныйДокумент;
					
					НовСтр_Сторно.Долг     = СуммаСписания;
					НовСтр_Сторно.ДолгРегл = СуммаСторноРегл;
					НовСтр_Сторно.ДолгУпр  = СуммаСторноУпр;
					
					НовСтр_Сторно.Период                   = СтрокаЗачета.ПериодЗачета;
					НовСтр_Сторно.ПорядокОперации          = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Сторно.ПорядокЗачета            = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Сторно.ДатаПлановогоПогашения   = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
					НовСтр_Сторно.ДатаВозникновения        = СтрокаОтгрузкиПоставки.ДатаВозникновения;
					
					НовСтр_Сторно.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
					НовСтр_Сторно.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
					НовСтр_Сторно.ИдентификаторФинЗаписи   = СтрокаОплаты.ИдентификаторФинЗаписи;
					НовСтр_Сторно.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
					НовСтр_Сторно.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
				КонецЕсли;
				#КонецОбласти
				
				//Уменьшаем строку оплаты на сумму сторно.
				СтрокаОплаты.Сумма     = СтрокаОплаты.Сумма     - СуммаСписания;
				СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл - СуммаСторноРегл;
				СтрокаОплаты.СуммаУпр  = СтрокаОплаты.СуммаУпр  - СуммаСторноУпр;
				
				//Уменьшаем строку отгрузки на сумму сторно.
				СтрокаОтгрузкиПоставки.Сумма                  = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
				СтрокаОтгрузкиПоставки.СуммаРегл              = СтрокаОтгрузкиПоставки.СуммаРегл - СуммаСторноРегл; 
				СтрокаОтгрузкиПоставки.СуммаУпр               = СтрокаОтгрузкиПоставки.СуммаУпр  - СуммаСторноУпр;
				СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСторноРегл;
				СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСторноУпр;
				
				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
						СтрокаОтгрузкиПоставки, "Долг", -СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, -СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки);
					СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = 0;
					СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = 0;
				КонецЕсли;
				
				СтрокаЗачета.ЭтоКорректировка = Ложь;
				
				//Если в таблице зачетов данная строка больше не распределяется как корректировка то пересчитаем её сумму регл и упр и будем зачитывать как обычную оплату.
				Если ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ИндексСтрокиОплат, ЭтоКорректировка", СтрокаЗачета.ИндексСтрокиОплат, Истина)).Количество() = 0 Тогда
					ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
				КонецЕсли;
				
			КонецЕсли;
			
			// Нужно добавить запись прихода и расхода предоплаты
			Если ДатаЗачетаОтличаетсяОтДатыОплаты Тогда
				
				#Область ПриходПредоплата
				ДатаПлановогоПогашенияОплаты = СтрокаОплаты.ДатаПлановогоПогашения;
				Если НЕ СтрокаОплаты.ПриходДобавлен И СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
					НовСтр_Предоплата_Приход = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Предоплата_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
					НовСтр_Предоплата_Приход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
					НовСтр_Предоплата_Приход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
					НовСтр_Предоплата_Приход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
					НовСтр_Предоплата_Приход.Период                        = СтрокаОплаты.Период;
					НовСтр_Предоплата_Приход.ПорядокОперации               = СтрокаОплаты.ПорядокОперации;
					НовСтр_Предоплата_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
					НовСтр_Предоплата_Приход.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
					НовСтр_Предоплата_Приход.ИдентификаторФинЗаписи        = СтрокаОплаты.ИдентификаторФинЗаписи;
					НовСтр_Предоплата_Приход.РасчетныйДокумент             = СтрокаОплаты.РасчетныйДокумент;
					НовСтр_Предоплата_Приход.ДатаВозникновения             = СтрокаОплаты.ДатаВозникновения;
					НовСтр_Предоплата_Приход.ДатаПлановогоПогашения        = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),СтрокаОплаты.ДатаПлановогоПогашения, СтрокаЗачета.ДатаПлановогоПогашенияОплаты);
					НовСтр_Предоплата_Приход.ПорядокЗачета                 = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
					НовСтр_Предоплата_Приход.КорОбъектРасчетов             = СтрокаОплаты.КорОбъектРасчетов;
					НовСтр_Предоплата_Приход.КорАналитикаУчетаПоПартнерам  = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
					НовСтр_Предоплата_Приход.Сторно                        = СтрокаОплаты.Сторно;
					
					НовСтр_Предоплата_Приход.Предоплата     = СуммаСписания;
					НовСтр_Предоплата_Приход.ПредоплатаРегл = СуммаСписанияРегл;
					НовСтр_Предоплата_Приход.ПредоплатаУпр  = СуммаСписанияУпр;
					
					ДатаПлановогоПогашенияОплаты = НовСтр_Предоплата_Приход.ДатаПлановогоПогашения;
				КонецЕсли;
				#КонецОбласти
				
				#Область РасходПредоплата
				Если СтрокаЗачета.ПорядокЗачета >= ГлобальныеПеременные.ПорядокФакт Тогда
					НовСтр_Предоплата_Расход = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Предоплата_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
					НовСтр_Предоплата_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
					НовСтр_Предоплата_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ЗачетАванса"];
					НовСтр_Предоплата_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
					НовСтр_Предоплата_Расход.Период                        = СтрокаЗачета.ПериодЗачета;
					НовСтр_Предоплата_Расход.ПорядокОперации               = СтрокаЗачета.ПорядокЗачета;
					НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
					НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
					НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи        = СтрокаОплаты.ИдентификаторФинЗаписи;
					НовСтр_Предоплата_Расход.РасчетныйДокумент             = СтрокаОплаты.РасчетныйДокумент;
					НовСтр_Предоплата_Расход.ДатаВозникновения             = СтрокаОплаты.ДатаВозникновения;
					НовСтр_Предоплата_Расход.ДатаПлановогоПогашения        = ДатаПлановогоПогашенияОплаты;
					НовСтр_Предоплата_Расход.ПорядокЗачета                 = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
					Если НовСтр_Предоплата_Расход.ДокументРегистратор  = СтрокаОплаты.Регистратор Тогда
						НовСтр_Предоплата_Расход.КорОбъектРасчетов             = СтрокаОплаты.КорОбъектРасчетов;
						НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам  = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
					КонецЕсли;
					НовСтр_Предоплата_Расход.Сторно                        = СтрокаОплаты.Сторно;
					
					НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
					НовСтр_Предоплата_Расход.ПредоплатаРегл = СуммаСписанияРегл;
					НовСтр_Предоплата_Расход.ПредоплатаУпр  = СуммаСписанияУпр;
				КонецЕсли;

				#КонецОбласти
				
			КонецЕсли;
			
		КонецЕсли;
		
		Иначе
			
			Если СтрокаЗачета.ИндексСтрокиОтгрузокПоставок <> -1 Тогда
				
				СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[СтрокаЗачета.ИндексСтрокиОтгрузокПоставок];
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОтгрузокПоставок);
				
				Если НужнаПереоценка Тогда
					ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор);
				КонецЕсли;
				
			Иначе
				
				СтрокаОплаты = РасчетыОплаты[СтрокаЗачета.ИндексСтрокиОплат];
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата", ТаблицаЗачетовОплат, СтрокаЗачета.ИндексСтрокиОплат);
				
				// Остатки авансов должны быть отнесены в последнюю дату распределения, т.к. между этой датой и приходом платежа могут меняться распределение накладных на платежи.
				Если ЗачетОплатПоДатеПлатежа Тогда
					СтрокаОплаты.Период = ПоследняяДатаЗачета;
					СтрокаОплаты.ПорядокОперации = ПоследнийПорядокЗачета;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	#КонецОбласти
	
	#Область ФиксацияРезультатов
	
	НаборЗаписейПоСрокам = РегистрыНакопления[ИмяРегистраРасчетов].СоздатьНаборЗаписей();
	НаборЗаписейПланОплат = РегистрыНакопления[ИмяРегистраПланаОплат].СоздатьНаборЗаписей();
	НаборЗаписейПланОтгрузокПоставок = РегистрыНакопления[ИмяРегистраПланаОтгрузкиПоставки].СоздатьНаборЗаписей();
	
	ТаблицаРасчетовПоСрокам.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
			|РасчетныйДокумент, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ПорядокЗачета, ПорядокОперации,
			|ВалютаДокумента, СвязанныйДокумент, СтатьяДвиженияДенежныхСредств, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам, Сторно,
			|НастройкаХозяйственнойОперации,ИдентификаторФинЗаписи,ЗаписьДоНачалаРасчета",
			"Предоплата, ПредоплатаРегл, ПредоплатаУпр, Долг, ДолгРегл, ДолгУпр");
	
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаРасчетовПоСрокам.Индексы.Добавить("Регистратор");
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьФакт Тогда
		
		НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("Порядок", ГлобальныеПеременные.ПорядокФакт );
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
		#Область ПроверкаИзмененийРегистров
		
		ТаблицаИзменений = Неопределено;
		
		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ *
			|ПОМЕСТИТЬ ВтДвиженияПосле
			|ИЗ  &ТаблицаПоСрокам КАК ДвиженияПосле
			|;
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Период                        КАК Период,
			|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|	ВложенныйЗапрос.ОбъектРасчетов                КАК ОбъектРасчетов,
			|	ВложенныйЗапрос.Валюта                        КАК Валюта,
			|	ВложенныйЗапрос.РасчетныйДокумент             КАК РасчетныйДокумент,
			|	ВложенныйЗапрос.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|	ВложенныйЗапрос.ДатаВозникновения             КАК ДатаВозникновения,
			|	
			|	ВложенныйЗапрос.ПорядокОперации               КАК ПорядокОперации,
			|	ВложенныйЗапрос.ВалютаДокумента               КАК ВалютаДокумента,
			|	ВложенныйЗапрос.СвязанныйДокумент             КАК СвязанныйДокумент,
			|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ВложенныйЗапрос.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|	ВложенныйЗапрос.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|	ВложенныйЗапрос.ДокументРегистратор           КАК ДокументРегистратор,
			|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
			|	
			|	СУММА(ВложенныйЗапрос.Предоплата)                    КАК Предоплата,
			|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)                КАК ПредоплатаРегл,
			|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)                 КАК ПредоплатаУпр,
			|	СУММА(ВложенныйЗапрос.Долг)                          КАК Долг,
			|	СУММА(ВложенныйЗапрос.ДолгРегл)                      КАК ДолгРегл,
			|	СУММА(ВложенныйЗапрос.ДолгУпр)                       КАК ДолгУпр
			|ПОМЕСТИТЬ ТаблицаИзмененийРасчетыСКлиентамиПоСрокам
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетыПоСрокам.Период                        КАК Период,
			|		РасчетыПоСрокам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|		РасчетыПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
			|		РасчетыПоСрокам.Валюта                        КАК Валюта,
			|		РасчетыПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
			|		ВЫБОР КОГДА РасчетыПоСрокам.Предоплата <> 0 
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|			ИНАЧЕ РасчетыПоСрокам.ДатаПлановогоПогашения
			|		КОНЕЦ                                         КАК ДатаПлановогоПогашения,
			|		РасчетыПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
			|		
			|		РасчетыПоСрокам.ПорядокОперации               КАК ПорядокОперации,
			|		РасчетыПоСрокам.ВалютаДокумента               КАК ВалютаДокумента,
			|		РасчетыПоСрокам.СвязанныйДокумент             КАК СвязанныйДокумент,
			|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|		РасчетыПоСрокам.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|		РасчетыПоСрокам.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|		РасчетыПоСрокам.ДокументРегистратор           КАК ДокументРегистратор,
			|		РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
			|		
			|		РасчетыПоСрокам.Предоплата                    КАК Предоплата,
			|		РасчетыПоСрокам.ПредоплатаРегл                КАК ПредоплатаРегл,
			|		РасчетыПоСрокам.ПредоплатаУпр                 КАК ПредоплатаУпр,
			|		РасчетыПоСрокам.Долг                          КАК Долг,
			|		РасчетыПоСрокам.ДолгРегл                      КАК ДолгРегл,
			|		РасчетыПоСрокам.ДолгУпр                       КАК ДолгУпр
			|		
			|	ИЗ
			|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
			|	ГДЕ
			|		РасчетыПоСрокам.ДокументРегистратор В (&МассивДокументов)
			|		И РасчетыПоСрокам.Активность
			|		И РасчетыПоСрокам.ОбъектРасчетов = &ОбъектРасчетов
			|		И РасчетыПоСрокам.Период >= &НачалоДняПорядкаФакт
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДвиженияПосле.Период                        КАК Период,
			|		ДвиженияПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|		ДвиженияПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
			|		ДвиженияПосле.Валюта                        КАК Валюта,
			|		ДвиженияПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
			|		ВЫБОР КОГДА ДвиженияПосле.Предоплата <> 0 
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|			ИНАЧЕ ДвиженияПосле.ДатаПлановогоПогашения
			|		КОНЕЦ                                       КАК ДатаПлановогоПогашения,
			|		ДвиженияПосле.ДатаВозникновения             КАК ДатаВозникновения,
			|		
			|		ДвиженияПосле.ПорядокОперации               КАК ПорядокОперации,
			|		ДвиженияПосле.ВалютаДокумента               КАК ВалютаДокумента,
			|		ДвиженияПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
			|		ДвиженияПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|		ВЫБОР КОГДА ДвиженияПосле.КорОбъектРасчетов = Неопределено
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ИНАЧЕ ДвиженияПосле.КорОбъектРасчетов
			|		КОНЕЦ                                       КАК КорОбъектРасчетов,
			|		ДвиженияПосле.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|		ДвиженияПосле.ДокументРегистратор           КАК ДокументРегистратор,
			|		ВЫБОР КОГДА ДвиженияПосле.КорАналитикаУчетаПоПартнерам = Неопределено
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
			|			ИНАЧЕ ДвиженияПосле.КорАналитикаУчетаПоПартнерам
			|		КОНЕЦ                                       КАК КорАналитикаУчетаПоПартнерам,
			|		
			|		-ДвиженияПосле.Предоплата                    КАК Предоплата,
			|		-ДвиженияПосле.ПредоплатаРегл                КАК ПредоплатаРегл,
			|		-ДвиженияПосле.ПредоплатаУпр                 КАК ПредоплатаУпр,
			|		-ДвиженияПосле.Долг                          КАК Долг,
			|		-ДвиженияПосле.ДолгРегл                      КАК ДолгРегл,
			|		-ДвиженияПосле.ДолгУпр                       КАК ДолгУпр
			|	ИЗ
			|		ВтДвиженияПосле КАК ДвиженияПосле) КАК ВложенныйЗапрос
			|СГРУППИРОВАТЬ ПО
			|	Период,
			|	АналитикаУчетаПоПартнерам,
			|	ОбъектРасчетов,
			|	Валюта,
			|	РасчетныйДокумент,
			|	ДатаПлановогоПогашения,
			|	ДатаВозникновения,
			|	ПорядокОперации,
			|	ВалютаДокумента,
			|	СвязанныйДокумент,
			|	СтатьяДвиженияДенежныхСредств,
			|	КорОбъектРасчетов,
			|	ХозяйственнаяОперация,
			|	ДокументРегистратор,
			|	КорАналитикаУчетаПоПартнерам
			|ИМЕЮЩИЕ
			|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаРегл) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаУпр) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгРегл) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгУпр) <> 0";
			
			Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
					"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ТаблицаИзмененийРасчетыСКлиентамиПоСрокам",
					"ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
			КонецЕсли;
			
			РасчетыДляПроверки = ТаблицаРасчетовПоСрокам.Скопировать(Новый Структура("ЗаписьДоНачалаРасчета",Ложь));
			
			МассивДокументов = РасчетыДляПроверки.ВыгрузитьКолонку("ДокументРегистратор");
			МассивДокументов.Добавить(ОсновныеПараметры.Регистратор);
			
			Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
			Запрос.УстановитьПараметр("ТаблицаПоСрокам", РасчетыДляПроверки);
			Запрос.УстановитьПараметр("МассивЗадействованныхРегистраторов",
				ГлобальныеПеременные["МассивЗадействованныхРегистраторов"
					+ ?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами,"РасчетыСКлиентамиПоСрокам","РасчетыСПоставщикамиПоСрокам")]);
			
			Запрос.Выполнить();
			
			// Не анализируем изменения по документу, инициирующему перерасчет:
			НеотражаемыйДокумент = ОсновныеПараметры.Регистратор;
			
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				
				Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
				
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор";
						
					
				Запрос.Текст = ТекстАктуализацииОтражения;
				
				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
				
				#Область ПроверкаДатыЗапрета
				
				ЗапросПроверкиДатыЗапрета = Новый Запрос("
				|ВЫБРАТЬ
				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период,
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО) КАК Организация
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО)");
				
				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
				ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
				Пока ВыборкаМинимальногоПериода.Следующий() Цикл
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Объект = ВыборкаМинимальногоПериода.Организация;
					НоваяСтрока.Раздел = "ФинансовыйКонтур";
				КонецЦикла;
				
				ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.'");
				
				Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				#КонецОбласти
				

				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.РасчетныйДокумент                    КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК Изменения";
				
				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
				
				ЭмуляцияДокумента = ПроведениеДокументов.ЭмуляцияДокумента(Неопределено, Неопределено);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента =
					Новый Структура(ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи =
					ОсновныеПараметры.ДополнительныеСвойстваПроведения.СвойстваДокумента.РежимЗаписи;
				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ЭмуляцияДокумента, Запрос.МенеджерВременныхТаблиц);
				
			Иначе
				
				Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
				
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор";
				
					
				Запрос.Текст = ТекстАктуализацииОтражения;
					
				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
				
				#Область ПроверкаДатыЗапрета
				
				ЗапросПроверкиДатыЗапрета = Новый Запрос("ВЫБРАТЬ
				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период), ДАТАВРЕМЯ(3999, 1, 1)) КАК Период,
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО) КАК Организация
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО)");
				
				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
				ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
				
				Пока ВыборкаМинимальногоПериода.Следующий() Цикл
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Объект = ВыборкаМинимальногоПериода.Организация;
					НоваяСтрока.Раздел = "ФинансовыйКонтур";
				КонецЦикла;
				ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.'");
				Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				#КонецОбласти
				

				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.ДокументРегистратор                          КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.РасчетныйДокумент                    КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения";
				
				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
				
				ЭмуляцияДокумента = ПроведениеДокументов.ЭмуляцияДокумента(Неопределено, Неопределено);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента =
					Новый Структура(ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи =
					ОсновныеПараметры.ДополнительныеСвойстваПроведения.СвойстваДокумента.РежимЗаписи;
				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ЭмуляцияДокумента, Запрос.МенеджерВременныхТаблиц);
				
			КонецЕсли;
			
			РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВтДвиженияПосле");
			
		КонецЕсли;
		
		#КонецОбласти
		
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ИзмененияНДСУП);
				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
			Иначе
				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ИзмененияНДСУП);
				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаИзменений <> Неопределено И ТаблицаИзменений.Количество() > 0 Тогда
			УдалитьСистемныеКорректировкиРегистров(НачалоДняПорядкаФакт, Организация,, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПлан Тогда
	
		//Приходные движения пишутся непосредственно документами
		ТаблицаПланОплат = ТаблицаПланОплат.Скопировать(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
		ТаблицаПланОплат.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
				|ДокументПлан, ДатаПлановогоПогашения, ДатаВозникновения, ВариантОплаты, ПорядокОперации, НераспределенныйАванс, ДокументОплаты",
				"КОплате");
		
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаПланОплат.Индексы.Добавить("Регистратор");
	
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПлан Тогда
		
		ТаблицаПланОтгрузокПоставок = ТаблицаПланОтгрузокПоставок.Скопировать(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
		
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаПланОтгрузокПоставок.Индексы.Добавить("Регистратор");
	
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
		
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
		УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено И ГлобальныеПеременные.РассчитыватьФакт Тогда
		
		Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
			ИмяРегистра = "РасчетыСКлиентамиПоСрокам";
		Иначе 
			ИмяРегистра = "РасчетыСПоставщикамиПоСрокам";
		КонецЕсли;
		ОсновныеПараметры.ДополнительныеСвойстваПроведения.Вставить(
			ИмяРегистра,
			ТаблицаРасчетовПоСрокам);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

//Вызывает пересчет измененных расчетов по временной таблице изменений.
//
// Параметры:
//	Параметры - см. ПараметрыРаспределенияРасчетов
//	ДополнительныеСвойства - Структура - Дополнительные свойства проведения.
//
Процедура РаспределитьПоИзменениям(Параметры, ДополнительныеСвойства = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	Регистратор             = Параметры.Регистратор;
	ТаблицаИзменений        = Параметры.ТаблицаИзменений;
	
	Если ТаблицаИзменений = Неопределено Тогда
		ТаблицаИзменений = ТаблицаИзмененийДляПересчета(МенеджерВременныхТаблиц, Регистратор);
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из ТаблицаИзменений Цикл
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, СтрокаИзменений);
		Если СтрокаИзменений.ПорядокФакт <> "" Тогда
			ОсновныеПараметры.ПорядокФакт = Лев(СтрокаИзменений.ПорядокФакт, 8) + "000000000";
		КонецЕсли;
		
		Если Параметры.РасчетПлановФоновымЗаданием Тогда
			ОсновныеПараметры.ПорядокПлан = "30000101";
		ИначеЕсли СтрокаИзменений.ПорядокПлан <> "" Тогда
			ОсновныеПараметры.ПорядокПлан = Лев(СтрокаИзменений.ПорядокПлан, 8) + "000000000";
		КонецЕсли;
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = СтрокаИзменений.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.Регистратор = Регистратор;
		ОсновныеПараметры.ДополнительныеСвойстваПроведения = ДополнительныеСвойства;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
	КонецЦикла;
	
	Если ДополнительныеСвойства <> Неопределено И ТаблицаИзменений.Количество() > 0 Тогда
		
		МассивРассчитываемыхОбъектовРасчетов = ТаблицаИзменений.ВыгрузитьКолонку("ОбъектРасчетов");
		Если ДополнительныеСвойства.Свойство("МассивРассчитываемыхОбъектовРасчетов") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеСвойства.МассивРассчитываемыхОбъектовРасчетов, МассивРассчитываемыхОбъектовРасчетов);
		Иначе
			ДополнительныеСвойства.Вставить("МассивРассчитываемыхОбъектовРасчетов",МассивРассчитываемыхОбъектовРасчетов);
		КонецЕсли;
		
		МенеджерВременныхТаблицКорИзменений = Новый МенеджерВременныхТаблиц();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКорИзменений;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("РассчитываемыеОбъектыРасчетов", ДополнительныеСвойства.МассивРассчитываемыхОбъектовРасчетов);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаИзменений.ТипРасчетов КАК ТипРасчетов,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокОперации,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокЗачетаПоДатеПлатежа,
		|	ТаблицаИзменений.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаИзменений.ВалютаРасчетов КАК ВалютаРасчетов
		|ПОМЕСТИТЬ ТаблицаИзменений
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|;
		|ВЫБРАТЬ
		|	МИНИМУМ(Изменения.ПорядокОперации)                  КАК ПорядокОперации,
		|	МИНИМУМ(Изменения.ПорядокЗачетаПоДатеПлатежа)       КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)   КАК КорОбъектРасчетов,
		|	Изменения.ВалютаРасчетов                            КАК ВалютаРасчетов,
		|	Неопределено                                        КАК Заказ,
		|	Неопределено                                        КАК Документ,
		|	1                                                   КАК КОплате,
		|	1                                                   КАК КОтгрузке,
		|	1                                                   КАК Сумма,
		|	1                                                   КАК СуммаРегл,
		|	1                                                   КАК СуммаУпр
		|ПОМЕСТИТЬ РасчетыСКлиентамиИзменения
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК Изменения
		|			ПО Изменения.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|				И РасчетыСКлиентами.КорАналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|				И РасчетыСКлиентами.КорОбъектРасчетов = Изменения.ОбъектРасчетов
		|				И РасчетыСКлиентами.Валюта = Изменения.ВалютаРасчетов
		|				И РасчетыСКлиентами.ПорядокОперации > Изменения.ПорядокОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУпр
		|			ПО ИСТИНА
		|ГДЕ
		|	НЕ РасчетыСКлиентами.ОбъектРасчетов В (&РассчитываемыеОбъектыРасчетов)
		|	И РасчетыСКлиентами.ОбъектРасчетов.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|	И РасчетыСКлиентами.Активность
		|	И (ВалютаУпр.Значение <> Изменения.ВалютаРасчетов
		|		ИЛИ РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета <> Изменения.ВалютаРасчетов)
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов,
		|	Изменения.ВалютаРасчетов
		|;
		|ВЫБРАТЬ
		|	МИНИМУМ(Изменения.ПорядокОперации)                  КАК ПорядокОперации,
		|	МИНИМУМ(Изменения.ПорядокЗачетаПоДатеПлатежа)       КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетов                 КАК ОбъектРасчетов,
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)   КАК КорОбъектРасчетов,
		|	Изменения.ВалютаРасчетов                            КАК ВалютаРасчетов,
		|	Неопределено                                        КАК Заказ,
		|	Неопределено                                        КАК Документ,
		|	1                                                   КАК КОплате,
		|	1                                                   КАК КПоступлению,
		|	1                                                   КАК Сумма,
		|	1                                                   КАК СуммаРегл,
		|	1                                                   КАК СуммаУпр
		|ПОМЕСТИТЬ РасчетыСПоставщикамиИзменения
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК Изменения
		|			ПО Изменения.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|				И РасчетыСПоставщиками.КорАналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|				И РасчетыСПоставщиками.КорОбъектРасчетов = Изменения.ОбъектРасчетов
		|				И РасчетыСПоставщиками.Валюта = Изменения.ВалютаРасчетов
		|				И РасчетыСПоставщиками.ПорядокОперации > Изменения.ПорядокОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУпр
		|			ПО ИСТИНА
		|ГДЕ
		|	НЕ РасчетыСПоставщиками.ОбъектРасчетов В (&РассчитываемыеОбъектыРасчетов)
		|	И РасчетыСПоставщиками.ОбъектРасчетов.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|	И РасчетыСПоставщиками.Активность
		|	И (ВалютаУпр.Значение <> Изменения.ВалютаРасчетов
		|		ИЛИ РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета <> Изменения.ВалютаРасчетов)
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщиками.ОбъектРасчетов,
		|	Изменения.ВалютаРасчетов";
		
		Запрос.Выполнить();
		Параметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКорИзменений;
		Параметры.ТаблицаИзменений = Неопределено;
		РаспределитьПоИзменениям(Параметры, ДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

//Пересчитывает все курсовые разницы за указанный период.
//
// Параметры:
//	МассивОрганизаций - Массив из СправочникСсылка.Организации- Перечень организаций по которым необходимо выполнить переоценку.
//	НачалоПериода - Дата - Начало периода пересчета курсовых разниц.
//	КонецПериода - Дата - Конец периода пересчета курсовых разниц.
//  Параметры - см. ПараметрыПереоценки
//
Процедура ВыполнитьПереоценкуЗаПериод(МассивОрганизаций, Знач НачалоПериода, Знач КонецПериода, Параметры) Экспорт
	
	ИмяЗамера = "Взаиморасчеты.РасчетКурсовыхРазницПоСрокам" + ?(Параметры.ЭтоРасчетыСКлиентами,".Клиенты",".Поставщики");
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяЗамера);
	Параметры.Вставить("ВсегоОбработано", 0);
	ДокументыПереоценки = Документы.РасчетКурсовыхРазниц.ДокументыПереоценкиПоОрганизациям(
		МассивОрганизаций, НачалоПериода, КонецПериода, Параметры.ЭтоРасчетыСКлиентами);	
	Параметры.Вставить("ДокументыПереоценки", ДокументыПереоценки);	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками;
	Если Параметры.ЭтоРасчетыСКлиентами Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами;
	КонецЕсли;
	Параметры.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Параметры.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	НачалоПериода = НачалоМесяца(НачалоПериода);
	КонецПериода = КонецМесяца(НачалоПериода);
	
	ДниПереоценки = ДниПереоценки(МассивОрганизаций, НачалоПериода, КонецПериода, Параметры);
	Для Каждого День Из ДниПереоценки Цикл
		Дата = День.Дата;
		Если КонецДня(День.Дата) = КонецМесяца(День.Дата) Тогда
			Дата = КонецДня(День.Дата);
		КонецЕсли;
		ВыполнитьПереоценкуНаДату(МассивОрганизаций, Дата, Параметры);
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Параметры.ВсегоОбработано);
	
КонецПроцедуры

//Добавляет записи переоценки на одну дату.
//
// Параметры:
//	МассивОрганизаций - Массив из СправочникСсылка.Организации - Перечень организаций по которым необходимо выполнить переоценку.
//	Период - Дата - Дата, на конец которой необходимо выполнить переоценку.
//  Параметры - см. ПараметрыПереоценки 
//
Процедура ВыполнитьПереоценкуНаДату(МассивОрганизаций, Период, Параметры) Экспорт

	ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
	ПереоценкаПоДням = Параметры.ПереоценкаПоДням;
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикиУчетаПоПартнерам.КлючАналитики                              КАК АналитикаУчетаПоПартнерам,
	|	АналитикиУчетаПоПартнерам.Организация                                КАК Организация,
	|	АналитикиУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&ВалютаУправленческогоУчета                                          КАК ВалютаУправленческогоУчета,
	|	АналитикиУчетаПоПартнерам.Договор                                    КАК Договор,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ПереоцениватьТоварыУслугиКОтчетуКомитенту, ЛОЖЬ) КАК ПереоцениватьТоварыУслугиКОтчетуКомитенту,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(
	|			ДоговорыКонтрагентов.ВариантКурсаДоговора, 
	|			ДоговорыМеждуОрганизациями.ВариантКурсаДоговора), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный))         КАК ВариантКурсаДоговора
	|ПОМЕСТИТЬ ВтАналитикиУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АналитикиУчетаПоПартнерам.Договор = ДоговорыКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|		ПО АналитикиУчетаПоПартнерам.Договор = ДоговорыМеждуОрганизациями.Ссылка
	|ГДЕ
	|	АналитикиУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРегламентированногоУчета,
	|	ВалютаУправленческогоУчета,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения КАК ДатаВозникновения,
	|	Обороты.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыПоДокументамОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|		Расчеты.ДатаВозникновения КАК ДатаВозникновения,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРеглРасход,
	|		Расчеты.ДокументРегистратор КАК ДокументОплаты,
	|		ИСТИНА КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.АналитикаУчетаПоПартнерам
	|				И (Расчеты.Валюта <> Аналитика.ВалютаРегламентированногоУчета
	|					ИЛИ Расчеты.Валюта <> &ВалютаУправленческогоУчета)
	|		ГДЕ
	|			&РасчетыСКлиентами
	|			И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|			И Расчеты.Долг <> 0
	|			И НЕ Расчеты.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|		Расчеты.ДатаВозникновения КАК ДатаВозникновения,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРеглРасход,
	|		Расчеты.ДокументРегистратор КАК ДокументОплаты,
	|		ЛОЖЬ КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.АналитикаУчетаПоПартнерам
	|				И (Расчеты.Валюта <> Аналитика.ВалютаРегламентированногоУчета
	|					ИЛИ Расчеты.Валюта <> &ВалютаУправленческогоУчета)
	|		ГДЕ
	|			&РасчетыСПоставщиками
	|			И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|			И Расчеты.Долг <> 0
	|			И НЕ Расчеты.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|	) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения,
	|	Обороты.ДокументОплаты,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения КАК ДатаВозникновения,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыЗаДень
	|ИЗ
	|	втОборотыПоДокументамОплаты КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыЗаДеньБезДат
	|ИЗ
	|	втОборотыПоДокументамОплаты КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиИОбороты.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта                       КАК Валюта,
	|	ОстаткиИОбороты.ВалютаРегл                   КАК ВалютаРегл,
	|	ОстаткиИОбороты.РасчетныйДокумент            КАК РасчетныйДокумент,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения       КАК ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения            КАК ДатаВозникновения,
	|	ОстаткиИОбороты.ВариантКурсаДоговора         КАК ВариантКурсаДоговора,
	|	СУММА(ОстаткиИОбороты.ПредоплатаОстаток)     КАК ПредоплатаОстаток,
	|	СУММА(ОстаткиИОбороты.ПредоплатаРеглОстаток) КАК ПредоплатаРеглОстаток,
	|	СУММА(ОстаткиИОбороты.ПредоплатаУпрОстаток)  КАК ПредоплатаУпрОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгОстаток)           КАК ДолгОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгРеглОстаток)       КАК ДолгРеглОстаток,
	|	СУММА(ОстаткиИОбороты.ДолгУпрОстаток)        КАК ДолгУпрОстаток,
	|	ОстаткиИОбороты.ЭтоРасчетыСКлиентами         КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ втОстаткиНаКонецДня
	|ИЗ 
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокамОстатки.Валюта                    КАК Валюта,
	|		АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета   КАК ВалютаРегл,
	|		РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент         КАК РасчетныйДокумент,
	|		РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
	|		РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения         КАК ДатаВозникновения,
	|		АналитикиУчетаПоПартнерам.ВариантКурсаДоговора             КАК ВариантКурсаДоговора,
	|		РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток         КАК ПредоплатаОстаток,
	|		РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток     КАК ПредоплатаРеглОстаток,
	|		РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток      КАК ПредоплатаУпрОстаток,
	|		РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток               КАК ДолгОстаток,
	|		РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток           КАК ДолгРеглОстаток,
	|		РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток            КАК ДолгУпрОстаток,
	|		ИСТИНА                                                     КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|				&НачалоПериода,
	|				НЕ (АналитикаУчетаПоПартнерам, Валюта, Валюта) В (
	|					ВЫБРАТЬ 
	|						АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам,
	|						АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета,
	|						АналитикиУчетаПоПартнерам.ВалютаУправленческогоУчета
	|					ИЗ
	|						ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|					)
	|			) КАК РасчетыСКлиентамиПоСрокамОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				ПО РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|	ГДЕ
	|		&РасчетыСКлиентами
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиОбороты.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиОбороты.Валюта                            КАК Валюта,
	|		АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета   КАК ВалютаРегл,
	|		РасчетыСКлиентамиОбороты.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|		РасчетыСКлиентамиОбороты.ДатаПлановогоПогашения            КАК ДатаПлановогоПогашения,
	|		РасчетыСКлиентамиОбороты.ДатаВозникновения                 КАК ДатаВозникновения,
	|		АналитикиУчетаПоПартнерам.ВариантКурсаДоговора             КАК ВариантКурсаДоговора,
	|		ВЫБОР КОГДА РасчетыСКлиентамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентамиОбороты.Предоплата
	|			ИНАЧЕ -РасчетыСКлиентамиОбороты.Предоплата
	|		КОНЕЦ                                                      КАК ПредоплатаОстаток,
	|		ВЫБОР КОГДА РасчетыСКлиентамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентамиОбороты.ПредоплатаРегл
	|			ИНАЧЕ -РасчетыСКлиентамиОбороты.ПредоплатаРегл
	|		КОНЕЦ                                                      КАК ПредоплатаРеглОстаток,
	|		ВЫБОР КОГДА РасчетыСКлиентамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентамиОбороты.ПредоплатаУпр
	|			ИНАЧЕ -РасчетыСКлиентамиОбороты.ПредоплатаУпр
	|		КОНЕЦ                                                      КАК ПредоплатаУпрОстаток,
	|		ВЫБОР КОГДА РасчетыСКлиентамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентамиОбороты.Долг
	|			ИНАЧЕ -РасчетыСКлиентамиОбороты.Долг
	|		КОНЕЦ                                                      КАК ДолгОстаток,
	|		ВЫБОР КОГДА РасчетыСКлиентамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентамиОбороты.ДолгРегл
	|			ИНАЧЕ -РасчетыСКлиентамиОбороты.ДолгРегл
	|		КОНЕЦ                                                      КАК ДолгРеглОстаток,
	|		ВЫБОР КОГДА РасчетыСКлиентамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентамиОбороты.ДолгУпр
	|			ИНАЧЕ -РасчетыСКлиентамиОбороты.ДолгУпр
	|		КОНЕЦ                                                      КАК ДолгУпрОстаток,
	|		ИСТИНА                                                     КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				ПО РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|				И (РасчетыСКлиентамиОбороты.Валюта <> АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета
	|						ИЛИ РасчетыСКлиентамиОбороты.Валюта <> АналитикиУчетаПоПартнерам.ВалютаУправленческогоУчета)
	|	ГДЕ
	|		&РасчетыСКлиентами
	|		И РасчетыСКлиентамиОбороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОбороты.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта                        КАК Валюта,
	|		АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета   КАК ВалютаРегл,
	|		РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыСПоставщикамиПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
	|		АналитикиУчетаПоПартнерам.ВариантКурсаДоговора             КАК ВариантКурсаДоговора,
	|		РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток             КАК ПредоплатаОстаток,
	|		РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток         КАК ПредоплатаРеглОстаток,
	|		РасчетыСПоставщикамиПоСрокам.ПредоплатаУпрОстаток          КАК ПредоплатаУпрОстаток,
	|		РасчетыСПоставщикамиПоСрокам.ДолгОстаток                   КАК ДолгОстаток,
	|		РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток               КАК ДолгРеглОстаток,
	|		РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток                КАК ДолгУпрОстаток,
	|		ЛОЖЬ                                                       КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|				&НачалоПериода,
	|				НЕ (АналитикаУчетаПоПартнерам, Валюта, Валюта) В (
	|					ВЫБРАТЬ 
	|						АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам,
	|						АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета,
	|						АналитикиУчетаПоПартнерам.ВалютаУправленческогоУчета
	|					ИЗ
	|						ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|					)
	|			) КАК РасчетыСПоставщикамиПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				ПО АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам
	|	ГДЕ
	|		&РасчетыСПоставщиками
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиОбороты.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиОбороты.Валюта                         КАК Валюта,
	|		АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета   КАК ВалютаРегл,
	|		РасчетыСПоставщикамиОбороты.РасчетныйДокумент              КАК РасчетныйДокумент,
	|		РасчетыСПоставщикамиОбороты.ДатаПлановогоПогашения         КАК ДатаПлановогоПогашения,
	|		РасчетыСПоставщикамиОбороты.ДатаВозникновения              КАК ДатаВозникновения,
	|		АналитикиУчетаПоПартнерам.ВариантКурсаДоговора             КАК ВариантКурсаДоговора,
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПоставщикамиОбороты.Предоплата
	|			ИНАЧЕ -РасчетыСПоставщикамиОбороты.Предоплата
	|		КОНЕЦ                                                      КАК ПредоплатаОстаток,
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПоставщикамиОбороты.ПредоплатаРегл
	|			ИНАЧЕ -РасчетыСПоставщикамиОбороты.ПредоплатаРегл
	|		КОНЕЦ                                                      КАК ПредоплатаРеглОстаток,
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПоставщикамиОбороты.ПредоплатаУпр
	|			ИНАЧЕ -РасчетыСПоставщикамиОбороты.ПредоплатаУпр
	|		КОНЕЦ                                                      КАК ПредоплатаУпрОстаток,
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПоставщикамиОбороты.Долг
	|			ИНАЧЕ -РасчетыСПоставщикамиОбороты.Долг
	|		КОНЕЦ                                                      КАК ДолгОстаток,
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПоставщикамиОбороты.ДолгРегл
	|			ИНАЧЕ -РасчетыСПоставщикамиОбороты.ДолгРегл
	|		КОНЕЦ                                                      КАК ДолгРеглОстаток,
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПоставщикамиОбороты.ДолгУпр
	|			ИНАЧЕ -РасчетыСПоставщикамиОбороты.ДолгУпр
	|		КОНЕЦ                                                      КАК ДолгУпрОстаток,
	|		ЛОЖЬ                                                       КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				ПО РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|				И (РасчетыСПоставщикамиОбороты.Валюта <> АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета
	|						ИЛИ РасчетыСПоставщикамиОбороты.Валюта <> АналитикиУчетаПоПартнерам.ВалютаУправленческогоУчета)
	|	ГДЕ
	|		&РасчетыСПоставщиками
	|		И РасчетыСПоставщикамиОбороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиОбороты.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|) КАК ОстаткиИОбороты
	|		
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиИОбороты.АналитикаУчетаПоПартнерам ,
	|	ОстаткиИОбороты.ОбъектРасчетов,
	|	ОстаткиИОбороты.Валюта,
	|	ОстаткиИОбороты.ВалютаРегл,
	|	ОстаткиИОбороты.РасчетныйДокумент,
	|	ОстаткиИОбороты.ДатаПлановогоПогашения,
	|	ОстаткиИОбороты.ДатаВозникновения,
	|	ОстаткиИОбороты.ВариантКурсаДоговора,
	|	ОстаткиИОбороты.ЭтоРасчетыСКлиентами
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиИОбороты.ПредоплатаОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ПредоплатаРеглОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ПредоплатаУпрОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ДолгОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ДолгРеглОстаток) <> 0
	|	ИЛИ СУММА(ОстаткиИОбороты.ДолгУпрОстаток) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаКонецДня.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиНаКонецДня.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ОстаткиНаКонецДня.Валюта                                         КАК Валюта,
	|	ОстаткиНаКонецДня.ВалютаРегл                                     КАК ВалютаРегл,
	|	ОстаткиНаКонецДня.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	ОстаткиНаКонецДня.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	ОстаткиНаКонецДня.ДатаВозникновения                              КАК ДатаВозникновения,
	|	АналитикиУчетаПоПартнерам.ВариантКурсаДоговора                   КАК ВариантКурсаДоговора,
	|	АналитикиУчетаПоПартнерам.ПереоцениватьТоварыУслугиКОтчетуКомитенту КАК ПереоцениватьТоварыУслугиКОтчетуКомитенту,
	|	ОстаткиНаКонецДня.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	ОстаткиНаКонецДня.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	ОстаткиНаКонецДня.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	ОстаткиНаКонецДня.ДолгОстаток                                    КАК ДолгОстаток,
	|	ОстаткиНаКонецДня.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ОстаткиНаКонецДня.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЧислитель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДокументам.КурсЧислительВалютыВзаиморасчетов,1)
	|		ИНАЧЕ 
	|			ЕСТЬNULL(КурсыВалют.КурсЧислитель,1)
	|	КОНЕЦ                                                                           КАК КурсЧислительРегл,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЗнаменатель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДокументам.КурсЗнаменательВалютыВзаиморасчетов,1)
	|		ИНАЧЕ
	|			ЕСТЬNULL(КурсыВалют.КурсЗнаменатель,1)
	|	КОНЕЦ                                                                           КАК КурсЗнаменательРегл,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|					И ОстаткиНаКонецДня.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЧислитель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА 
	|				ЕСТЬNULL(КурсыВалютПоДокументам.КурсЧислительВалютыУправленческогоУчета,1)
	|		ИНАЧЕ
	|			ЕСТЬNULL(КурсВалютыУпр.КурсЧислитель,1)
	|	КОНЕЦ                                                                           КАК КурсЧислительУпр,
	|	ВЫБОР КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|					И ОстаткиНаКонецДня.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ЕСТЬNULL(КурсыВалютПоДоговорам.КурсЗнаменатель,1)
	|		КОГДА АналитикиУчетаПоПартнерам.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|				И ОстаткиНаКонецДня.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|			ТОГДА 
	|				ЕСТЬNULL(КурсыВалютПоДокументам.КурсЗнаменательВалютыУправленческогоУчета,1)
	|		ИНАЧЕ 
	|			ЕСТЬNULL(КурсВалютыУпр.КурсЗнаменатель,1)
	|	КОНЕЦ                                                                           КАК КурсЗнаменательУпр,
	|	ОстаткиНаКонецДня.ЭтоРасчетыСКлиентами                                          КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ ВтОстаткиСКурсами
	|ИЗ
	|	втОстаткиНаКонецДня КАК ОстаткиНаКонецДня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|			ПО ОстаткиНаКонецДня.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ГраницаКонецДня, Валюта = &ВалютаУправленческогоУчета) КАК КурсВалютыУпр
	|			ПО ОстаткиНаКонецДня.ВалютаРегл = КурсВалютыУпр.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ГраницаКонецДня, ) КАК КурсыВалют
	|			ПО ОстаткиНаКонецДня.Валюта = КурсыВалют.Валюта
	|			И ОстаткиНаКонецДня.ВалютаРегл = КурсыВалют.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(&ГраницаКонецДня, ) КАК КурсыВалютПоДоговорам
	|			ПО КурсыВалютПоДоговорам.Договор = АналитикиУчетаПоПартнерам.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыИКурсыДокументов КАК КурсыВалютПоДокументам
	|			ПО ОстаткиНаКонецДня.ОбъектРасчетов.Объект = КурсыВалютПоДокументам.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиСКурсами.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ВтОстаткиСКурсами.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВтОстаткиСКурсами.Валюта                                         КАК Валюта,
	|	ВтОстаткиСКурсами.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	ВтОстаткиСКурсами.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	ВтОстаткиСКурсами.ДатаВозникновения                              КАК ДатаВозникновения,
	|	ВтОстаткиСКурсами.ВариантКурсаДоговора                           КАК ВариантКурсаДоговора,
	|	ВтОстаткиСКурсами.ПереоцениватьТоварыУслугиКОтчетуКомитенту      КАК ПереоцениватьТоварыУслугиКОтчетуКомитенту,
	|	ВтОстаткиСКурсами.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	ВтОстаткиСКурсами.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	ВтОстаткиСКурсами.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРасход, 0)                            КАК ДолгРасход,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРеглРасход, 0)                        КАК ДолгРеглРасход,
	|	ВтОстаткиСКурсами.ДолгОстаток                                    КАК ДолгОстаток,
	|	ВтОстаткиСКурсами.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ВтОстаткиСКурсами.КурсЧислительРегл 
	|		/ ВтОстаткиСКурсами.КурсЗнаменательРегл                      КАК КурсРегл,
	|	ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|		* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл КАК ЧИСЛО(31,2)) КАК ДолгРеглОстатокРасчетный,
	|	ВтОстаткиСКурсами.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|		* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл
	|			/ ВтОстаткиСКурсами.КурсЧислительУпр * ВтОстаткиСКурсами.КурсЗнаменательУпр КАК ЧИСЛО(31,2)) КАК ДолгУпрОстатокРасчетный,
	|	ВтОстаткиСКурсами.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ ВтКРасчету
	|ИЗ
	|	ВтОстаткиСКурсами КАК ВтОстаткиСКурсами
	|	ЛЕВОЕ СОЕДИНЕНИЕ втОборотыЗаДень КАК ОборотыЗаДень
	|		ПО ВтОстаткиСКурсами.АналитикаУчетаПоПартнерам = ОборотыЗаДень.АналитикаУчетаПоПартнерам
	|			И ВтОстаткиСКурсами.ОбъектРасчетов = ОборотыЗаДень.ОбъектРасчетов
	|			И ВтОстаткиСКурсами.Валюта = ОборотыЗаДень.Валюта
	|			И ВтОстаткиСКурсами.РасчетныйДокумент = ОборотыЗаДень.РасчетныйДокумент
	|			И ВтОстаткиСКурсами.ДатаПлановогоПогашения = ОборотыЗаДень.ДатаПлановогоПогашения
	|			И ВтОстаткиСКурсами.ДатаВозникновения = ОборотыЗаДень.ДатаВозникновения
	|ГДЕ
	|	(НЕ ОборотыЗаДень.ОбъектРасчетов ЕСТЬ NULL
	|		ИЛИ &ДатаРасчета = КОНЕЦПЕРИОДА(&ДатаРасчета, МЕСЯЦ)
	|		ИЛИ &ПереоценкаПоДням)
	|	И (ВтОстаткиСКурсами.ДолгРеглОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл КАК ЧИСЛО(31,2)) >= 0.01 
	|		ИЛИ ВтОстаткиСКурсами.ДолгРеглОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл КАК ЧИСЛО(31,2)) <= -0.01 
	|		ИЛИ ВтОстаткиСКурсами.ДолгУпрОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл
	|				/ ВтОстаткиСКурсами.КурсЧислительУпр * ВтОстаткиСКурсами.КурсЗнаменательУпр КАК ЧИСЛО(31,2)) >= 0.01
	|		ИЛИ ВтОстаткиСКурсами.ДолгУпрОстаток
	|			- ВЫРАЗИТЬ(ВтОстаткиСКурсами.ДолгОстаток 
	|			* ВтОстаткиСКурсами.КурсЧислительРегл / ВтОстаткиСКурсами.КурсЗнаменательРегл
	|				/ ВтОстаткиСКурсами.КурсЧислительУпр * ВтОстаткиСКурсами.КурсЗнаменательУпр КАК ЧИСЛО(31,2)) <= -0.01
	|		ИЛИ ВтОстаткиСКурсами.ПредоплатаОстаток = 0
	|			И (ВтОстаткиСКурсами.ПредоплатаРеглОстаток <> 0
	|				ИЛИ ВтОстаткиСКурсами.ПредоплатаУпрОстаток <> 0)
	|		ИЛИ ВтОстаткиСКурсами.ДолгОстаток = 0
	|			И (ВтОстаткиСКурсами.ДолгРеглОстаток <> 0
	|				ИЛИ ВтОстаткиСКурсами.ДолгУпрОстаток <> 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиНаКонецДня.ОбъектРасчетов              КАК ОбъектРасчетов,
	|	ОстаткиНаКонецДня.АналитикаУчетаПоПартнерам   КАК АналитикаУчетаПоПартнерам,
	|	ОстаткиНаКонецДня.Валюта                      КАК Валюта,
	|	ОстаткиНаКонецДня.ЭтоРасчетыСКлиентами        КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ втАналитикаОстатков
	|ИЗ 
	|	втОстаткиНаКонецДня КАК ОстаткиНаКонецДня
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	АналитикаУчетаПоПартнерам,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка                      КАК Ссылка,
	|	РегистраторРасчетов.ОбъектРасчетов              КАК ОбъектРасчетов,
	|	РегистраторРасчетов.АналитикаУчетаПоПартнерам   КАК АналитикаУчетаПоПартнерам,
	|	РегистраторРасчетов.Валюта                      КАК ВалютаРасчетов,
	|	АналитикаОстатков.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
	|	КОЛИЧЕСТВО(ЕСТЬNULL(Таблица.НомерСтроки,0))     КАК ВсегоЗаписей
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАналитикаОстатков КАК АналитикаОстатков
	|			ПО АналитикаОстатков.ОбъектРасчетов = РегистраторРасчетов.ОбъектРасчетов
	|				И АналитикаОстатков.АналитикаУчетаПоПартнерам = РегистраторРасчетов.АналитикаУчетаПоПартнерам
	|				И АналитикаОстатков.Валюта = РегистраторРасчетов.Валюта
	|				И РегистраторРасчетов.ТипРасчетов = &ТипРасчетов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
	|			ПО Таблица.Регистратор = РегистраторРасчетов.Ссылка
	|		
	|СГРУППИРОВАТЬ ПО
	|	РегистраторРасчетов.Ссылка,
	|	РегистраторРасчетов.ОбъектРасчетов,
	|	РегистраторРасчетов.АналитикаУчетаПоПартнерам,
	|	РегистраторРасчетов.Валюта,
	|	АналитикаОстатков.ЭтоРасчетыСКлиентами
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЕСТЬNULL(Таблица.НомерСтроки,0)) < &РазмерПорции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентамиОбороты.Регистратор                       КАК Регистратор,
	|	ИСТИНА                                                     КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|			ПО РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	&РасчетыСКлиентами
	|	И РасчетыСКлиентамиОбороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОбороты.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщикамиОбороты.Регистратор                    КАК Регистратор,
	|	ЛОЖЬ                                                       КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|			ПО РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	&РасчетыСПоставщиками
	|	И РасчетыСПоставщикамиОбороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиОбороты.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	Т.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	Т.ВалютаРасчетов                                 КАК ВалютаРасчетов,
	|	Т.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|	Т.Организация                                    КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВтКРасчету.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|		ВтКРасчету.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|		ВтКРасчету.Валюта                            КАК ВалютаРасчетов,
	|		ВтКРасчету.ЭтоРасчетыСКлиентами              КАК ЭтоРасчетыСКлиентами,
	|		Аналитика.Организация                        КАК Организация
	|	ИЗ ВтКРасчету КАК ВтКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ВтКРасчету.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтКРасчету.ЭтоРасчетыСКлиентами                  КАК ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов                        КАК ОбъектРасчетов,
	|	ВтКРасчету.Валюта                                КАК ВалютаРасчетов,
	|	ВтКРасчету.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения                КАК ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения                     КАК ДатаВозникновения,
	|	ВтКРасчету.ВариантКурсаДоговора                  КАК ВариантКурсаДоговора,
	|	ВтКРасчету.ДолгРеглОстаток                       КАК ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный              КАК ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток                        КАК ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный               КАК ДолгУпрОстатокРасчетный,
	|	ВтКРасчету.ПредоплатаОстаток                     КАК ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток                 КАК ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток                  КАК ПредоплатаУпрОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыСКлиентами.ПорядокЗачета, ЕСТЬNULL(РасчетыСПоставщиками.ПорядокЗачета,""""))) КАК ПорядокЗачета,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыСКлиентами.ВалютаДокумента, ЕСТЬNULL(РасчетыСПоставщиками.ВалютаДокумента,""""))) КАК ВалютаДокумента
	|ИЗ ВтКРасчету КАК ВтКРасчету
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|		ПО ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыСКлиентами.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыСКлиентами.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыСКлиентами.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыСКлиентами.ДатаПлановогоПогашения
	|			И РасчетыСКлиентами.Активность
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|		ПО НЕ ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыСПоставщиками.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыСПоставщиками.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыСПоставщиками.ДатаПлановогоПогашения
	|			И РасчетыСПоставщиками.Активность
	|СГРУППИРОВАТЬ ПО
	|	ВтКРасчету.ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов,
	|	ВтКРасчету.Валюта,
	|	ВтКРасчету.РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения,
	|	ВтКРасчету.ВариантКурсаДоговора,
	|	ВтКРасчету.ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток,
	|	ВтКРасчету.ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный";
	#КонецОбласти

	Если ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
		Запрос.УстановитьПараметр("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
		Запрос.УстановитьПараметр("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Параметры.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("РасчетыСКлиентами", ЭтоРасчетыСКлиентами = Неопределено ИЛИ ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("РасчетыСПоставщиками", ЭтоРасчетыСКлиентами = Неопределено ИЛИ НЕ ЭтоРасчетыСКлиентами);
	
	ГраницаКонецДня = Новый Граница(КонецДня(Период),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период));
	Запрос.УстановитьПараметр("ГраницаКонецДня", ГраницаКонецДня);
	Запрос.УстановитьПараметр("ДатаРасчета", Период);
	Запрос.УстановитьПараметр("РазмерПорции", РазмерПорцииЗаписи());
	Если ПереоценкаПоДням = Неопределено Тогда
		ПереоценкаПоДням = Константы.ПереоцениватьВалютныеСредстваПоДням.Получить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ПереоценкаПоДням", ПереоценкаПоДням);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ПоследнийИндекс = РезультатыЗапроса.ВГраница();
	ПоляПоиска = "ЭтоРасчетыСКлиентами, АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов"; 
	ОбъектыКПереоценке = РезультатыЗапроса[ПоследнийИндекс-1].Выгрузить();
	Параметры.ВсегоОбработано = Параметры.ВсегоОбработано + ОбъектыКПереоценке.Количество();
	ДетальныеЗаписи    = РезультатыЗапроса[ПоследнийИндекс].Выгрузить();
	ДетальныеЗаписи.Индексы.Добавить(ПоляПоиска);
	КурсовыеРазницыКУдалению = РезультатыЗапроса[ПоследнийИндекс-2].Выгрузить();
	РегистраторыРасчетов = РезультатыЗапроса[ПоследнийИндекс-3].Выгрузить();
	РегистраторыРасчетов.Индексы.Добавить(ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Порядок = Порядок(Период,"",Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99");
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Если ЭтоРасчетыСКлиентами Тогда
		ПереоценкаПоложительная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль;
		ПереоценкаОтрицательная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток;
		ПереоценкаПоложительнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль;
		ПереоценкаОтрицательнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток;
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
	Иначе
		ПереоценкаПоложительная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток;
		ПереоценкаОтрицательная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль;
		ПереоценкаПоложительнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток;
		ПереоценкаОтрицательнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль;
		НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
	Для Каждого СтрокаПереоценки Из ОбъектыКПереоценке Цикл
		
		Если СтрокаПереоценки.ЭтоРасчетыСКлиентами Тогда
		Иначе
		КонецЕсли;
		
		Если Параметры.ДокументыПереоценки.Количество() = 1 Тогда
			ДокументРегистратор = Параметры.ДокументыПереоценки[0].Ссылка; //ДокументСсылка
		Иначе
			СтруктураПоискаДокумента = Новый Структура("Дата, Организация", НачалоМесяца(Период), СтрокаПереоценки.Организация);
			НайденныеДокументы = Параметры.ДокументыПереоценки.НайтиСтроки(СтруктураПоискаДокумента);// Массив из СтрокаТаблицыЗначений
			ДокументРегистратор = НайденныеДокументы[0].Ссылка; //ДокументСсылка
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереоценки);
		СтрокиДетальныхЗаписей = ДетальныеЗаписи.НайтиСтроки(СтруктураПоиска);
		
		НовСтр = ТаблицаИзменений.Добавить();
		НовСтр.Регистратор = ДокументРегистратор.Ссылка;
		
		Если СтрокиДетальныхЗаписей.Количество() > 0 И НЕ Параметры.ПерезаполнениеРегистровНУ Тогда
			ТаблицаСвободныхРегистраторов = РегистраторыКурсовыхРазниц(СтрокаПереоценки, РегистраторыРасчетов, СтрокиДетальныхЗаписей.Количество() * 4);
			счРегистратор = 0;
			счСтрок = 0;
			
			РегистраторРасчетов = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
			НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
			НаборЗаписей.Прочитать();
			УдалитьКурсовыеРазницыЗаДень(Период, НаборЗаписей);
			СтрокаКУдалению = КурсовыеРазницыКУдалению.Найти(РегистраторРасчетов,"Регистратор");
			Если СтрокаКУдалению <> Неопределено Тогда
				КурсовыеРазницыКУдалению.Удалить(СтрокаКУдалению);
			КонецЕсли;
			
			Для Каждого СтрокаДетальныхЗаписей Из СтрокиДетальныхЗаписей Цикл
				
				#Область ПоложительнаяКурсоваяРазница
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаПоложительнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область ОтрицательнаяКурсоваяРазница
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаОтрицательнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстаток - СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстаток - СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область КорректировкаПредоплатыВНоль
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаПоложительнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0 Тогда
						НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0 Тогда
						НовСтр.ПредоплатаУпр = СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = НачалоДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаОтрицательнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);
					
					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0 Тогда
						НовСтр.ПредоплатаРегл = -СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0 Тогда
						НовСтр.ПредоплатаУпр = -СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла; //по объектам переоценки
	
	
	Для Каждого СтрокаКУдалению Из КурсовыеРазницыКУдалению Цикл
		
		Если СтрокаКУдалению.ЭтоРасчетыСКлиентами Тогда
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
		
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаКУдалению.Регистратор);
		НаборЗаписей.Прочитать();
		Если УдалитьКурсовыеРазницыЗаДень(Период, НаборЗаписей) Тогда
			НаборЗаписей.Записать(); //удалим старые курсовые разницы
		КонецЕсли;
	КонецЦикла;
	
	ПоляСворачивания = "Регистратор";
	ТаблицаИзменений.Свернуть(ПоляСворачивания);
	
	Если ЭтоРасчетыСКлиентами <> Неопределено Тогда
		Для Каждого Организация Из МассивОрганизаций Цикл
			
			ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
				Период, Период,
				ЭтоРасчетыСКлиентами);
			ДокументРегистратор = ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
			
			Если ЭтоРасчетыСКлиентами Тогда
				НаборДвиженийПоДокументам = РегистрыНакопления.РасчетыСКлиентамиПоДокументам.СоздатьНаборЗаписей();
			Иначе
				НаборДвиженийПоДокументам = РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.СоздатьНаборЗаписей();
			КонецЕсли;
			
			НаборДвиженийПоДокументам.Отбор.Регистратор.Установить(ДокументРегистратор);
			НаборДвиженийПоДокументам.Прочитать();
			Если НаборДвиженийПоДокументам.Количество() > 0 Тогда
				НаборДвиженийПоДокументам.Очистить();
				НаборДвиженийПоДокументам.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает строковый порядок документа по переданным параметрам.
// 
// Параметры:
// 	Дата - Дата - Дата по которой нужно сделать строковый порядок.
// 	Номер - Строка - Номер документа.
// 	ТипДокумента - Тип - Тип ссылки документа.
// 	Вид - Строка - 1 Заказы, график исполнения договора.
//									2 Накладные;
//									3 Корректировки реализации в минус;
//									4 Оплаты, возвраты.
// 	Тип - Строка,Число - см. НомерТипа.
// Возвращаемое значение:
// 	Строка - Описание
Функция Порядок(Дата, Номер, ТипДокумента, Вид, Тип = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Дата) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	ДатаСтрокой = Формат(Дата, "ДФ=yyyyMMddHHmmss");
	Если Тип = Неопределено Тогда
		Тип = НомерТипа(ТипДокумента);
	КонецЕсли;
	Возврат Лев(ДатаСтрокой, 8) + Вид + Прав(ДатаСтрокой, 6) + Тип + Номер;
КонецФункции

// Возвращает структуру параметров, необходимых для заполнения регистров взаиморасчетов в новой архитектуре.
// 
// Возвращаемое значение:
//  Структура - Структура параметров заполнения взаиморасчетов:
// * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - объект расчетов, в рамках которого происходит распределение взаиморасчетов.
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - аналитика, в рамках которой происходит распределение взаиморасчетов.
// * ВалютаРасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// * ЭтоРасчетыСКлиентами - Булево - Определяет регистры для заполнения - с клиентами или с поставщиками.
// * ПорядокФакт - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// * ПорядокПлан - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// * НачальноеЗаполнение - Булево - Истина, если это начальное заполнение.
// * Регистратор - ДокументСсылка, Неопределено - Документ регистратор, инициировавший распределение.
// * ДополнительныеСвойстваПроведения - Структура - Структура дополнительных свойств проведения, транслируемая из регистров накопления РасчетыСКлиентами РасчетыСПоставщиками:
// ** МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Дополняется таблицей сформированных движений для дальнейшего использования в регл и упр учете
// * ЗаписыватьИзменения - Булево - Ложь, если требуется получить таблицу сформированных движений без записи документов.
Функция СтруктураПараметровЗаполненияВзаиморасчетов() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	Структура.Вставить("АналитикаУчетаПоПартнерам", Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка());
	Структура.Вставить("ВалютаРасчетов", Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("ЭтоРасчетыСКлиентами", Истина);
	Структура.Вставить("ПорядокФакт","");
	Структура.Вставить("ПорядокПлан","");
	Структура.Вставить("НачальноеЗаполнение", Ложь);
	Структура.Вставить("Регистратор", Неопределено);
	Структура.Вставить("ДополнительныеСвойстваПроведения", Неопределено);
	Структура.Вставить("ЗаписыватьИзменения", Истина);
	
	Возврат Структура;
	
КонецФункции

//Возвращает таблицу служебных документов РегистраторРасчетов для перезаписи по переданным параметрам.
//
// Параметры:
//	Параметры - Структура - Описание:
//		* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - Объект расчетов.
//		* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика взаиморасчетов.
//		* Валюта - СправочникСсылка.Валюты - Валюта взаиморасчетов.
//		* ЭтоРасчетыСКлиентами - Булево - это расчеты с клиентами, а не с поставщиками.
//		* Организация - Неопределено, СправочникСсылка.Организации - Организация расчета.
//	ИмяТаблицы - Строка - Имя регистра накопления, по которому определятся свободный регистратор или нет.
//	КоличествоЗаписей - Число - Количество записей для последующей записи в регистр.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со следующими колонками:
//		* Ссылка - ДокументСсылка.РегистраторРасчетов - найденный служебный документ;
//		* ТребуетсяОчистка - Булево - У данного документа есть движения в переданной таблице.
//
Функция СвободныеРегистраторыРасчетов(Параметры, ИмяТаблицы, КоличествоЗаписей)
	
	Если КоличествоЗаписей = 0 Тогда
		КоличествоРегистраторов = 0;
	Иначе
		КоличествоРегистраторов = Цел(КоличествоЗаписей/РазмерПорцииЗаписи()) + 1;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры,ИмяТаблицы + "Регистраторы") Тогда
		СписокПолныхРегистраторов = Параметры[ИмяТаблицы + "Регистраторы"];
	Иначе
		СписокПолныхРегистраторов = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта",                    Параметры.ВалютаРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Параметры.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ОбъектРасчетов",            Параметры.ОбъектРасчетов);
	Запрос.УстановитьПараметр("СписокПолныхРегистраторов", СписокПолныхРегистраторов);
	
	ТипРасчетов = ?(Параметры.ЭтоРасчетыСКлиентами, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Если Параметры.УчитыватьКоличествоЗаписейРегистраторовРасчетов Тогда
		
		Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КоличествоЗаписейРегистраторовРасчетов.Документ КАК Ссылка,
		|	СУММА(КоличествоЗаписейРегистраторовРасчетов.КоличествоЗаписей) > 0 КАК ТребуетсяОчистка
		|ИЗ
		|	РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК КоличествоЗаписейРегистраторовРасчетов
		|ГДЕ
		|	КоличествоЗаписейРегистраторовРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И КоличествоЗаписейРегистраторовРасчетов.ОбъектРасчетов = &ОбъектРасчетов
		|	И КоличествоЗаписейРегистраторовРасчетов.Валюта = &Валюта
		|	И КоличествоЗаписейРегистраторовРасчетов.ИмяТаблицы = &ИмяТаблицы
		|	И НЕ КоличествоЗаписейРегистраторовРасчетов.Документ В (&СписокПолныхРегистраторов)
		|СГРУППИРОВАТЬ ПО
		|	КоличествоЗаписейРегистраторовРасчетов.Документ";
		
	Иначе
		
		Запрос.УстановитьПараметр("ТипРасчетов", ТипРасчетов);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегистраторРасчетов.Ссылка                КАК Ссылка,
		|	СУММА(ЕСТЬNULL(Таблица.НомерСтроки,0)) > 0 КАК ТребуетсяОчистка
		|ИЗ
		|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ИмяТаблицы КАК Таблица
		|			ПО Таблица.Регистратор = РегистраторРасчетов.Ссылка
		|ГДЕ
		|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
		|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И РегистраторРасчетов.Валюта                    = &Валюта
		|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
		|	И НЕ РегистраторРасчетов.Ссылка В (&СписокПолныхРегистраторов)
		|СГРУППИРОВАТЬ ПО
		|	РегистраторРасчетов.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", "РегистрНакопления."+ИмяТаблицы);
		
	КонецЕсли;
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить(); // см.СвободныеРегистраторыРасчетов
	
	Пока ТаблицаДокументов.Количество() < КоличествоРегистраторов Цикл
		ДокументОбъект = Документы.РегистраторРасчетов.СоздатьДокумент();
		ДокументОбъект.Валюта = Параметры.ВалютаРасчетов;
		ДокументОбъект.АналитикаУчетаПоПартнерам = Параметры.АналитикаУчетаПоПартнерам;
		ДокументОбъект.Организация = ?(Параметры.Организация = Неопределено,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.АналитикаУчетаПоПартнерам, "Организация"),
										Параметры.Организация);
		ДокументОбъект.ОбъектРасчетов = Параметры.ОбъектРасчетов;
		ДокументОбъект.ТипРасчетов = ТипРасчетов;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НовСтр = ТаблицаДокументов.Добавить();
		НовСтр.Ссылка = ДокументОбъект.Ссылка;
		НовСтр.ТребуетсяОчистка = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

//Выполняет первоначальное заполнение регистров новой архитектуры
//
// Параметры:
//	Параметры - Структура - параметры обработчика ожидания
//	УникальныйИдентификатор - УникальныйИдентификатор - идентификатор обработчика ожидания.
//
Процедура ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(Параметры, УникальныйИдентификатор) Экспорт
	
	Если НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами возможно только после завершения отложенного обновления.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
		
		Если НЕ Параметры.Свойство("ПовторныйЗапуск") Тогда
			ЗаполнитьРегистрПереходаНаОнлайн();
		КонецЕсли;
		Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Не удалось заполнить регистр перехода.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ОписаниеЗамераПерехода = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ПереходНаНовуюАрхитектуру.Многопоточный");
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ОписаниеЗамераПерехода = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ПереходНаНовуюАрхитектуру.ФайловаяБаза");
	КонецЕсли;
	Если НЕ Параметры.Свойство("ПовторныйЗапуск") Тогда
		ОчиститьРегистрыВзаиморасчетов();
		ВключитьИтогиРегистровРасчетов();
	КонецЕсли;
	
	//Фаза 1 - основной перенос
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВсегоОбработано = ВыполнитьПереносОфлайнВзаиморасчетов();
	Иначе
		ПараметрыМП = ПараметрыМногопоточнойОбработкиРасчетов();
		ПараметрыМП.Процедура.Имя = "ОперативныеВзаиморасчетыСервер.ВыполнитьПереносОфлайнВзаиморасчетов";
		ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Перенос офлайн взаиморасчетов'");
		ПараметрыМП.Данные.УсловиеЗапроса = "Задания.ДатаПересчета = ДАТАВРЕМЯ(1,1,1)";
		
		ВсегоОбработано = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
	КонецЕсли;
	
	
	//Фаза 2 - перенос хвостов (перепроведенные за время основного переноса)
	НомерПопытки = 0;
	Пока НомерПопытки < 5 Цикл
		Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Установить(Ложь);
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ВсегоОбработано = ВсегоОбработано + ВыполнитьПереносОфлайнВзаиморасчетов();
			Иначе
				ПараметрыМП.Данные.УсловиеЗапроса = "";
				КоличествоЗаписей = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
				
				ВсегоОбработано = ВсегоОбработано + КоличествоЗаписей; 
			КонецЕсли;
			
			// Исправим развернутое сальдо.
			ИсправитьРазвернутоеСальдо(НачалоМесяца(ТекущаяДатаСеанса()));
			
			Константы.НоваяАрхитектураВзаиморасчетов.Установить(Истина);
			ХранилищеОбщихНастроек.Удалить("ПереходНаНовуюАрхитектуруВзаиморасчетов", "ВсегоКПереносу", Неопределено);
			
			ЗафиксироватьТранзакцию();
			
			Прервать;// Выходим из цикла попыток блокировки
			
		Исключение
			ОтменитьТранзакцию();
			
			НомерПопытки = НомерПопытки + 1;
			Текст =  НСтр("ru = 'Попытка'", ОбщегоНазначения.КодОсновногоЯзыка())+ " №" + НомерПопытки + Символы.ПС + Символы.ПС;
			Событие = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Этап 2.'", 
							ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,,, Текст + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если НомерПопытки >= 5 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось завершить переход на онлайн взаиморасчеты. 
				|Ошибки см. в журнале регистрации.'");
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераПерехода, ВсегоОбработано);
	
КонецПроцедуры

//Очищает новые регистры расчетов в транзакции с блокировкой всех расчетов.
Процедура ОчиститьРегистрыПриВыключенииНовойАрхитектуры(Параметры = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВернутьДвиженияПоРасчетамСКлиентами();
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выключение онлайн взаиморасчетов с партнерами.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
	ОчиститьРегистрыВзаиморасчетов();
	
	УдалитьСистемныеКорректировкиРегистров(Дата(1,1,1));
		
	ВключитьИтогиРегистровРасчетов();
	
КонецПроцедуры

//Заполнение новых регистров по всем объектам расчетов.
Процедура ЗаполнитьПоВсемРасчетам(НачальноеЗаполнение = Ложь) Экспорт
	
	ОчиститьРегистрыВзаиморасчетов();
	
	ТаблицаОбъектовСКорЧастью = ПолучитьВсеОбъекты();
	ТаблицаОбъектовСКорЧастью.Индексы.Добавить("ОбъектРасчетов,АналитикаУчетаПоПартнерам");
	
	ТаблицаОбъектов = ТаблицаОбъектовСКорЧастью.Скопировать();
	ТаблицаОбъектов.Свернуть("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ЭтоРасчетыСКлиентами");
	
	ТаблицаОбъектовДляПовторнойОбработки = ТаблицаОбъектов.Скопировать();
	ТаблицаОбъектовДляПовторнойОбработки.Очистить();
	
	сч=0;
	Пока сч < ТаблицаОбъектов.Количество() Цикл
		
		СтрокаТаблицы = ТаблицаОбъектов[сч];
		
		СтруктураПоиска = Новый Структура("ОбъектРасчетов,АналитикаУчетаПоПартнерам", СтрокаТаблицы.ОбъектРасчетов, СтрокаТаблицы.АналитикаУчетаПоПартнерам);
		СтрокиКорЧасти = ТаблицаОбъектовСКорЧастью.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрокаТаблицыКорЧасти Из СтрокиКорЧасти Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрокаТаблицыКорЧасти.КорОбъектРасчетов) Тогда
				СтруктураПоиска = Новый Структура("ОбъектРасчетов,АналитикаУчетаПоПартнерам", НайденнаяСтрокаТаблицыКорЧасти.КорОбъектРасчетов, НайденнаяСтрокаТаблицыКорЧасти.КорАналитикаУчетаПоПартнерам);
				СтрокиТаблицы = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрокаТаблицы Из СтрокиТаблицы Цикл
					Если ТаблицаОбъектов.Индекс(НайденнаяСтрокаТаблицы) > сч Тогда
						НовСтр = ТаблицаОбъектовДляПовторнойОбработки.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицы);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры,СтрокаТаблицы);
		ОсновныеПараметры.НачальноеЗаполнение = НачальноеЗаполнение;
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
		сч = сч +1;
		
	КонецЦикла;
	
	ТаблицаОбъектовДляПовторнойОбработки.Свернуть("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ЭтоРасчетыСКлиентами");
	
	сч=0;
	Пока сч < ТаблицаОбъектовДляПовторнойОбработки.Количество() Цикл
		
		СтрокаТаблицы = ТаблицаОбъектовДляПовторнойОбработки[сч];
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры,СтрокаТаблицы);
		ОсновныеПараметры.НачальноеЗаполнение = НачальноеЗаполнение;
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
		сч = сч +1;
		
	КонецЦикла;
	
КонецПроцедуры

//Заполнение новых регистров плановых оплат и отгрузок по всем объектам расчетов.
Процедура ЗаполнитьПлановыеРасчеты(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	ТаблицаОбъектов = ПолучитьВсеОбъекты();
	ТаблицаОбъектов.Колонки.Добавить("ПорядокПлан",ОбщегоНазначения.ОписаниеТипаСтрока(28));
	ТаблицаОбъектов.Колонки.Добавить("ПорядокФакт",ОбщегоНазначения.ОписаниеТипаСтрока(28));
	ТаблицаОбъектов.ЗаполнитьЗначения("30000101","ПорядокФакт");
	Для Каждого Стр из ТаблицаОбъектов Цикл
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры,Стр);
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

#Область ИсправлениеОшибок

// Формирует текст запроса для поиска некорректных данных в расчетных регистрах. 
// 
// Параметры:
// 	ИмяВТ - Строка - Имя временной таблицы для помещения результата
// 	БезРучныхКорректировок - Булево - необходимость исключения из результата запроса Аналитик расчетов по партнерам 
// 	                                  и Объектов расчетов, по которым введены ручные корректировки регистров.
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам(ИмяВТ = "", БезРучныхКорректировок = Истина) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ключи.Ссылка      КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация КАК Организация
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Организация В (&МассивОрганизаций)
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ВложенныйЗапрос.Период) КАК Период
		|ПОМЕСТИТЬ ПериодВводаОстатков
		|ИЗ (
		|	ВЫБРАТЬ
		|		Ввод.Дата КАК Период
		|	ИЗ
		|		Документ.ВводОстатковВзаиморасчетов КАК Ввод
		|	ГДЕ
		|		Ввод.Проведен
		|	) КАК ВложенныйЗапрос
		|;
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ТипРасчетов                           КАК ТипРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.Валюта                                КАК Валюта,
		|	СУММА(ВложенныйЗапрос.Сумма)                          КАК Сумма,
		|	СУММА(ВложенныйЗапрос.СуммаПоСрокам)                  КАК СуммаПоСрокам
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ (ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентами.ОбъектРасчетов                                КАК ОбъектРасчетов,
		|		РасчетыСКлиентами.Валюта                                        КАК Валюта,
		|		
		|		РасчетыСКлиентами.СуммаОстаток                                  КАК Сумма,
		|		0                                                               КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентами
		|	ГДЕ
		|		РасчетыСКлиентами.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)                     КАК ТипРасчетов,
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам                                 КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов                                            КАК ОбъектРасчетов,
		|		РасчетыСКлиентамиПоСрокам.Валюта                                                    КАК Валюта,
		|		
		|		0                                                                                   КАК Сумма,
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток - РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентамиПоСрокам
		|	ГДЕ
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток <> 0
		|		ИЛИ РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщиками.ОбъектРасчетов                                КАК ОбъектРасчетов,
		|		РасчетыСПоставщиками.Валюта                                        КАК Валюта,
		|		
		|		РасчетыСПоставщиками.СуммаОстаток                                  КАК Сумма,
		|		0                                                                  КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщиками
		|	ГДЕ
		|		РасчетыСПоставщиками.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)                        КАК ТипРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам                                    КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                                               КАК ОбъектРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.Валюта                                                       КАК Валюта,
		|		
		|		0                                                                                         КАК Сумма,
		|		РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток - РасчетыСПоставщикамиПоСрокам.ДолгОстаток КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщикамиПоСрокам
		|	ГДЕ
		|		РасчетыСПоставщикамиПоСрокам.ДолгОстаток <> 0
		|		ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток <> 0) КАК ВложенныйЗапрос
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодВводаОстатков КАК ПериодВводаОстатков
		|		ПО ИСТИНА
		|ГДЕ
		|	&НачалоМесяца > ЕСТЬNULL(ПериодВводаОстатков.Период, ДАТАВРЕМЯ(1,1,1))
		|СГРУППИРОВАТЬ ПО 
		|	ВложенныйЗапрос.ТипРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.Валюта
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.СуммаПоСрокам) <> СУММА(ВложенныйЗапрос.Сумма)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)    КАК ТипРасчетов,
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов                                     КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                             КАК Валюта,
		|	ВЫБОР КОГДА НЕ РасчетыПоСрокам.РасчетныйДокумент ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаПлановогоПогашения ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаВозникновения ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                              КАК Сумма,
		|	РасчетыПоСрокам.ДолгОстаток + РасчетыПоСрокам.ПредоплатаОстаток    КАК СуммаПоСрокам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ДолгОстаток < 0
		|	ИЛИ РасчетыПоСрокам.ПредоплатаОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов                                     КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                             КАК Валюта,
		|	ВЫБОР КОГДА НЕ РасчетыПоСрокам.РасчетныйДокумент ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаПлановогоПогашения ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаВозникновения ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                              КАК Сумма,
		|	РасчетыПоСрокам.ДолгОстаток + РасчетыПоСрокам.ПредоплатаОстаток    КАК СуммаПоСрокам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ДолгОстаток < 0
		|	ИЛИ РасчетыПоСрокам.ПредоплатаОстаток < 0";
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "УНИЧТОЖИТЬ ПериодВводаОстатков";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВтРучныхКорректировок();
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Если БезРучныхКорректировок Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Аналитика.Организация             КАК Организация,
			|	Остатки.ТипРасчетов               КАК ТипРасчетов,
			|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Остатки.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	Остатки.Валюта                    КАК ВалютаРасчетов
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ ВтОстатки КАК Остатки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
			|ГДЕ
			|	НЕ (Остатки.АналитикаУчетаПоПартнерам, Остатки.ОбъектРасчетов) В
			|				(ВЫБРАТЬ
			|					ВтРучныеКорректировки.АналитикаУчетаПоПартнерам,
			|					ВтРучныеКорректировки.ОбъектРасчетов
			|				ИЗ
			|					ВтРучныеКорректировки)
			|	И НЕ Остатки.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Аналитика.Организация             КАК Организация,
			|	Остатки.ТипРасчетов               КАК ТипРасчетов,
			|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Остатки.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	Остатки.Валюта                    КАК ВалютаРасчетов,
			|	ВтРучныеКорректировки.Регистратор КАК РучнаяКорректировка
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ
			|	ВтОстатки КАК Остатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО (Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРучныеКорректировки КАК ВтРучныеКорректировки
			|		ПО Остатки.АналитикаУчетаПоПартнерам = ВтРучныеКорректировки.АналитикаУчетаПоПартнерам
			|			И Остатки.ОбъектРасчетов = ВтРучныеКорректировки.ОбъектРасчетов
			|ГДЕ
			|	&ПериодВДиапазонеПересчета";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВТ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","ПОМЕСТИТЬ "+ИмяВТ);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","");
	КонецЕсли;
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ";");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска записей с развернутым сальдо в расчетных регистрах. 
// 
// Параметры:
// 	ИмяВТ - Строка - Имя временной таблицы для помещения результата
// 	БезРучныхКорректировок - Булево - необходимость исключения из результата запроса Аналитик расчетов по партнерам 
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаРазвернутоеСальдо(ИмяВт = "", БезРучныхКорректировок = Истина) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ключи.Ссылка      КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация КАК Организация
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Организация В (&МассивОрганизаций)
		|	И &НеЗачетОплатПоДатеПлатежа
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентамиОстатки.ОбъектРасчетов                         КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта                                 КАК Валюта,
		|	РасчетыСКлиентамиОстатки.ДолгОстаток                            КАК ДолгОстаток,
		|	РасчетыСКлиентамиОстатки.ПредоплатаОстаток                      КАК ПредоплатаОстаток
		|ПОМЕСТИТЬ ВтСальдо
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.ДолгОстаток > 0 
		|	И РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов                         КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиОстатки.Валюта                                 КАК Валюта,
		|	РасчетыСПоставщикамиОстатки.ДолгОстаток                            КАК ДолгОстаток,
		|	РасчетыСПоставщикамиОстатки.ПредоплатаОстаток                      КАК ПредоплатаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.ДолгОстаток > 0 
		|	И РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0";
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВтРучныхКорректировок();
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Если БезРучныхКорректировок Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Аналитика.Организация             КАК Организация,
			|	Сальдо.ТипРасчетов                КАК ТипРасчетов,
			|	Сальдо.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	Сальдо.ОбъектРасчетов             КАК ОбъектРасчетов,
			|	Сальдо.Валюта                     КАК ВалютаРасчетов,
			|	Сальдо.ДолгОстаток                КАК ДолгОстаток,
			|	Сальдо.ПредоплатаОстаток          КАК ПредоплатаОстаток
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ ВтСальдо КАК Сальдо
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО Аналитика.АналитикаУчетаПоПартнерам = Сальдо.АналитикаУчетаПоПартнерам
			|ГДЕ
			|	НЕ (Сальдо.АналитикаУчетаПоПартнерам, Сальдо.ОбъектРасчетов) В
			|				(ВЫБРАТЬ
			|					ВтРучныеКорректировки.АналитикаУчетаПоПартнерам,
			|					ВтРучныеКорректировки.ОбъектРасчетов
			|				ИЗ
			|					ВтРучныеКорректировки)
			|	И НЕ Сальдо.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Аналитика.Организация             КАК Организация,
			|	Сальдо.ТипРасчетов                КАК ТипРасчетов,
			|	Сальдо.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	Сальдо.ОбъектРасчетов             КАК ОбъектРасчетов,
			|	Сальдо.Валюта                     КАК ВалютаРасчетов,
			|	Сальдо.ДолгОстаток                КАК ДолгОстаток,
			|	Сальдо.ПредоплатаОстаток          КАК ПредоплатаОстаток,
			|	ВтРучныеКорректировки.Регистратор КАК РучнаяКорректировка
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ
			|	ВтСальдо КАК Сальдо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО (Аналитика.АналитикаУчетаПоПартнерам = Сальдо.АналитикаУчетаПоПартнерам)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРучныеКорректировки КАК ВтРучныеКорректировки
			|		ПО Сальдо.АналитикаУчетаПоПартнерам = ВтРучныеКорректировки.АналитикаУчетаПоПартнерам
			|			И Сальдо.ОбъектРасчетов = ВтРучныеКорректировки.ОбъектРасчетов
			|ГДЕ
			|	&ПериодВДиапазонеПересчета";
	КонецЕсли;
	
	Если ИмяВт <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","ПОМЕСТИТЬ "+ИмяВт);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","");
	КонецЕсли;
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ";");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Временная таблица для определения наличичия ручных корректировок регистров 
// при проверке развернутого сальдо и некорректных остатков
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаВтРучныхКорректировок()
	
	Возврат "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	МАКСИМУМ(ВложенныйЗапрос.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВтРучныеКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Регистратор               КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|	ГДЕ
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСКлиентамиПоСрокам.Активность
	|		И РасчетыСКлиентамиПоСрокам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокам.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСКлиентамиПоСрокам.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСПоставщикамиПоСрокам.Активность
	|		И РасчетыСПоставщикамиПоСрокам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСПоставщикамиПоСрокам.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентами.ОбъектРасчетов,
	|		РасчетыСКлиентами.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ГДЕ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСКлиентами.Активность
	|		И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСКлиентами.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщиками.ОбъектРасчетов,
	|		РасчетыСПоставщиками.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСПоставщиками.Активность
	|		И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСПоставщиками.Период <= &НачалоМесяца) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов
	|";
	
КонецФункции

// Исправление остатков по взаиморасчетам
// 
// Параметры:
// 	Период - Дата - Период проверки, на начало месяца периода будут проверены остатки, 
//		если они некорректные, то будет создана корректировка на конец предыдущего месяца.
//		Если на начало периода остатки в порядке, а на начало следующего месяца - нет, то будет запущен частичный пересчет расчетов.
// 	МассивОрганизаций - Массив - Массив организация, по которым требуется исправить остатки взаиморасчетов
Процедура ИсправитьОстаткиВзаиморасчетов(Период, ЗНАЧ МассивОрганизаций = Неопределено) Экспорт
	
	ДатаКорректировки    = НачалоМесяца(Период)-1; //Для корректировки и движений
	ПорядокКорректировки = Формат(ДатаКорректировки,"ДФ=ггггММдд9ЧЧммсс99"); //Для запроса данных остатков.
	ПериодРасчета        = НачалоМесяца(Период); //Для сравнения остатков
	ПорядокРасчета       = Формат(ПериодРасчета, "ДФ=ггггММдд00000000"); //Для запуска пересчета
	
	МассивОрганизаций = ?(МассивОрганизаций = Неопределено,
							Справочники.Организации.ДоступныеОрганизации(),
							МассивОрганизаций);
	
	ТипыРасчетов = Новый Массив;
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
	Запрос.УстановитьПараметр("НачалоМесяца",       ПериодРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("Порядок",            ПорядокКорректировки);
	
	//Удалим корректировки
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Если НекорректныеОстатки.Количество() > 0 Тогда
		МассивОрганизацийДляОбработки = НекорректныеОстатки.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		Для Каждого Организация Из МассивОрганизаций Цикл
			УдалитьСистемныеКорректировкиРегистров(ДатаКорректировки,Организация)
		КонецЦикла;
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		//Перечитываем остатки
		Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
		
		НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
		НекорректныеОстатки.Индексы.Добавить("ТипРасчетов, Организация");
		СтруктураПоиска = Новый Структура("ТипРасчетов, Организация");
		
		МассивОрганизацийДляОбработки = НекорректныеОстатки.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		
		Для Каждого Организация Из МассивОрганизацийДляОбработки Цикл
			
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазрывовОстатковВзаиморасчетов);
			
			Для Каждого ТипРасчетов Из ТипыРасчетов Цикл
				
				Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
					Движения = КорректировкаОбъект.Движения["РасчетыСКлиентамиПоСрокам"]; // РегистрНакопленияНаборЗаписей
				Иначе
					Движения = КорректировкаОбъект.Движения["РасчетыСПоставщикамиПоСрокам"]; // РегистрНакопленияНаборЗаписей
				КонецЕсли;
				
				СтруктураПоиска.ТипРасчетов = ТипРасчетов;
				СтруктураПоиска.Организация = Организация;
				ЗаписиНекорректныхОстатков = НекорректныеОстатки.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ЗаписьНекорректныхОстатков Из ЗаписиНекорректныхОстатков Цикл
					
					//Рассчитаем корректные остатки.
					
					ДополнительныеСвойства = Новый Структура;
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, ЗаписьНекорректныхОстатков);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами             = ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ОсновныеПараметры.ДополнительныеСвойстваПроведения = ДополнительныеСвойства;
					ОсновныеПараметры.ЗаписыватьИзменения              = Ложь;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
					//Сравним с остатками до и рассчитаем записи корректировки.
					
					Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ЗаписьНекорректныхОстатков.АналитикаУчетаПоПартнерам);
					Запрос.УстановитьПараметр("ОбъектРасчетов",            ЗаписьНекорректныхОстатков.ОбъектРасчетов);
					Запрос.УстановитьПараметр("Валюта",                    ЗаписьНекорректныхОстатков.ВалютаРасчетов);
					Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
						Запрос.УстановитьПараметр("РасчетыПоСрокам",           ДополнительныеСвойства["РасчетыСКлиентамиПоСрокам"]);
					Иначе
						Запрос.УстановитьПараметр("РасчетыПоСрокам",           ДополнительныеСвойства["РасчетыСПоставщикамиПоСрокам"]);
					КонецЕсли;
					
					Запрос.Текст = "
						//Записи после
						|ВЫБРАТЬ
						|	РасчетыПоСрокамПосле.Период                        КАК Период,
						|	РасчетыПоСрокамПосле.ВидДвижения                   КАК ВидДвижения,
						|	
						|	РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
						|	РасчетыПоСрокамПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
						|	РасчетыПоСрокамПосле.Валюта                        КАК Валюта,
						|	РасчетыПоСрокамПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
						|	РасчетыПоСрокамПосле.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
						|	РасчетыПоСрокамПосле.ДатаВозникновения             КАК ДатаВозникновения,
						|	
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.Предоплата КАК ЧИСЛО(31,2))     КАК Предоплата,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ПредоплатаРегл КАК ЧИСЛО(31,2)) КАК ПредоплатаРегл,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ПредоплатаУпр КАК ЧИСЛО(31,2))  КАК ПредоплатаУпр,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.Долг КАК ЧИСЛО(31,2))           КАК Долг,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ДолгРегл КАК ЧИСЛО(31,2))       КАК ДолгРегл,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ДолгУпр КАК ЧИСЛО(31,2))        КАК ДолгУпр,
						|	
						|	РасчетыПоСрокамПосле.ПорядокЗачета                 КАК ПорядокЗачета,
						|	РасчетыПоСрокамПосле.ПорядокОперации               КАК ПорядокОперации,
						|	РасчетыПоСрокамПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
						|	РасчетыПоСрокамПосле.ВалютаДокумента               КАК ВалютаДокумента,
						|	РасчетыПоСрокамПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
						|ПОМЕСТИТЬ РасчетыПоСрокамПосле
						|ИЗ &РасчетыПоСрокам КАК РасчетыПоСрокамПосле
						|ИНДЕКСИРОВАТЬ ПО
						|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
						|;
						//Расхождения
						|ВЫБРАТЬ
						|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|	ВложенныйЗапрос.ОбъектРасчетов            КАК ОбъектРасчетов,
						|	ВложенныйЗапрос.Валюта                    КАК Валюта,
						|	ВложенныйЗапрос.РасчетныйДокумент         КАК РасчетныйДокумент,
						|	ВложенныйЗапрос.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|	ВложенныйЗапрос.ДатаВозникновения         КАК ДатаВозникновения,
						|	СУММА(ВложенныйЗапрос.Предоплата)         КАК Предоплата,
						|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)     КАК ПредоплатаРегл,
						|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)      КАК ПредоплатаУпр,
						|	СУММА(ВложенныйЗапрос.Долг)               КАК Долг,
						|	СУММА(ВложенныйЗапрос.ДолгРегл)           КАК ДолгРегл,
						|	СУММА(ВложенныйЗапрос.ДолгУпр)            КАК ДолгУпр
						|ПОМЕСТИТЬ ТаблицаИзменений
						|ИЗ
						|	(ВЫБРАТЬ
						|		РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|		РасчетыПоСрокамДо.ОбъектРасчетов            КАК ОбъектРасчетов,
						|		РасчетыПоСрокамДо.Валюта                    КАК Валюта,
						|		РасчетыПоСрокамДо.РасчетныйДокумент         КАК РасчетныйДокумент,
						|		РасчетыПоСрокамДо.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|		РасчетыПоСрокамДо.ДатаВозникновения         КАК ДатаВозникновения,
						|		-РасчетыПоСрокамДо.ПредоплатаОстаток        КАК Предоплата,
						|		-РасчетыПоСрокамДо.ПредоплатаРеглОстаток    КАК ПредоплатаРегл,
						|		-РасчетыПоСрокамДо.ПредоплатаУпрОстаток     КАК ПредоплатаУпр,
						|		-РасчетыПоСрокамДо.ДолгОстаток              КАК Долг,
						|		-РасчетыПоСрокамДо.ДолгРеглОстаток          КАК ДолгРегл,
						|		-РасчетыПоСрокамДо.ДолгУпрОстаток           КАК ДолгУпр
						|	ИЗ
						|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, 
						|			АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
						|			И ОбъектРасчетов = &ОбъектРасчетов
						|			И Валюта = &Валюта) КАК РасчетыПоСрокамДо
						|		
						|	ОБЪЕДИНИТЬ ВСЕ
						|	
						|	ВЫБРАТЬ
						|		РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|		РасчетыПоСрокамПосле.ОбъектРасчетов            КАК ОбъектРасчетов,
						|		РасчетыПоСрокамПосле.Валюта                    КАК Валюта,
						|		РасчетыПоСрокамПосле.РасчетныйДокумент         КАК РасчетныйДокумент,
						|		РасчетыПоСрокамПосле.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|		РасчетыПоСрокамПосле.ДатаВозникновения         КАК ДатаВозникновения,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.Предоплата
						|			ИНАЧЕ РасчетыПоСрокамПосле.Предоплата
						|		КОНЕЦ                                          КАК Предоплата,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ПредоплатаРегл
						|			ИНАЧЕ РасчетыПоСрокамПосле.ПредоплатаРегл
						|		КОНЕЦ                                          КАК ПредоплатаРегл,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ПредоплатаУпр
						|			ИНАЧЕ РасчетыПоСрокамПосле.ПредоплатаУпр
						|		КОНЕЦ                                          КАК ПредоплатаУпр,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.Долг
						|			ИНАЧЕ РасчетыПоСрокамПосле.Долг
						|		КОНЕЦ                                          КАК Долг,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ДолгРегл
						|			ИНАЧЕ РасчетыПоСрокамПосле.ДолгРегл
						|		КОНЕЦ                                          КАК ДолгРегл,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ДолгУпр
						|			ИНАЧЕ РасчетыПоСрокамПосле.ДолгУпр
						|		КОНЕЦ                                          КАК ДолгУпр
						|	ИЗ
						|		РасчетыПоСрокамПосле КАК РасчетыПоСрокамПосле
						|	ГДЕ
						|		РасчетыПоСрокамПосле.Период < &НачалоМесяца) КАК ВложенныйЗапрос
						|СГРУППИРОВАТЬ ПО
						|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
						|	ВложенныйЗапрос.ОбъектРасчетов,
						|	ВложенныйЗапрос.Валюта,
						|	ВложенныйЗапрос.РасчетныйДокумент,
						|	ВложенныйЗапрос.ДатаПлановогоПогашения,
						|	ВложенныйЗапрос.ДатаВозникновения
						|ИМЕЮЩИЕ
						|	СУММА(ВложенныйЗапрос.Предоплата) <> 0 ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
						|ИНДЕКСИРОВАТЬ ПО
						|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
						|;
						|
						//Данные для движений
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                       КАК ВидДвижения,
						|	
						|	Изменения.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов                                     КАК ОбъектРасчетов,
						|	Изменения.Валюта                                             КАК Валюта,
						|	Изменения.РасчетныйДокумент                                  КАК РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения                             КАК ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения                                  КАК ДатаВозникновения,
						|	
						|	Изменения.Предоплата                                         КАК Предоплата,
						|	Изменения.ПредоплатаРегл                                     КАК ПредоплатаРегл,
						|	Изменения.ПредоплатаУпр                                      КАК ПредоплатаУпр,
						|	Изменения.Долг                                               КАК Долг,
						|	Изменения.ДолгРегл                                           КАК ДолгРегл,
						|	Изменения.ДолгУпр                                            КАК ДолгУпр,
						|	
						|	МИНИМУМ(РасчетыПоСрокамПосле.ПорядокЗачета)                  КАК ПорядокЗачета,
						|	МИНИМУМ(РасчетыПоСрокамПосле.ПорядокОперации)                КАК ПорядокОперации,
						|	МАКСИМУМ(РасчетыПоСрокамПосле.СвязанныйДокумент)             КАК СвязанныйДокумент,
						|	МИНИМУМ(РасчетыПоСрокамПосле.ВалютаДокумента)                КАК ВалютаДокумента,
						|	МАКСИМУМ(РасчетыПоСрокамПосле.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
						|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)    КАК ХозяйственнаяОперация
						|
						|ИЗ
						|	ТаблицаИзменений КАК Изменения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоСрокамПосле КАК РасчетыПоСрокамПосле
						|			ПО РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам    = Изменения.АналитикаУчетаПоПартнерам
						|				И РасчетыПоСрокамПосле.ОбъектРасчетов            = Изменения.ОбъектРасчетов
						|				И РасчетыПоСрокамПосле.Валюта                    = Изменения.Валюта
						|				И РасчетыПоСрокамПосле.РасчетныйДокумент         = Изменения.РасчетныйДокумент
						|ГДЕ
						|	Изменения.Предоплата > 0 ИЛИ Изменения.Долг > 0
						|СГРУППИРОВАТЬ ПО
						|	Изменения.АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов,
						|	Изменения.Валюта,
						|	Изменения.РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения,
						|	Изменения.Предоплата,
						|	Изменения.ПредоплатаРегл,
						|	Изменения.ПредоплатаУпр,
						|	Изменения.Долг,
						|	Изменения.ДолгРегл,
						|	Изменения.ДолгУпр
						|	
						|ОБЪЕДИНИТЬ ВСЕ
						|	
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
						|	
						|	Изменения.АналитикаУчетаПоПартнерам                       КАК АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов                                  КАК ОбъектРасчетов,
						|	Изменения.Валюта                                          КАК Валюта,
						|	Изменения.РасчетныйДокумент                               КАК РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения                          КАК ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения                               КАК ДатаВозникновения,
						|	
						|	-Изменения.Предоплата                                     КАК Предоплата,
						|	-Изменения.ПредоплатаРегл                                 КАК ПредоплатаРегл,
						|	-Изменения.ПредоплатаУпр                                  КАК ПредоплатаУпр,
						|	-Изменения.Долг                                           КАК Долг,
						|	-Изменения.ДолгРегл                                       КАК ДолгРегл,
						|	-Изменения.ДолгУпр                                        КАК ДолгУпр,
						|	
						|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета)                  КАК ПорядокЗачета,
						|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации)                КАК ПорядокОперации,
						|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент)             КАК СвязанныйДокумент,
						|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента)                КАК ВалютаДокумента,
						|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
						|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
						|
						|ИЗ
						|	ТаблицаИзменений КАК Изменения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
						|			ПО РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам    = Изменения.АналитикаУчетаПоПартнерам
						|				И РасчетыПоСрокамДо.ОбъектРасчетов            = Изменения.ОбъектРасчетов
						|				И РасчетыПоСрокамДо.Валюта                    = Изменения.Валюта
						|				И РасчетыПоСрокамДо.РасчетныйДокумент         = Изменения.РасчетныйДокумент
						|				И РасчетыПоСрокамДо.Период                    < &НачалоМесяца
						|				И РасчетыПоСрокамДо.Активность
						|ГДЕ
						|	Изменения.Предоплата < 0 ИЛИ Изменения.Долг < 0
						|СГРУППИРОВАТЬ ПО
						|	Изменения.АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов,
						|	Изменения.Валюта,
						|	Изменения.РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения,
						|	-Изменения.Предоплата,
						|	-Изменения.ПредоплатаРегл,
						|	-Изменения.ПредоплатаУпр,
						|	-Изменения.Долг,
						|	-Изменения.ДолгРегл,
						|	-Изменения.ДолгУпр";
						
						Если ТипРасчетов <> Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
							Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
								"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
						КонецЕсли;
						
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Запрос.Текст = "УНИЧТОЖИТЬ РасчетыПоСрокамПосле; УНИЧТОЖИТЬ ТаблицаИзменений";
						Запрос.Выполнить();
						
						Пока Выборка.Следующий() Цикл
							
							НовСтр = Движения.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
							
							НовСтр.ДокументРегистратор = КорректировкаОбъект.Ссылка;
							НовСтр.Период = ДатаКорректировки;
							
						КонецЦикла;
						
				КонецЦикла;
				
				Движения.Записать();
				
				Для Каждого ЗаписьНекорректныхОстатков Из ЗаписиНекорректныхОстатков Цикл
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, ЗаписьНекорректныхОстатков);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами = ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
					ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КорректировкаОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
				И КорректировкаОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
				КорректировкаОбъект.Удалить();
			Иначе
				ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
	Запрос.Выполнить();
	
	//Если на начало периода все хорошо, а на конец есть некорректные остатки - пересчитаем их.
	Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
	Запрос.УстановитьПараметр("НачалоМесяца",       КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("Порядок",            Формат(КонецМесяца(ПериодРасчета),"ДФ=ггггММдд9ЧЧммсс99"));
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстатки Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
		ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Исправление развернутого сальдо по взаиморасчетам
// 
// Параметры:
// 	Период - Дата - Период проверки, требуется указать конец месяца
// 	МассивОрганизаций - Массив - Массив организация, по которым требуется исправить развернутое сальдо взаиморасчетов
Процедура ИсправитьРазвернутоеСальдо(Период, ЗНАЧ МассивОрганизаций = Неопределено) Экспорт
	
	ДатаКорректировки    = НачалоМесяца(Период)-1; //Для корректировки и движений
	ПорядокКорректировки = Формат(ДатаКорректировки,"ДФ=ггггММдд9ЧЧммсс99"); //Для запроса данных остатков.
	ПериодРасчета        = НачалоМесяца(Период); //Для сравнения остатков
	ПорядокРасчета       = Формат(ПериодРасчета, "ДФ=ггггММдд00000000"); //Для запуска пересчета
	
	МассивОрганизаций = ?(МассивОрганизаций = Неопределено,
							Справочники.Организации.ДоступныеОрганизации(),
							МассивОрганизаций);
	
	ТипыРасчетов = Новый Массив;
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаРазвернутоеСальдо("АналитикиСуммы");
	Запрос.УстановитьПараметр("НачалоМесяца",       ПериодРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("Порядок",            ПорядокКорректировки);
	Запрос.УстановитьПараметр("НеЗачетОплатПоДатеПлатежа", 
	                          Константы.ЗачетОплатПоДатеПлатежа.Получить() = 0);
	Запрос.Выполнить();
	
	РазвернутоеСальдо = Запрос.МенеджерВременныхТаблиц.Таблицы["АналитикиСуммы"].ПолучитьДанные().Выгрузить();
	
	МассивОрганизацийДляОбработки = РазвернутоеСальдо.Скопировать(,"Организация");
	МассивОрганизацийДляОбработки.Свернуть("Организация");
	МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
	
	Если РазвернутоеСальдо.Количество() > 0 Тогда
		Для Каждого Организация Из МассивОрганизаций Цикл
			УдалитьСистемныеКорректировкиРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов)
		КонецЦикла;
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ АналитикиСуммы; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		//Перечитываем остатки
		
		Запрос.Текст = ТекстЗапросаРазвернутоеСальдо("АналитикиСуммы");
		Запрос.Выполнить();
		РазвернутоеСальдо = Запрос.МенеджерВременныхТаблиц.Таблицы["АналитикиСуммы"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
		
		РазвернутоеСальдо.Индексы.Добавить("ТипРасчетов, Организация");
		СтруктураПоиска = Новый Структура("ТипРасчетов, Организация");
		
		Запрос.Текст = "ВЫБРАТЬ
			|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСКлиентамиПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток КАК Предоплата,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК Долг,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРегл,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпр
			|ПОМЕСТИТЬ ВТРасчетыСКлиентамиПоСрокамОстатки
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, 
			|		(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта)
			|			В (ВЫБРАТЬ АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов 
			|				ИЗ АналитикиСуммы
			|				ГДЕ ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
			|				)) КАК РасчетыСКлиентамиПоСрокамОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСПоставщикамиПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыСПоставщикамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаОстаток КАК ПредоплатаОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРеглОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпрОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгОстаток КАК ДолгОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРеглОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпрОстаток
			|ПОМЕСТИТЬ ВТРасчетыСПоставщикамиПоСрокамОстатки
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, 
			|		(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта)
			|			В (ВЫБРАТЬ АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов 
			|					ИЗ АналитикиСуммы
			|					ГДЕ ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
			|					)) КАК РасчетыСПоставщикамиПоСрокамОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.Предоплата КАК Предоплата,
			|	РасчетыПоСрокамОстатки.ПредоплатаРегл КАК ПредоплатаРегл,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпр КАК ПредоплатаУпр,
			|	РасчетыПоСрокамОстатки.Долг КАК Долг,
			|	РасчетыПоСрокамОстатки.ДолгРегл КАК ДолгРегл,
			|	РасчетыПоСрокамОстатки.ДолгУпр КАК ДолгУпр,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета) КАК ПорядокЗачета,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации) КАК ПорядокОперации,
			|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент) КАК СвязанныйДокумент,
			|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента) КАК ВалютаДокумента,
			|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
			|ИЗ
			|	ВТРасчетыСКлиентамиПоСрокамОстатки КАК РасчетыПоСрокамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
			|		ПО (РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам)
			|			И (РасчетыПоСрокамДо.ОбъектРасчетов = РасчетыПоСрокамОстатки.ОбъектРасчетов)
			|			И (РасчетыПоСрокамДо.Валюта = РасчетыПоСрокамОстатки.Валюта)
			|			И (РасчетыПоСрокамДо.РасчетныйДокумент = РасчетыПоСрокамОстатки.РасчетныйДокумент)
			|			И (РасчетыПоСрокамДо.Период < &НачалоМесяца)
			|			И (РасчетыПоСрокамДо.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.Предоплата,
			|	РасчетыПоСрокамОстатки.ПредоплатаРегл,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпр,
			|	РасчетыПоСрокамОстатки.Долг,
			|	РасчетыПоСрокамОстатки.ДолгРегл,
			|	РасчетыПоСрокамОстатки.ДолгУпр
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком),
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
			|	РасчетыПоСрокамОстатки.ДолгОстаток,
			|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
			|	РасчетыПоСрокамОстатки.ДолгУпрОстаток,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета),
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации),
			|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент),
			|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента),
			|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств),
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
			|ИЗ
			|	ВТРасчетыСПоставщикамиПоСрокамОстатки КАК РасчетыПоСрокамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокамДо
			|		ПО (РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам)
			|			И (РасчетыПоСрокамДо.ОбъектРасчетов = РасчетыПоСрокамОстатки.ОбъектРасчетов)
			|			И (РасчетыПоСрокамДо.Валюта = РасчетыПоСрокамОстатки.Валюта)
			|			И (РасчетыПоСрокамДо.РасчетныйДокумент = РасчетыПоСрокамОстатки.РасчетныйДокумент)
			|			И (РасчетыПоСрокамДо.Период < &НачалоМесяца)
			|			И (РасчетыПоСрокамДо.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
			|	РасчетыПоСрокамОстатки.ДолгОстаток,
			|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
			|	РасчетыПоСрокамОстатки.ДолгУпрОстаток
			|
			|УПОРЯДОЧИТЬ ПО
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации)";
		
		ДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		ДетальныеЗаписи.Индексы.Добавить("ТипРасчетов, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
		СтруктураПоискаДетальныхЗаписей = Новый Структура("ТипРасчетов, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
		
		МассивОрганизацийДляОбработки = РазвернутоеСальдо.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		
		Для Каждого Организация Из МассивОрганизацийДляОбработки Цикл
			
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
			
			Для Каждого ТипРасчетов Из ТипыРасчетов Цикл
				
				ТипРасчетовСтрокой = ?(ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,"РасчетыСКлиентами","РасчетыСПоставщиками");
				
				Движения = КорректировкаОбъект.Движения[ТипРасчетовСтрокой + "ПоСрокам"]; // РегистрНакопленияНаборЗаписей
				
				СтруктураПоиска.ТипРасчетов = ТипРасчетов;
				СтруктураПоиска.Организация = Организация;
				ЗаписиРазвернутогоСальдо = РазвернутоеСальдо.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ЗаписьРазвернутогоСальдо Из ЗаписиРазвернутогоСальдо Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоискаДетальныхЗаписей, ЗаписьРазвернутогоСальдо);
					СтруктураПоискаДетальныхЗаписей.Валюта = ЗаписьРазвернутогоСальдо.ВалютаРасчетов;
					ДетальныеЗаписиАналитики = ДетальныеЗаписи.НайтиСтроки(СтруктураПоискаДетальныхЗаписей);
					
					СуммаКРаспределениюДолг = Мин(ЗаписьРазвернутогоСальдо.ДолгОстаток, ЗаписьРазвернутогоСальдо.ПредоплатаОстаток);
					СуммаКРаспределениюПредоплата = СуммаКРаспределениюДолг;
					
					Для Каждого СтрокаДетальныхЗаписей Из ДетальныеЗаписиАналитики Цикл
						
						Если СуммаКРаспределениюДолг = 0 И СуммаКРаспределениюПредоплата = 0 Тогда
							Прервать;
						КонецЕсли;
						
						НовСтр = Движения.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
						
						НовСтр.Период              = ДатаКорректировки;
						НовСтр.ВидДвижения         = ВидДвиженияНакопления.Расход;
						НовСтр.ДокументРегистратор = КорректировкаОбъект.Ссылка;
						НовСтр.ПорядокОперации     = ПорядокКорректировки;
						
						Если СтрокаДетальныхЗаписей.Долг > 0 Тогда
							СуммаСписания = Мин(СуммаКРаспределениюДолг, СтрокаДетальныхЗаписей.Долг);
							
							НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРегл / СтрокаДетальныхЗаписей.Долг * СуммаСписания;
							НовСтр.ДолгУпр  = СтрокаДетальныхЗаписей.ДолгУпр / СтрокаДетальныхЗаписей.Долг * СуммаСписания;
							НовСтр.Долг     = СуммаСписания;
							
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг - СуммаСписания;
						КонецЕсли;
						
						Если СтрокаДетальныхЗаписей.Предоплата > 0 Тогда
							СуммаСписания = Мин(СуммаКРаспределениюПредоплата, СтрокаДетальныхЗаписей.Предоплата);
							
							НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРегл / СтрокаДетальныхЗаписей.Предоплата * СуммаСписания;
							НовСтр.ПредоплатаУпр  = СтрокаДетальныхЗаписей.ПредоплатаУпр / СтрокаДетальныхЗаписей.Предоплата * СуммаСписания;
							НовСтр.Предоплата     = СуммаСписания;
							
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Движения.Записать();
				
				Для Каждого СтрокаАналитики Из ЗаписиРазвернутогоСальдо Цикл
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, СтрокаАналитики);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами = ТипРасчетовСтрокой = "РасчетыСКлиентами";
					ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
					ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КорректировкаОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
				И КорректировкаОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
				КорректировкаОбъект.Удалить();
			Иначе
				ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ ВтРучныеКорректировки";
	Запрос.Выполнить();
	
	//Если на начало периода все хорошо, а на конец есть развернутое сальдо - пересчитаем их.
	Запрос.Текст = ТекстЗапросаРазвернутоеСальдо();
	Запрос.УстановитьПараметр("НачалоМесяца",       КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("Порядок",            Формат(КонецМесяца(ПериодРасчета),"ДФ=ггггММдд9ЧЧммсс99"));
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстатки Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
		ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в движения данные по прочим доходам/расходам 
// 
// Параметры:
// 	КорректировкаОбъект - ДокументОбъект.КорректировкаРегистров - ДокументОбъект, с уже записанными движениями по расчетам.
Процедура ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект) Экспорт
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеДоходы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеДоходы";
	КонецЕсли;
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеРасходы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеРасходы";
	КонецЕсли;
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеАктивыПассивы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеАктивыПассивы";
	КонецЕсли;
	
	НачалоТекущегоПериода = КонецМесяца(КорректировкаОбъект.Дата)+1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректировкаСсылка", КорректировкаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Период", НачалоТекущегоПериода);
	Запрос.УстановитьПараметр("СтатьяДоходов", ПланыВидовХарактеристик.СтатьиДоходов.ПрибыльУбытокПрошлыхЛет);
	Запрос.УстановитьПараметр("СтатьяРасходов", ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(НачалоТекущегоПериода));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВложенныйЗапрос.Организация             КАК Организация,
	|	ВложенныйЗапрос.Подразделение           КАК Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяДоходов                          КАК СтатьяДоходов,
	|	ВложенныйЗапрос.Организация             КАК АналитикаДоходов,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаРегл)        КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций 
	|				ТОГДА ВложенныйЗапрос.СуммаУпр
	|				ИНАЧЕ 0
	|		КОНЕЦ)                              КАК СуммаУпр
	|ИЗ (ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|				ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ	
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|;
	|ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВложенныйЗапрос.Организация             КАК Организация,
	|	ВложенныйЗапрос.Подразделение           КАК Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяРасходов                         КАК СтатьяРасходов,
	|	ВложенныйЗапрос.Организация             КАК АналитикаРасходов,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК СуммаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаРегл)        КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ВложенныйЗапрос.СуммаУпр
	|				ИНАЧЕ 0
	|		КОНЕЦ)                              КАК СуммаУпр,
	|	0                                       КАК ПостояннаяРазница,
	|	0                                       КАК ВременнаяРазница
	|ИЗ (ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|				ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ	
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Доходы = Результаты[0].Выгрузить();
	Расходы = Результаты[1].Выгрузить();
	
	ДвиженияДоходы = КорректировкаОбъект.Движения.ПрочиеДоходы;
	ДвиженияДоходы.Загрузить(Доходы);
	ДвиженияДоходы.Записать();
	
	ДвиженияРасходы = КорректировкаОбъект.Движения.ПрочиеРасходы;
	ДвиженияРасходы.Загрузить(Расходы);
	ДвиженияРасходы.Записать();
	
	КорректировкаОбъект.Записать();
	
	УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(КорректировкаОбъект.Ссылка, КорректировкаОбъект.Движения);
	
	АктивыПассивы = КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Выгрузить();
	АктивыПассивы.ЗаполнитьЗначения(НачалоТекущегоПериода, "Период");
	КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Загрузить(АктивыПассивы);
	КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Записать();
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру параметров необходимых для регистрации документа к отложенному распределению расчетов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер с таблицей РасчетыСКлиентамиИзменения или РасчетыСПоставщикамиИзменения.
// * Регистратор - ДокументСсылка - Документ по которому необходимо зарегистрировать отложенные расчеты.
// * РасчетПлановФоновымЗаданием - Булево - Плановые расчеты заполняются фоновым заданием.
// * Загрузка - Булево - Значение флага ОбменДанными.Загрузка
// * ТаблицаИзменений - ТаблицаЗначений - (Необязательный) Объекты расчетов по которым есть изменения 
//                                        с рассчитанными датами начала расчета факта и плана:
//                                        ** ПорядокФакт - Строка.
//                                        ** ПорядокПлан - Строка.
//                                        ** АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//                                        ** ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//                                        ** ПустойКорОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//                                        ** ВалютаРасчетов - СправочникСсылка.Валюты.
// * РасчетПлановФоновымЗаданием - Булево - Истина если необходимо расчитывать плановые расчеты в фоновом задании
Функция ПараметрыРаспределенияРасчетов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МенеджерВременныхТаблиц", Неопределено);
	Результат.Вставить("Регистратор", Неопределено);
	Результат.Вставить("Загрузка", Ложь);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	Результат.Вставить("РасчетПлановФоновымЗаданием", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует объекты расчетов для отложенного расчета по срокам и планом
// 
// Параметры:
// 	Параметры - см. ПараметрыРаспределенияРасчетов
Процедура ЗарегистрироватьИзмененияКОтложенномуРаспределению(Параметры) Экспорт
	
	НачатПереходНаНовуюАрхитектуру = Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Получить();
	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() И НЕ НачатПереходНаНовуюАрхитектуру Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Параметры.Загрузка ИЛИ НачатПереходНаНовуюАрхитектуру ИЛИ Параметры.РасчетПлановФоновымЗаданием) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из Параметры.ТаблицаИзменений Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ТипРасчетов.Установить(СтрокаИзменений.ТипРасчетов);
		НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(СтрокаИзменений.АналитикаУчетаПоПартнерам);
		НаборЗаписей.Отбор.ОбъектРасчетов.Установить(СтрокаИзменений.ОбъектРасчетов);
		НаборЗаписей.Отбор.Валюта.Установить(СтрокаИзменений.ВалютаРасчетов);
		
		Если СтрокаИзменений.ПорядокПлан = "" Тогда
			ДатаПлан = Дата(1,1,1);
		Иначе
			ДатаПлан = Дата(Лев(СтрокаИзменений.ПорядокПлан, 8));
		КонецЕсли;
		
		Если Параметры.РасчетПлановФоновымЗаданием Тогда
			ДатаФакт = Дата(3000,1,1);
		ИначеЕсли СтрокаИзменений.ПорядокФакт = "" Тогда
			ДатаФакт = Дата(1,1,1);
		Иначе
			ДатаФакт = Дата(Лев(СтрокаИзменений.ПорядокФакт, 8));
		КонецЕсли;
		
		НаборЗаписей.Отбор.ДатаПересчетаПлан.Установить(ДатаПлан);
		НаборЗаписей.Отбор.ДатаПересчета.Установить(ДатаФакт);
		НаборЗаписей.Отбор.Документ.Установить(Параметры.Регистратор);
		
		НовСтр = НаборЗаписей.Добавить();
		НовСтр.ТипРасчетов = СтрокаИзменений.ТипРасчетов;
		НовСтр.АналитикаУчетаПоПартнерам = СтрокаИзменений.АналитикаУчетаПоПартнерам;
		НовСтр.ОбъектРасчетов = СтрокаИзменений.ОбъектРасчетов;
		НовСтр.Валюта = СтрокаИзменений.ВалютаРасчетов;
		НовСтр.ДатаПересчета = ДатаФакт;
		НовСтр.ДатаПересчетаПлан = ДатаПлан;
		НовСтр.Документ = Параметры.Регистратор;
		НовСтр.Приоритет = ?(СтрокаИзменений.ПустойКорОбъектРасчетов, 1, 2);
		НовСтр.КоличествоДокументов = 1;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет распределение расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// 
// Параметры:
// 	Параметры - Структура, Неопределено - В структуре передается таблица заданий для распределения:
// 	 *ДанныеКОтработке - см. ДанныеДляОбработки.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры.
Процедура ВыполнитьОтложенноеРаспределение(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры <> Неопределено И Параметры.Свойство("ДанныеКОбработке") Тогда
		ДанныеКОбработке = Параметры.ДанныеКОбработке;
	Иначе
		ПараметрыДанных = ПараметрыДанныхМногопоточнойОбработки();
		ДанныеКОбработке = ДанныеДляОбработки(ПараметрыДанных);
	КонецЕсли;
	
	ТаблицаОбъектовОплаты = Новый ТаблицаЗначений;
	ТаблицаОбъектовОплаты.Колонки.Добавить("ОбъектОплаты", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип));
	ТаблицаОбъектовОплаты.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	ТаблицаОбъектовОплаты.Колонки.Добавить("ЭтоРасчетыСКлиентами", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Запись Из ДанныеКОбработке Цикл
		
		ПараметрыРаспределения = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ПараметрыРаспределения, Запись);
		
		ПараметрыРаспределения.ПорядокФакт = Порядок(Запись.ДатаПересчета,"", Тип("ДокументСсылка.КорректировкаРегистров"),"1","21");
		ПараметрыРаспределения.ПорядокПлан = Порядок(Запись.ДатаПересчетаПлан,"", Тип("ДокументСсылка.КорректировкаРегистров"),"1","21");
		
		НачатьТранзакцию();
		Попытка
			ОтметитьВыполнениеЗадания(Запись);
			ЗаполнитьОперативныеВзаиморасчеты(ПараметрыРаспределения);
			Если ЗначениеЗаполнено(Запись.Объект) Тогда
				НовСтр = ТаблицаОбъектовОплаты.Добавить();
				НовСтр.ЭтоРасчетыСКлиентами = Запись.ЭтоРасчетыСКлиентами;
				НовСтр.ОбъектРасчетов = Запись.ОбъектРасчетов;
				НовСтр.ОбъектОплаты = Запись.Объект;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	КонецЦикла;
	
	// Для определения состояний заказов используются данные распределенных расчетов
	ОтразитьСостоянияЗаказов(ДанныеКОбработке);
	
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСКлиентами(
				ТаблицаОбъектовОплаты.Скопировать(Новый Структура("ЭтоРасчетыСКлиентами", Истина)));
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСПоставщиками(
				ТаблицаОбъектовОплаты.Скопировать(Новый Структура("ЭтоРасчетыСКлиентами", Ложь)));
КонецПроцедуры

// Запускает распределение плановых расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// в фоновом задании.
// 
// Параметры:
// 	РаспределитьФактическиеРасчеты - Булево - Истина, запуск распределения фактических расчетов
//
Процедура ЗапуститьОтложенноеРаспределениеВзаиморасчетов(РаспределитьФактическиеРасчеты = Ложь) Экспорт
	
	Если (Константы.РаспределятьПлановыеРасчетыФоновымЗаданием.Получить() ИЛИ РаспределитьФактическиеРасчеты)
		И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И НЕ МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Тогда
		
		ПараметрыЭкспортнойПроцедуры = Новый Структура("РаспределитьФактическиеРасчеты", РаспределитьФактическиеРасчеты);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		Если РаспределитьФактическиеРасчеты Тогда
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполняется фоновое распределение фактических расчетов'");
		Иначе
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполняется фоновое распределение планов по расчетам'");
		КонецЕсли;
		ПараметрыВыполнения.КлючФоновогоЗадания = ИмяМетодаОтложенногоРаспределенияВзаиморасчетов();
		
		ДлительныеОперации.ВыполнитьВФоне(ИмяМетодаОтложенногоРаспределенияВзаиморасчетов(), ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Запускает распределение фактических расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// в фоновом задании.
//
// Метод предназначен для вызова из регламентного задания.
//
Процедура ЗапуститьОтложенноеРаспределениеФактическихВзаиморасчетов() Экспорт
	
	ЗапуститьОтложенноеРаспределениеВзаиморасчетов(Истина);
	
КонецПроцедуры

// Запускает отложенное распределение взаиморасчетов по срокам
Процедура ПослеОбновленияРегистровВзаиморасчетов() Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентами)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыСведений.ВспомогательнаяИнформацияВзаиморасчетов)
			И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		Тогда
		ЗапуститьОтложенноеРаспределениеВзаиморасчетов(Истина);
		ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет активность фонового задания по распределению расчетов.
//
// Возвращаемое значение:
//   Булево - Истина, если есть активные задания.
//
Функция МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Экспорт
	
	ИмяМетодаЗадания = ИмяМетодаОтложенногоРаспределенияВзаиморасчетов();
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Ключ", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	
	Возврат АктивныеЗадания.Количество() > 0;
	
КонецФункции  

// Пустые ссылки на заказы.
// 
// Возвращаемое значение:
//  Массив из Тип - Пустые ссылки на заказы
Функция ПустыеСсылкиНаЗаказы() Экспорт
	
	ПустыеСсылкиНаЗаказы = Новый Массив;
	ПустыеСсылкиНаЗаказы.Добавить(Неопределено);
	ПустыеСсылкиНаЗаказы.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
	ПустыеСсылкиНаЗаказы.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
	ПустыеСсылкиНаЗаказы.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка());
	
	
	
	Возврат ПустыеСсылкиНаЗаказы;
КонецФункции

Функция СписокТиповУточняющихПланы()
	СписокТиповРегистраторовПланов = Новый СписокЗначений;

	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОЗакупках"));
	
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	
	//Уточняют график договора
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупТоваровХранителем"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.Бронирование"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ОтчетОСписанииТоваровСХранения"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"));
	
	Возврат СписокТиповРегистраторовПланов;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

//Формирует временные таблицы остатков и записей для распределения
Процедура СформироватьВТДанныхРегистров(Запрос, ГлобальныеПеременные)
	
	//Данные расчетов до начала пересчета.
	ТекстЗапросаРасчетыПоСрокамОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                             КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                             КАК Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения                        КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                             КАК ДатаВозникновения,
	|	МИНИМУМ(ВспомогательнаяИнформация.ПорядокЗачета)                     КАК ПорядокЗачета,
	|	МИНИМУМ(ВспомогательнаяИнформация.ПорядокОперации)                   КАК ПорядокОперации,
	|	МАКСИМУМ(ВспомогательнаяИнформация.СвязанныйДокумент)                КАК СвязанныйДокумент,
	|	МАКСИМУМ(ВспомогательнаяИнформация.ВалютаДокумента)                  КАК ВалютаДокумента,
	|	МАКСИМУМ(ВспомогательнаяИнформация.СтатьяДвиженияДенежныхСредств)    КАК СтатьяДвиженияДенежныхСредств,
	|	МАКСИМУМ(ВспомогательнаяИнформация.ХозяйственнаяОперация)            КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ВспомогательнаяИнформация.ДокументРегистратор)              КАК ДокументРегистратор,
	|	
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток                             КАК Предоплата,
	|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток                         КАК ПредоплатаРегл,
	|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток                          КАК ПредоплатаУпр,
	|	РасчетыПоСрокамОстатки.ДолгОстаток                                   КАК Долг,
	|	РасчетыПоСрокамОстатки.ДолгРеглОстаток                               КАК ДолгРегл,
	|	РасчетыПоСрокамОстатки.ДолгУпрОстаток                                КАК ДолгУпр,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток <> 0                        КАК ЕстьПредоплата,
	|	РасчетыПоСрокамОстатки.ДолгОстаток <> 0                              КАК ЕстьДолг
	|ПОМЕСТИТЬ ВТРасчетыПоСрокамОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоДняПорядка, 
	|															АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|															И ОбъектРасчетов            = &ОбъектРасчетов
	|															И Валюта                    = &ВалютаРасчетов) КАК РасчетыПоСрокамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВспомогательнаяИнформация
	|			ПО РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам     = ВспомогательнаяИнформация.АналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокамОстатки.ОбъектРасчетов             = ВспомогательнаяИнформация.ОбъектРасчетов
	|				И РасчетыПоСрокамОстатки.Валюта                     = ВспомогательнаяИнформация.Валюта
	|				И РасчетыПоСрокамОстатки.РасчетныйДокумент          = ВспомогательнаяИнформация.РасчетныйДокумент
	|				И РасчетыПоСрокамОстатки.ДатаПлановогоПогашения     = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|				И РасчетыПоСрокамОстатки.ДатаВозникновения          = ВспомогательнаяИнформация.ДатаВозникновения
	|				И ВспомогательнаяИнформация.Активность
	|				И ВспомогательнаяИнформация.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ ТИПЗНАЧЕНИЯ(ВспомогательнаяИнформация.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц))
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
	|	РасчетыПоСрокамОстатки.ДолгОстаток,
	|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
	|	РасчетыПоСрокамОстатки.ДолгУпрОстаток,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток <> 0,
	|	РасчетыПоСрокамОстатки.ДолгОстаток <> 0
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕстьПредоплата,
	|	ЕстьДолг";
	
	ТекстЗапросаРасчетыДвижения = "
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ РасчетыДвижения
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Активность
	|	И Расчеты.ОбъектРасчетов            = &ОбъектРасчетов
	|	И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.Валюта                    = &ВалютаРасчетов
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И &УсловиеПорядок
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДвижения";
	
	//Планы оплат.
	ТекстЗапросаРасчетыПланОплатОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПланыОплатОстатки.ДокументПлан                     КАК ДокументПлан,
	|	РасчетыПланыОплатОстатки.ДатаПлановогоПогашения           КАК ДатаПлановогоПогашения,
	|	РасчетыПланыОплатОстатки.ДатаВозникновения                КАК ДатаВозникновения,
	|	РасчетыПланыОплатОстатки.ВариантОплаты                    КАК ВариантОплаты,
	|	РасчетыПланыОплатОстатки.НераспределенныйАванс            КАК НераспределенныйАванс,
	|	РасчетыПланыОплатОстатки.КОплатеОстаток                   КАК КОплате
	|	
	|ПОМЕСТИТЬ ВТРасчетыПланОплатОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки(&НачалоДняПорядка, 
	|															АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|															И ОбъектРасчетов            = &ОбъектРасчетов
	|															И Валюта                    = &ВалютаРасчетов) КАК РасчетыПланыОплатОстатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПлан,
	|	ДатаПлановогоПогашения";
	
	//Планы отгрузок.
	ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПланОтгрузокОстатки.ДокументПлан           КАК ДокументПлан,
	|	РасчетыПланОтгрузокОстатки.НераспределенныйАванс  КАК НераспределенныйАванс,
	|	РасчетыПланОтгрузокОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПланОтгрузокОстатки.ДатаВозникновения      КАК ДатаВозникновения,
	|	
	|	РасчетыПланОтгрузокОстатки.СуммаОстаток           КАК Сумма
	|	
	|ПОМЕСТИТЬ ВТРасчетыПланОтгрузокПоставокОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок.Остатки(&НачалоДняПорядка, 
	|															АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|															И ОбъектРасчетов            = &ОбъектРасчетов
	|															И Валюта                    = &ВалютаРасчетов) КАК РасчетыПланОтгрузокОстатки
	|";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,"И &УсловиеПорядок","И Расчеты.ПорядокОперации          >= &Порядок");
	Иначе
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,"И &УсловиеПорядок","");
	КонецЕсли;
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		ТекстЗапросаРасчетыДвижения = СтрЗаменить(ТекстЗапросаРасчетыДвижения,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
	КонецЕсли;
	
	Тексты = Новый Массив;
	Тексты.Добавить(ТекстЗапросаРасчетыПоСрокамОстатки);
	Тексты.Добавить(ТекстЗапросаРасчетыДвижения);
	Если ГлобальныеПеременные.РассчитыватьПлан Тогда
		Тексты.Добавить(ТекстЗапросаРасчетыПланОплатОстатки);
		Тексты.Добавить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки);
	КонецЕсли;
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	
	Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
			"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистрНакопления.РасчетыСКлиентамиПланОплат",
			"РегистрНакопления.РасчетыСПоставщикамиПланОплат");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистрНакопления.РасчетыСКлиентамиПланОтгрузок",
			"РегистрНакопления.РасчетыСПоставщикамиПланПоставок");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

//Возвращает записи до начала расчета (порядка), количество которых в служебном документе регистраторе меньше размера порции записи
Функция ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяТаблицы)
	
	Запрос.УстановитьПараметр("НачальноеЗаполнение", ГлобальныеПеременные.НачальноеЗаполнение);
	
	Если ГлобальныеПеременные.УчитыватьКоличествоЗаписейРегистраторовРасчетов Тогда
		
		Запрос.УстановитьПараметр("ИмяРегистра", ИмяТаблицы);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Таблица.Документ КАК Регистратор
		|ПОМЕСТИТЬ ВтПолныеРегистраторы
		|ИЗ
		|	РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК Таблица
		|ГДЕ
		|	Таблица.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И Таблица.ОбъектРасчетов = &ОбъектРасчетов
		|	И Таблица.Валюта = &ВалютаРасчетов
		|	И Таблица.ИмяТаблицы = &ИмяРегистра
		|	И Таблица.ПериодЗаписи < &НачалоДняПорядка
		|	И НЕ &НачальноеЗаполнение
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Документ
		|
		|ИМЕЮЩИЕ
		|	СУММА(Таблица.КоличествоЗаписей) = &РазмерПорцииЗаписи
		|;";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Таблица.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВтПолныеРегистраторы
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
		|	И Таблица.ОбъектРасчетов            = &ОбъектРасчетов
		|	И Таблица.Валюта                    = &ВалютаРасчетов
		|	И Таблица.Период                    < &НачалоДняПорядка
		|	И Таблица.Активность
		|	И НЕ &НачальноеЗаполнение
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Регистратор
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО(Таблица.НомерСтроки) = &РазмерПорцииЗаписи
		|;";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	ВтПолныеРегистраторы КАК Регистраторы
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПолныеРегистраторы КАК ВтПолныеРегистраторы
	|			ПО ВтПолныеРегистраторы.Регистратор = Таблица.Регистратор
	|ГДЕ
	|	ВтПолныеРегистраторы.Регистратор ЕСТЬ NULL //Если количество записей <> порции то они будут перераспределены.
	|	И Таблица.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|	И Таблица.ОбъектРасчетов            = &ОбъектРасчетов
	|	И Таблица.Валюта                    = &ВалютаРасчетов
	|	И Таблица.Период                    < &НачалоДняПорядка
	|	И Таблица.Активность
	|;
	|УНИЧТОЖИТЬ ВтПолныеРегистраторы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", "РегистрНакопления." + ИмяТаблицы);
	
	Если ИмяТаблицы = "РасчетыСКлиентамиПоСрокам" ИЛИ ИмяТаблицы = "РасчетыСПоставщикамиПоСрокам" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачалоДняПорядка", "&НачалоДняПорядкаФакт");
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ПолныеРегистраторы = Результаты[1].Выгрузить().ВыгрузитьКолонку("Регистратор");
	ГлобальныеПеременные.Вставить(ИмяТаблицы + "Регистраторы", ПолныеРегистраторы);
	
	ЗаписиДоНачалаРасчета = Результаты[2].Выгрузить();
	ЗаписиДоНачалаРасчета.Колонки.Добавить("ЗаписьДоНачалаРасчета", Новый ОписаниеТипов("Булево"));
	ЗаписиДоНачалаРасчета.ЗаполнитьЗначения(Истина,"ЗаписьДоНачалаРасчета");
	
	Возврат ЗаписиДоНачалаРасчета;
	
КонецФункции

//Возвращает таблицу оплат для распределения.
Функция ПолучитьОплаты(Запрос, ГлобальныеПеременные)
	Запрос.Текст = "
	//Для соединения один приемник ко многим источникам
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор,
	|	Расчеты.Период КАК Период,
	|	Расчеты.ВалютаДокумента КАК ВалютаДокумента,
	|	Расчеты.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Расчеты.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Расчеты.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.Сторно КАК Сторно,
	|	СУММА(Сумма) КАК Сумма
	|ПОМЕСТИТЬ ОтборыКорДвиженийОплат
	|ИЗ РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате < 0
	|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате < 0
	|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате > 0
	|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате > 0)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.Период,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.ИдентификаторФинЗаписи,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам,
	|	Расчеты.Сторно
	|;
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период                                      КАК Период,
	|	ВложенныйЗапрос.ДатаВозникновения                           КАК ДатаВозникновения,
	|	ВложенныйЗапрос.ДатаПлановогоПогашения                      КАК ДатаПлановогоПогашения,
	|	ВложенныйЗапрос.ПорядокОперации                             КАК ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) >= &НачалоДняПорядка
	|			ТОГДА ВложенныйЗапрос.Период
	|		ИНАЧЕ &НачалоДняПорядка
	|	КОНЕЦ                                                       КАК ПериодЗачета,
	|
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) >= &НачалоДняПорядка
	|			ТОГДА ВложенныйЗапрос.ПорядокОперации
	|		ИНАЧЕ &Порядок
	|	КОНЕЦ                                                       КАК ПорядокЗачета,
	|
	|	ВложенныйЗапрос.Регистратор                                 КАК Регистратор,
	|	ВложенныйЗапрос.РасчетныйДокумент                           КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Сторно                                      КАК Сторно,
	|	ВложенныйЗапрос.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	ВложенныйЗапрос.ЭтоКорректировка                            КАК ЭтоКорректировка,
	|	ВложенныйЗапрос.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.РучнойКурсРегл                              КАК РучнойКурсРегл,
	|	ВложенныйЗапрос.РучнойКурсУпр                               КАК РучнойКурсУпр,
	|	ВложенныйЗапрос.ВалютаДокумента                             КАК ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|	ВложенныйЗапрос.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
	|	ВложенныйЗапрос.ПриходДобавлен                              КАК ПриходДобавлен,
	|	ВложенныйЗапрос.ГрафикСписан                                КАК ГрафикСписан,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ)                                                       КАК Сумма,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ)                                                       КАК СуммаДляРаспределения,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаРегл < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.СуммаРегл
	|	КОНЕЦ)                                                       КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаУпр < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.СуммаУпр
	|	КОНЕЦ)                                                       КАК СуммаУпр,
	|	ВложенныйЗапрос.ЭтоОстаток                                   КАК ЭтоОстаток
	|ИЗ (
	|	ВЫБРАТЬ
	|		Расчеты.Период                                                   КАК Период,
	|		НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)                    КАК ДатаВозникновения,
	|		НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, ДЕНЬ)                         КАК ДатаПлановогоПогашения,
	|		Расчеты.ПорядокОперации                                          КАК ПорядокОперации,
	|		Расчеты.ПорядокЗачетаПоДатеПлатежа                               КАК ПорядокЗачетаПоДатеПлатежа,
	|		Расчеты.ВалютаДокумента                                          КАК ВалютаДокумента,
	|		Расчеты.СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
	|		Расчеты.НастройкаХозяйственнойОперации                           КАК НастройкаХозяйственнойОперации,
	|		Расчеты.ИдентификаторФинЗаписи                                   КАК ИдентификаторФинЗаписи,
	|		Расчеты.Регистратор                                              КАК Регистратор,
	|		Расчеты.СвязанныйДокумент                                        КАК СвязанныйДокумент,
	|		ВЫБОР 
	|			КОГДА Расчеты.РасчетныйДокумент = Неопределено 
	|					ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|				ТОГДА Расчеты.Регистратор 
	|			ИНАЧЕ Расчеты.РасчетныйДокумент
	|		КОНЕЦ                                                            КАК РасчетныйДокумент,
	|		Расчеты.КорОбъектРасчетов                                        КАК КорОбъектРасчетов,
	|		Расчеты.КорАналитикаУчетаПоПартнерам                             КАК КорАналитикаУчетаПоПартнерам,
	|		Расчеты.Сторно                                                   КАК Сторно,
	|		
	|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|		ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В
	|			(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ЛОЖЬ                                                             КАК ПриходДобавлен,
	|		ЛОЖЬ                                                             КАК ГрафикСписан,
	|		ВЫБОР
	|			КОГДА Расчеты.Сумма < 0 
	|				ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ                                                           КАК Сумма,
	|		ВЫБОР
	|			КОГДА Расчеты.СуммаРегл < 0 
	|				ТОГДА -Расчеты.СуммаРегл
	|			ИНАЧЕ Расчеты.СуммаРегл
	|		КОНЕЦ                                                           КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА Расчеты.СуммаУпр < 0 
	|				ТОГДА -Расчеты.СуммаУпр
	|			ИНАЧЕ Расчеты.СуммаУпр
	|		КОНЕЦ                                                           КАК СуммаУпр,
	|		Расчеты.ВалютаДокумента = &ВалютаРегл 
	|			ИЛИ &ВалютаРасчетов = &ВалютаРегл
	|			ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности              КАК РучнойКурсРегл,
	|		Расчеты.ВалютаДокумента = &ВалютаУпр 
	|			ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|			ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности              КАК РучнойКурсУпр,
	|		ЛОЖЬ                                                                              КАК ЭтоОстаток
	|	ИЗ
	|		РасчетыДвижения КАК Расчеты
	|	ГДЕ
	|		Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате < 0
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате < 0
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате > 0
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами И Расчеты.Сумма + Расчеты.КОплате > 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.Период                                                   КАК Период,
	|		РасчетыПоСрокам.ДатаВозникновения                                КАК ДатаВозникновения,
	|		РасчетыПоСрокам.ДатаПлановогоПогашения                           КАК ДатаПлановогоПогашения,
	|		РасчетыПоСрокам.ПорядокОперации                                  КАК ПорядокОперации,
	|		РасчетыПоСрокам.ПорядокЗачета                                    КАК ПорядокЗачетаПоДатеПлатежа,
	|		Расчеты.ВалютаДокумента                                          КАК ВалютаДокумента,
	|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств                    КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоСрокам.НастройкаХозяйственнойОперации                   КАК НастройкаХозяйственнойОперации,
	|		Расчеты.ИдентификаторФинЗаписи                                   КАК ИдентификаторФинЗаписи,
	|		Расчеты.Регистратор                                              КАК Регистратор,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		РасчетыПоСрокам.РасчетныйДокумент                                КАК РасчетныйДокумент,
	|		Расчеты.КорОбъектРасчетов                                        КАК КорОбъектРасчетов,
	|		Расчеты.КорАналитикаУчетаПоПартнерам                             КАК КорАналитикаУчетаПоПартнерам,
	|		Расчеты.Сторно                                                   КАК Сторно,
	|		
	|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|		ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В
	|			(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ЛОЖЬ                                                             КАК ПриходДобавлен,
	|		ЛОЖЬ                                                             КАК ГрафикСписан,
	|		РасчетыПоСрокам.Долг + РасчетыПоСрокам.Предоплата                КАК Сумма,
	|		РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл        КАК СуммаРегл,
	|		РасчетыПоСрокам.ПредоплатаУпр + РасчетыПоСрокам.ДолгУпр          КАК СуммаУпр,
	|		ЛОЖЬ                                                             КАК РучнойКурсРегл,
	|		ЛОЖЬ                                                             КАК РучнойКурсУпр,
	|		ЛОЖЬ                                                             КАК ЭтоОстаток
	|	ИЗ
	|		ОтборыКорДвиженийОплат КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам 
	|				ПО Расчеты.Регистратор = РасчетыПоСрокам.ДокументРегистратор
	|					И Расчеты.КорОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
	|					И Расчеты.КорАналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
	|					И РасчетыПоСрокам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|					И (РасчетыПоСрокам.ОбъектРасчетов <> &ОбъектРасчетов ИЛИ РасчетыПоСрокам.АналитикаУчетаПоПартнерам <> &АналитикаУчетаПоПартнерам)
	|					И РасчетыПоСрокам.Активность
	|					И (РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоСрокам.Долг > 0 
	|						ИЛИ РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоСрокам.Предоплата > 0 )
	|					И Расчеты.Сторно = РасчетыПоСрокам.Сторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиОплат.Период                                                                    КАК Период,
	|		ОстаткиОплат.ДатаВозникновения                                                         КАК ДатаВозникновения,
	|		ОстаткиОплат.ДатаПлановогоПогашения                                                    КАК ДатаПлановогоПогашения,
	|		ОстаткиОплат.ПорядокЗачета                                                             КАК ПорядокОперации,
	|		ОстаткиОплат.ПорядокЗачета                                                             КАК ПорядокЗачетаПоДатеПлатежа,
	|		ОстаткиОплат.ВалютаДокумента                                                           КАК ВалютаДокумента,
	|		ОстаткиОплат.СтатьяДвиженияДенежныхСредств                                             КАК СтатьяДвиженияДенежныхСредств,
	|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)                       КАК НастройкаХозяйственнойОперации,
	|		&ИдентификаторНеиспользуемойФинЗаписи                                                  КАК ИдентификаторФинЗаписи,
	|		ОстаткиОплат.ДокументРегистратор                                                       КАК Регистратор,
	|		ОстаткиОплат.СвязанныйДокумент                                                         КАК СвязанныйДокумент,
	|		ОстаткиОплат.РасчетныйДокумент                                                         КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                                      КАК КорОбъектРасчетов,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)                       КАК КорАналитикаУчетаПоПартнерам,
	|		ЛОЖЬ                                                                                   КАК Сторно,
	|		ОстаткиОплат.ХозяйственнаяОперация                                                     КАК ХозяйственнаяОперация,
	|	
	|		ТИПЗНАЧЕНИЯ(ОстаткиОплат.РасчетныйДокумент) В (ТИП(Документ.КорректировкаРеализации),
	|		                                              ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ИСТИНА                                                                                 КАК ПриходДобавлен,
	|		ИСТИНА                                                                                 КАК ГрафикСписан,
	|
	|		ОстаткиОплат.Предоплата                                                                КАК Сумма,
	|		ОстаткиОплат.ПредоплатаРегл                                                            КАК СуммаРегл,
	|		ОстаткиОплат.ПредоплатаУпр                                                             КАК СуммаУпр,
	|		ОстаткиОплат.ВалютаДокумента = &ВалютаРегл 
	|			ИЛИ &ВалютаРасчетов = &ВалютаРегл
	|			ИЛИ ОстаткиОплат.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности      КАК РучнойКурсРегл,
	|		ОстаткиОплат.ВалютаДокумента = &ВалютаУпр 
	|			ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|			ИЛИ ОстаткиОплат.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности      КАК РучнойКурсУпр,
	|		ИСТИНА                                                                                 КАК ЭтоОстаток
	|	ИЗ
	|		ВТРасчетыПоСрокамОстатки КАК ОстаткиОплат
	|	ГДЕ
	|		ОстаткиОплат.ЕстьПредоплата) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.ДатаВозникновения,
	|	ВложенныйЗапрос.ДатаПлановогоПогашения,
	|	ВложенныйЗапрос.ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа,
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.РасчетныйДокумент,
	|	ВложенныйЗапрос.КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Сторно,
	|	ВложенныйЗапрос.СвязанныйДокумент,
	|	ВложенныйЗапрос.ЭтоКорректировка,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВложенныйЗапрос.РучнойКурсРегл,
	|	ВложенныйЗапрос.РучнойКурсУпр,
	|	ВложенныйЗапрос.ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.ПриходДобавлен,
	|	ВложенныйЗапрос.ГрафикСписан,
	|	ВложенныйЗапрос.ЭтоОстаток,
	|	ВложенныйЗапрос.НастройкаХозяйственнойОперации,
	|	ВложенныйЗапрос.ИдентификаторФинЗаписи
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ) > 0
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОперации ВОЗР,
	|	ВЫБОР КОГДА ВложенныйЗапрос.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВложенныйЗапрос.ДатаПлановогоПогашения
	|";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","И Расчеты.ПорядокОперации >= &Порядок");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПорядок", "");
	КонецЕсли;
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам ","РегистрНакопления.РасчетыСПоставщикамиПоСрокам ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
	КонецЕсли;
	
	Результат     = Запрос.Выполнить();
	РасчетыОплаты = Результат.Выгрузить();
	
	Возврат РасчетыОплаты;
	
КонецФункции

// Возвращает таблицу отгрузок/поставок для распределения.
// 
// Параметры:
//  Запрос - Запрос - Запрос
//  ГлобальныеПеременные -  Структура - Параметры пересчета, см. СтруктураПараметровЗаполненияВзаиморасчетов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица отгрузок/поставок:
//   * Период - Дата
//   * ДатаПлановогоПогашения - Дата
//   * ДатаВозникновения - Дата
//   * ПорядокОперации - Строка
//   * ПорядокЗачетаПоДатеПлатежа - Строка
//   * Регистратор - ДокументСсылка
//   * Заказ - ДокументСсылка
//   * РасчетныйДокумент - ОпределяемыйТип.РасчетныйДокумент
//   * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
//   * КорОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов
//   * КорАналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
//   * Сторно - Булево
//   * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаДляРаспределения - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаРегл - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаУпр - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаРеглДляПереоценки - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * СуммаУпрДляПереоценки - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * КОтгрузкеПоставке - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака 
//   * ПриходДобавлен - Булево
//   * ПланОтгрузокПоставокСписан - Булево
//   * ЕстьОстаток - Булево
//   * ЭтоОстаток - Булево
//   * КурсРегл - Число
//   * КурсУпр - Число
//   * ВалютаДокумента - СправочникСсылка.Валюты
//   * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств
//   * ИдентификаторФинЗаписи - Строка
//   * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций
//   * ДатаПереоценки - Дата
//   * СвязанныйДокумент - ДокументСсылка
//   * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом, ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику - вариант оплаты
//   * ПериодЗачета - Дата
//   * ПорядокЗачета - Строка
//   * РучнойКурсРегл - Булево
//   * РучнойКурсУпр - Булево
//   * ЭтоВозвратАванса - Булево
//   * ЭтоКорректировка - Булево
Функция ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР КОГДА (Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|						ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|					И Расчеты.Период > Расчеты.ДатаРегистратора
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ)                                              КАК Период,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ)                                       КАК ДатаПлановогоПогашения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)       КАК ДатаВозникновения,
	|	Расчеты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты                               КАК ВариантОплаты,
	|	Расчеты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	Расчеты.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.Сторно                                      КАК Сторно,
	|
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности ТОГДА &ГрафикИсполненияДоговора
	|		ИНАЧЕ Расчеты.ПродажаПоЗаказу 
	|	КОНЕЦ                                               КАК Заказ,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|			ТОГДА Расчеты.Регистратор 
	|		ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ                                               КАК РасчетныйДокумент,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ) < 0 ТОГДА 0
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ)
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА  Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.КОтгрузке 
	|			ИНАЧЕ Расчеты.КОтгрузке 
	|		КОНЕЦ) КАК КОтгрузкеПоставке
	|	
	|ПОМЕСТИТЬ ВТРасчетыОтгрузкиПоставкиДвижения
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ > 0 
	|	
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ),
	|	Расчеты.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности ТОГДА &ГрафикИсполненияДоговора
	|		ИНАЧЕ Расчеты.ПродажаПоЗаказу 
	|	КОНЕЦ,
	|	Расчеты.ВариантОплаты,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам,
	|	Расчеты.Сторно,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|		ТОГДА Расчеты.Регистратор 
	|	ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыОтгрузкиПоставки.Регистратор КАК Регистратор,
	|	РасчетыОтгрузкиПоставки.Период КАК Период,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента КАК ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты КАК ВариантОплаты,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно КАК Сторно,
	|	СУММА(Сумма) КАК Сумма,
	|	СУММА(КОтгрузкеПоставке) КАК КОтгрузкеПоставке
	|ПОМЕСТИТЬ ОтборыКорДвижений
	|ИЗ ВТРасчетыОтгрузкиПоставкиДвижения КАК РасчетыОтгрузкиПоставки
	|ГДЕ 
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыОтгрузкиПоставки.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	РасчетыОтгрузкиПоставки.Регистратор,
	|	РасчетыОтгрузкиПоставки.Период,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокамОстатки.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ ВтРегистраторыОстатков
	|ИЗ
	|	ВТРасчетыПоСрокамОстатки КАК РасчетыПоСрокамОстатки
	|ГДЕ
	|	РасчетыПоСрокамОстатки.ЕстьДолг
	|;
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период                            КАК Период,
	|	ВложенныйЗапрос.ДатаПлановогоПогашения            КАК ДатаПлановогоПогашения,
	|	ВложенныйЗапрос.ДатаВозникновения                 КАК ДатаВозникновения,
	|	ВложенныйЗапрос.ПорядокОперации                   КАК ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа        КАК ПорядокЗачетаПоДатеПлатежа,
	|	ВложенныйЗапрос.Регистратор                       КАК Регистратор,
	|	ВложенныйЗапрос.Заказ                             КАК Заказ,
	|	ВложенныйЗапрос.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам      КАК КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Сторно                            КАК Сторно,
	|
	|	ВложенныйЗапрос.Сумма                             КАК Сумма,
	|	ВложенныйЗапрос.СуммаРегл                         КАК СуммаРегл,
	|	ВложенныйЗапрос.СуммаУпр                          КАК СуммаУпр,
	|
	|	ВложенныйЗапрос.ВалютаДокумента                   КАК ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств     КАК СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.ИдентификаторФинЗаписи            КАК ИдентификаторФинЗаписи,
	|	ВложенныйЗапрос.НастройкаХозяйственнойОперации    КАК НастройкаХозяйственнойОперации,
	|	ВложенныйЗапрос.ДатаПереоценки                    КАК ДатаПереоценки,
	|	ВложенныйЗапрос.СвязанныйДокумент                 КАК СвязанныйДокумент,
	|	ВложенныйЗапрос.ВариантОплаты                     КАК ВариантОплаты,
	|	ВложенныйЗапрос.ЭтоОстаток                        КАК ЭтоОстаток
	|ПОМЕСТИТЬ ВтРасчетыОтгрузкиПоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|	РасчетыОтгрузкиПоставки.Период                        КАК Период,
	|	РасчетыОтгрузкиПоставки.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	РасчетыОтгрузкиПоставки.ДатаВозникновения             КАК ДатаВозникновения,
	|	РасчетыОтгрузкиПоставки.ПорядокОперации               КАК ПорядокОперации,
	|	РасчетыОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа    КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыОтгрузкиПоставки.Регистратор                   КАК Регистратор,
	|	РасчетыОтгрузкиПоставки.Заказ                         КАК Заказ,
	|	РасчетыОтгрузкиПоставки.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов             КАК КорОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно                        КАК Сторно,
	|	
	|	РасчетыОтгрузкиПоставки.Сумма                         КАК Сумма,
	|	РасчетыОтгрузкиПоставки.СуммаРегл                     КАК СуммаРегл,
	|	РасчетыОтгрузкиПоставки.СуммаУпр                      КАК СуммаУпр,
	|	
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента               КАК ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	РасчетыОтгрузкиПоставки.Период                         КАК ДатаПереоценки,
	
	|	РасчетыОтгрузкиПоставки.СвязанныйДокумент                                           КАК СвязанныйДокумент,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты                                               КАК ВариантОплаты,
	|	ЛОЖЬ                                                                                КАК ЭтоОстаток
	|	
	|ИЗ ВТРасчетыОтгрузкиПоставкиДвижения КАК РасчетыОтгрузкиПоставки
	|ГДЕ
	|	РасчетыОтгрузкиПоставки.Сумма <> 0
	|	И РасчетыОтгрузкиПоставки.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыОтгрузкиПоставки.Период                                                      КАК Период,
	|	ВЫБОР КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА РасчетыПоСрокам.ДатаВозникновения
	|		ИНАЧЕ РасчетыПоСрокам.ДатаПлановогоПогашения
	|	КОНЕЦ                                                                               КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ДатаВозникновения                                                   КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации                                                     КАК ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачета                                                       КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыОтгрузкиПоставки.Регистратор                                                 КАК Регистратор,
	|	Неопределено                                                                        КАК Заказ,
	|	РасчетыПоСрокам.РасчетныйДокумент                                                   КАК РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация                                       КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                                   КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)                    КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно                                                      КАК Сторно,
	|	
	|	РасчетыПоСрокам.Долг + РасчетыПоСрокам.Предоплата                                   КАК Сумма,
	|	РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл                           КАК СуммаРегл,
	|	РасчетыПоСрокам.ДолгУпр + РасчетыПоСрокам.ПредоплатаУпр                             КАК СуммаУпр,
	|	
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента               КАК ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи                КАК ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации        КАК НастройкаХозяйственнойОперации,
	|	РасчетыОтгрузкиПоставки.Период                        КАК ДатаПереоценки,
	|	Неопределено                                          КАК СвязанныйДокумент,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты                 КАК ВариантОплаты,
	|	ЛОЖЬ                                                  КАК ЭтоОстаток
	|	
	|ИЗ ОтборыКорДвижений КАК РасчетыОтгрузкиПоставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам 
	|				ПО РасчетыОтгрузкиПоставки.Регистратор = РасчетыПоСрокам.ДокументРегистратор
	|				И РасчетыОтгрузкиПоставки.КорОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
	|				И РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|				И РасчетыПоСрокам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|				И (РасчетыПоСрокам.ОбъектРасчетов <> &ОбъектРасчетов ИЛИ РасчетыПоСрокам.АналитикаУчетаПоПартнерам <> &АналитикаУчетаПоПартнерам)
	|				И (РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоСрокам.Долг > 0
	|							ИЛИ РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоСрокам.Предоплата > 0)
	|				И РасчетыОтгрузкиПоставки.Сторно = РасчетыПоСрокам.Сторно
	|				И РасчетыПоСрокам.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.Период                                   КАК Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения                   КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                        КАК ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ПорядокОперации                          КАК ПорядокОперации,
	|	РасчетыПоСрокамОстатки.ПорядокЗачета                            КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокамОстатки.ДокументРегистратор                      КАК Регистратор,
	|	Неопределено                                                    КАК Заказ,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                        КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	ЛОЖЬ                                                             КАК Сторно,
	|
	|	РасчетыПоСрокамОстатки.Долг                                     КАК Сумма,
	|	РасчетыПоСрокамОстатки.ДолгРегл                                 КАК СуммаРегл,
	|	РасчетыПоСрокамОстатки.ДолгУпр                                  КАК СуммаУпр,
	|
	|	РасчетыПоСрокамОстатки.ВалютаДокумента                          КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
	|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации,
	|	&ДатаПереоценки                                                 КАК ДатаПереоценки,
	|	РасчетыПоСрокамОстатки.СвязанныйДокумент КАК СвязанныйДокумент,
	|	Неопределено КАК ВариантОплаты,
	|	ИСТИНА КАК ЭтоОстаток
	|ИЗ
	|	ВТРасчетыПоСрокамОстатки КАК РасчетыПоСрокамОстатки
	|ГДЕ
	|	РасчетыПоСрокамОстатки.ЕстьДолг) КАК ВложенныйЗапрос
	|;
	|ВЫБРАТЬ
	|	РасчетыПоСрокам.Период                            КАК Период,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения            КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ДатаВозникновения                 КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации                   КАК ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа        КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокам.Регистратор                       КАК Регистратор,
	|	РасчетыПоСрокам.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
	|	РасчетыПоСрокам.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|	РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам      КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.Сторно                            КАК Сторно,
	|
	|	СУММА(РасчетыПоСрокам.Сумма)                      КАК Сумма,
	|	СУММА(РасчетыПоСрокам.Сумма)                      КАК СуммаДляРаспределения,
	|	СУММА(РасчетыПоСрокам.Сумма)                      КАК ИсходнаяСумма,
	|	СУММА(РасчетыПоСрокам.СуммаРегл)                  КАК СуммаРегл,
	|	СУММА(РасчетыПоСрокам.СуммаРегл)                  КАК СуммаРеглДляПереоценки,
	|	СУММА(РасчетыПоСрокам.СуммаРегл)                  КАК ИсходнаяСуммаРегл,
	|	СУММА(РасчетыПоСрокам.СуммаУпр)                   КАК СуммаУпр,
	|	СУММА(РасчетыПоСрокам.СуммаУпр)                   КАК СуммаУпрДляПереоценки,
	|	СУММА(РасчетыПоСрокам.СуммаУпр)                   КАК ИсходнаяСуммаУпр,
	|
	|	РасчетыПоСрокам.ЭтоОстаток                        КАК ПриходДобавлен,
	|	РасчетыПоСрокам.ЭтоОстаток                        КАК ПланОтгрузокПоставокСписан,
	|	РасчетыПоСрокам.Сумма <> 0                        КАК ЕстьОстаток,
	|	РасчетыПоСрокам.ЭтоОстаток                        КАК ЭтоОстаток,
	|
	|	РасчетыПоСрокам.ВалютаДокумента                   КАК ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств     КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи            КАК ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации    КАК НастройкаХозяйственнойОперации,
	|	РасчетыПоСрокам.ДатаПереоценки                    КАК ДатаПереоценки,
	|	РасчетыПоСрокам.СвязанныйДокумент                 КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА &ЗачетОплатПоДатеПлатежа ТОГДА
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения >= НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)
	|				И РасчетыПоСрокам.ДатаПлановогоПогашения >= &НачалоДняПорядка
	|				ТОГДА РасчетыПоСрокам.ДатаПлановогоПогашения
	|			КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)
	|				И НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ) >= &НачалоДняПорядка
	|				ТОГДА РасчетыПоСрокам.Период
	|			ИНАЧЕ &НачалоДняПорядка
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ) >= &НачалоДняПорядка
	|				ТОГДА РасчетыПоСрокам.Период
	|			ИНАЧЕ &НачалоДняПорядка
	|		КОНЕЦ
	|	КОНЕЦ                                                                               КАК ПериодЗачета,
	|
	|	ВЫБОР КОГДА &ЗачетОплатПоДатеПлатежа ТОГДА
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения >= НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)
	|				И РасчетыПоСрокам.ДатаПлановогоПогашения >= &НачалоДняПорядка
	|				ТОГДА РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа
	|			КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)
	|				И НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ) >= &НачалоДняПорядка
	|				ТОГДА РасчетыПоСрокам.ПорядокОперации
	|			ИНАЧЕ &Порядок
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ) >= &НачалоДняПорядка
	|				ТОГДА РасчетыПоСрокам.ПорядокОперации
	|			ИНАЧЕ &Порядок
	|		КОНЕЦ
	|	КОНЕЦ                                                                               КАК ПорядокЗачета,
	|
	|	РасчетыПоСрокам.ВалютаДокумента = &ВалютаРегл 
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация В (&НепересчитываемыеХО)              КАК РучнойКурсРегл,
	|	РасчетыПоСрокам.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ &ВалютаРасчетов =&ВалютаУпр
	|		ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация В (&НепересчитываемыеХО)              КАК РучнойКурсУпр,
	|	ВЫБОР
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыПоСрокам.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокам.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыПоСрокам.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокам.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                               КАК ЭтоВозвратАванса,
	|	ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.Регистратор) В (
	|		ТИП(Документ.КорректировкаРеализации), ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка
	|
	|ИЗ
	|	ВтРасчетыОтгрузкиПоставки КАК РасчетыПоСрокам
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокам.Период,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокам.Регистратор,
	|	РасчетыПоСрокам.РасчетныйДокумент,
	|	РасчетыПоСрокам.ХозяйственнаяОперация,
	|	РасчетыПоСрокам.КорОбъектРасчетов,
	|	РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.Сторно,
	|	РасчетыПоСрокам.ЭтоОстаток,
	|	РасчетыПоСрокам.Сумма <> 0,
	|	РасчетыПоСрокам.ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации,
	|	РасчетыПоСрокам.ДатаПереоценки,
	|	РасчетыПоСрокам.СвязанныйДокумент
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР КОГДА &ЗачетОплатПоДатеПлатежа ТОГДА
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения >= НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)
	|				ТОГДА РасчетыПоСрокам.ПорядокЗачетаПоДатеПлатежа
	|			ИНАЧЕ РасчетыПоСрокам.ПорядокОперации
	|		КОНЕЦ
	|	ИНАЧЕ
	|		РасчетыПоСрокам.ПорядокОперации
	|	КОНЕЦ";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","И Расчеты.ПорядокОперации          >= &Порядок");
		Если Запрос.Параметры.Регистратор = Тип("ДокументСсылка.ВводОстатков")
			Или Запрос.Параметры.Регистратор = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
			Запрос.УстановитьПараметр("ДатаПереоценки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлобальныеПеременные.Регистратор, "Дата"));
		Иначе
			Запрос.УстановитьПараметр("ДатаПереоценки",НачалоДня(Дата(Лев(ГлобальныеПеременные.Порядок,8))-1));
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДатаПереоценки","РасчетыПоСрокамОстатки.Период");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","");
	КонецЕсли;
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам ","РегистрНакопления.РасчетыСПоставщикамиПоСрокам ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке ","КПоступлению ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПродажаПоЗаказу ","ЗакупкаПоЗаказу ");
	КонецЕсли;
	
	Результат       = Запрос.Выполнить();
	РасчетыОтгрузки = Результат.Выгрузить();
	РасчетыОтгрузки.Индексы.Добавить("ЕстьОстаток, Регистратор");
	Возврат РасчетыОтгрузки;
	
КонецФункции

//Возвращает таблицу курсов валют на промежуток между первой записью расчетов и текущей датой.
Функция ПолучитьКурсыВалют(Запрос, ДатаНачала, ГлобальныеПеременные)
	
	ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	
	СоздатьТаблицуДатЗаПериод(Запрос.МенеджерВременныхТаблиц,"ТаблицаДат",ДатаНачала,ДатаОкончания);
	
	Запрос.УстановитьПараметр("ДатаНачала",                 НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",              ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаУпр",                  ГлобальныеПеременные.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",                 ГлобальныеПеременные.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Договор",                    ГлобальныеПеременные.Договор);
	Запрос.УстановитьПараметр("КурсУстановленныйВДоговоре", ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре);
	
	Если ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Курсы.Дата КАК Дата,
		|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
		|	СУММА(Курсы.КурсУпр) КАК КурсУпр
		|ИЗ
		|	(ВЫБРАТЬ
		|		КурсыВалютыРасчетов.Период КАК Дата,
		|		ВЫБОР КОГДА &ВалютаРасчетов <> &ВалютаРегл
		|				ТОГДА ЕСТЬNULL(КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель,0)
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК КурсРегл,
		|		0 КАК КурсУпр
		|	ИЗ
		|		ТаблицаДат КАК ТаблицаДат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам КАК КурсыВалютыРасчетов
		|				ПО ТаблицаДат.Дата = КурсыВалютыРасчетов.Период
		|					И КурсыВалютыРасчетов.Договор = &Договор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДат.Дата КАК Дата,
		|		0 КАК КурсРегл,
		|		ВЫБОР КОГДА &ВалютаРегл <> &ВалютаУпр
		|				ТОГДА ЕСТЬNULL(КурсыВалютыУпр.КурсЧислитель / КурсыВалютыУпр.КурсЗнаменатель,0)
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК КурсУпр
		|	ИЗ
		|		ТаблицаДат КАК ТаблицаДат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыУпр
		|				ПО ТаблицаДат.Дата = КурсыВалютыУпр.Период
		|					И КурсыВалютыУпр.Валюта = &ВалютаУпр
		|					И КурсыВалютыУпр.БазоваяВалюта = &ВалютаРегл) КАК Курсы
		|
		|СГРУППИРОВАТЬ ПО
		|	Дата
		|УПОРЯДОЧИТЬ ПО
		|	Дата ВОЗР
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Курсы.Дата КАК Дата,
		|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
		|	СУММА(Курсы.КурсУпр) КАК КурсУпр
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаДат.Дата КАК Дата,
		|		ЕСТЬNULL(ВЫБОР КОГДА КурсыВалютыРасчетов.Валюта = &ВалютаРасчетов И &ВалютаРасчетов <> &ВалютаРегл
		|					ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
		|					ИНАЧЕ 0
		|				КОНЕЦ,
		|				ВЫБОР КОГДА &ВалютаРегл = &ВалютаРасчетов
		|					ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК КурсРегл,
		|		ЕСТЬNULL(ВЫБОР КОГДА КурсыВалютыРасчетов.Валюта = &ВалютаУпр И &ВалютаРегл <> &ВалютаУпр
		|					ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
		|					ИНАЧЕ 0
		|				КОНЕЦ,
		|				ВЫБОР КОГДА &ВалютаРегл = &ВалютаУпр
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК КурсУпр
		|	ИЗ
		|		ТаблицаДат КАК ТаблицаДат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыРасчетов
		|				ПО ТаблицаДат.Дата = КурсыВалютыРасчетов.Период
		|					И КурсыВалютыРасчетов.БазоваяВалюта = &ВалютаРегл
		|					И КурсыВалютыРасчетов.Валюта В (&ВалютаРасчетов,&ВалютаУпр)) КАК Курсы
		|
		|СГРУППИРОВАТЬ ПО
		|	Дата
		|УПОРЯДОЧИТЬ ПО
		|	Дата ВОЗР
		|";
	КонецЕсли;
	
	КурсыВалюты =  Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
	|	СУММА(Курсы.КурсУпр) КАК КурсУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалютыРасчетов.Период КАК Дата,
	|		ВЫБОР КОГДА НЕ &КурсУстановленныйВДоговоре И КурсыВалютыРасчетов.Валюта = &ВалютаРасчетов 
	|			ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КурсРегл,
	|		ВЫБОР КОГДА КурсыВалютыРасчетов.Валюта = &ВалютаУпр 
	|			ТОГДА КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаНачала, БазоваяВалюта = &ВалютаРегл И Валюта В (&ВалютаРасчетов,&ВалютаУпр)) КАК КурсыВалютыРасчетов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ 
	|	
	|	ВЫБРАТЬ
	|		КурсыВалютыРасчетов.Период КАК Дата,
	|		КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель  КАК КурсРегл,
	|		0 КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(&ДатаНачала, Договор = &Договор) КАК КурсыВалютыРасчетов
	|	ГДЕ &КурсУстановленныйВДоговоре) КАК Курсы
	|;";
	
	КурсыВалютСрезПоследних = Запрос.Выполнить().Выгрузить();
	
	ТекущийКурсРегл = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КурсРегл, 1);
	ТекущийКурсУпр = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КурсУпр, 1);
	
	ТекущийКурсРегл = ?(ЗначениеЗаполнено(ТекущийКурсРегл), ТекущийКурсРегл, 1);
	ТекущийКурсУпр =  ?(ЗначениеЗаполнено(ТекущийКурсУпр), ТекущийКурсУпр, 1);
	
	СтрокиСПустымКурсомРегл = КурсыВалюты.НайтиСтроки(Новый Структура("КурсРегл", 0));
	Для Каждого СтрокаПустогоКурса ИЗ СтрокиСПустымКурсомРегл Цикл
		Если КурсыВалюты.Индекс(СтрокаПустогоКурса) = 0 Тогда 
			СтрокаПустогоКурса.КурсРегл = ТекущийКурсРегл;
			Если НЕ ЗначениеЗаполнено(СтрокаПустогоКурса.КурсУпр) Тогда
				СтрокаПустогоКурса.КурсУпр = ТекущийКурсУпр;
			КонецЕсли;
		Иначе
			СтрокаПустогоКурса.КурсРегл = КурсыВалюты[КурсыВалюты.Индекс(СтрокаПустогоКурса)-1].КурсРегл;
			Если НЕ ЗначениеЗаполнено(СтрокаПустогоКурса.КурсУпр) Тогда
				СтрокаПустогоКурса.КурсУпр = КурсыВалюты[КурсыВалюты.Индекс(СтрокаПустогоКурса)-1].КурсУпр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСПустымКурсомУпр = КурсыВалюты.НайтиСтроки(Новый Структура("КурсУпр", 0));
	Для Каждого СтрокаПустогоКурса ИЗ СтрокиСПустымКурсомУпр Цикл
		Если КурсыВалюты.Индекс(СтрокаПустогоКурса) = 0 Тогда 
			СтрокаПустогоКурса.КурсУпр = ТекущийКурсУпр;
		Иначе
			СтрокаПустогоКурса.КурсУпр = КурсыВалюты[КурсыВалюты.Индекс(СтрокаПустогоКурса)-1].КурсУпр;
		КонецЕсли;
	КонецЦикла;
	
	КурсыВалюты.Индексы.Добавить("Дата");
	
	Возврат КурсыВалюты;
	
КонецФункции

//Возвращает таблицу накладных и зачтенных на них, на момент пересчета, авансов.
Функция ПолучитьДанныеНакладных(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВТРасчетыПоСрокамДо.ДокументРегистратор КАК Накладная,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.Предоплата - ВТРасчетыПоСрокамДо.Долг
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.Долг
	|		КОНЕЦ,0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаРегл - ВТРасчетыПоСрокамДо.ДолгРегл
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгРегл
	|		КОНЕЦ,0)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаУпр - ВТРасчетыПоСрокамДо.ДолгУпр
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгУпр
	|		КОНЕЦ,0)) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВТРасчетыПоСрокамДо
	|ГДЕ
	|	ВТРасчетыПоСрокамДо.ДокументРегистратор В (&МассивСвязанныхДокументов)
	|		И ВТРасчетыПоСрокамДо.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|		И ВТРасчетыПоСрокамДо.ОбъектРасчетов              = &ОбъектРасчетов
	|		И ВТРасчетыПоСрокамДо.Валюта                      = &ВалютаРасчетов
	|		И ВТРасчетыПоСрокамДо.ПорядокОперации             < &Порядок
	|		И НЕ ВТРасчетыПоСрокамДо.ДокументРегистратор      = &Регистратор
	|		И ВТРасчетыПоСрокамДо.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасчетыПоСрокамДо.ДокументРегистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка              КАК Накладная,
	|	СвязанныеДокументы.СуммаВзаиморасчетов КАК Сумма,
	|	СвязанныеДокументы.СуммаРегл           КАК СуммаРегл,
	|	СвязанныеДокументы.СуммаУпр            КАК СуммаУпр
	|ИЗ
	|	Документ.ПервичныйДокумент КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка В (&МассивСвязанныхДокументов)
	|";
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");		
	КонецЕсли;
	
	ДанныеНакладных = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеНакладных
	
КонецФункции

// Остатки предоплаты на начало пересчета.
// 
// Параметры:
//  Запрос - Запрос - Запрос
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ОстаткиНераспределенныхАвансовПлановойОплатыНаНачалоПересчета(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.РасчетныйДокумент       КАК РасчетныйДокумент,
		|	МАКСИМУМ(Остатки.ДатаВозникновения)       КАК ДатаВозникновения,
		|	МАКСИМУМ(Остатки.ДатаПлановогоПогашения)  КАК ДатаПлановогоПогашения,
		|	МАКСИМУМ(Остатки.ПорядокОперации)         КАК ПорядокОперации
		|ПОМЕСТИТЬ ВтДокументыПредоплаты
		|ИЗ
		|	ВТРасчетыПоСрокамОстатки КАК Остатки
		|ГДЕ
		|	Остатки.Предоплата >0
		|СГРУППИРОВАТЬ ПО
		|	Остатки.РасчетныйДокумент
		|;
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДатаВозникновения КАК ДатаДвижения,
		|	ВложенныйЗапрос.ДокументПлан      КАК ДокументПлан,
		|	ВложенныйЗапрос.ДатаВозникновения КАК ДатаВозникновения,
		|	ВложенныйЗапрос.ДатаПлановогоПогашения   КАК ДатаПлановогоПогашения,
		|
		|	ВложенныйЗапрос.ДокументПлан      КАК Регистратор,
		|	ВложенныйЗапрос.ПорядокОперации   КАК ПорядокОперации,
		|	ВложенныйЗапрос.Зачтено           КАК Зачтено,
		|	ИСТИНА                            КАК Просуммировано,
		|	СУММА(ВложенныйЗапрос.Сумма)      КАК Сумма,
		|	СУММА(ВложенныйЗапрос.Сумма) > 0  КАК ОстатокПоложительный
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		Расчеты.ДокументРегистратор КАК ДокументПлан,
		|		Расчеты.ДатаВозникновения   КАК ДатаВозникновения,
		|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
		|		Расчеты.ПорядокОперации     КАК ПорядокОперации,
		|		ЛОЖЬ                        КАК Зачтено,
		|		Расчеты.Предоплата          КАК Сумма
		|	ИЗ
		|		ВТРасчетыПоСрокамОстатки КАК Расчеты
		|	ГДЕ
		|		Расчеты.Предоплата > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДокументыПредоплаты.РасчетныйДокумент                КАК ДокументПлан,
		|		ДокументыПредоплаты.ДатаВозникновения                КАК ДатаВозникновения,
		|		ДокументыПредоплаты.ДатаПлановогоПогашения           КАК ДатаПлановогоПогашения,
		|		ДокументыПредоплаты.ПорядокОперации                  КАК ПорядокОперации,
		|		ИСТИНА                                               КАК Зачтено,
		|		-ПланыОплат.КОплате                                  КАК Сумма
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПланОплат КАК ПланыОплат
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыПредоплаты КАК ДокументыПредоплаты
		|				ПО ДокументыПредоплаты.РасчетныйДокумент = ПланыОплат.ДокументОплаты
		|	ГДЕ
		|		ПланыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ПланыОплат.НераспределенныйАванс
		|		И ПланыОплат.Период < &НачалоДняПорядка
		|) КАК ВложенныйЗапрос
		|ГДЕ 
		|	ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ДокументПлан) НЕ В (ТИП(Документ.КорректировкаПриобретения), ТИП(Документ.КорректировкаРеализации))
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументПлан,
		|	ВложенныйЗапрос.ДатаВозникновения,
		|	ВложенныйЗапрос.ДатаПлановогоПогашения,
		|	ВложенныйЗапрос.Зачтено,
		|	ВложенныйЗапрос.ПорядокОперации
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВозникновения
		|";
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПланОплат ","РегистрНакопления.РасчетыСПоставщикамиПланОплат ");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПриходныеДвиженияПоПлановымОплатам(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК Дата,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.ДатаПлатежа                                 КАК ДатаПлановогоПогашения,
	|	Расчеты.ВариантОплаты                               КАК ВариантОплаты,
	|	СУММА(Расчеты.КОплате)                              КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&ТипыРегистраторов)
	|		ИЛИ &РеализацияВПути)
	|	И Расчеты.ВидДвижения = &Приход И Расчеты.КОплате > 0
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.ДатаРегистратора,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ),
	|	Расчеты.Регистратор,
	|	Расчеты.ДатаПлатежа,
	|	Расчеты.ВариантОплаты
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ДатаРегистратора
	|";
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РеализацияВПути","ЛОЖЬ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РеализацияВПути","(ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияТоваровУслуг).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
																	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионера),
																	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности))
																	| ИЛИ ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияУслугПрочихАктивов).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
																	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияУслугПрочихАктивов).ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
																	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав)))");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыРегистраторов", СписокТиповРегистраторовПланов());
	
	Результат  = Запрос.Выполнить();
	ПриходныеДвиженияГрафика = Результат.Выгрузить();
	
	Возврат ПриходныеДвиженияГрафика;
	
КонецФункции

//Возвращает таблицу закрывающих планы движений накладных
Функция ПолучитьУточненияГрафиковОплат(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК ДатаДвижения,
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	ВЫБОР КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ                                               КАК ДатаПлановогоПогашения,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	ВЫБОР КОГДА &ГрафикВДоговоре
	|			ТОГДА &ГрафикИсполненияДоговора
	|			ИНАЧЕ Расчеты.ПродажаПоЗаказу
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР КОГДА Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)
	|		КОГДА Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления)
	|		ИНАЧЕ Расчеты.ВариантОплаты 
	|	КОНЕЦ                                               КАК ВариантОплаты,
	|	Расчеты.КОплате                                     КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	 Расчеты.ВидДвижения = &Расход И Расчеты.КОплате > 0
	|	И (Расчеты.ПродажаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы) ИЛИ &ГрафикВДоговоре)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповУточняющихПланы)
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ДатаРегистратора,
	|	Расчеты.Период
	|";
	Запрос.УстановитьПараметр("СписокТиповУточняющихПланы", СписокТиповУточняющихПланы());
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПродажаПоЗаказу","ЗакупкаПоЗаказу");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	УточненияГрафиковОплат = Результат.Выгрузить();
	УточненияГрафиковОплат.Индексы.Добавить("Заказ");
	
	Возврат УточненияГрафиковОплат;
	
КонецФункции

Функция ПолучитьПриходныеДвиженияПоПлановымОтгрузкам(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК Дата,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период,ДЕНЬ)                  КАК ДатаПлановогоПогашения,
	|	Расчеты.КОтгрузке                                   КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&ТипыРегистраторов)
	|	И Расчеты.ВидДвижения = &Расход И Расчеты.КОтгрузке > 0
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ДатаРегистратора,
	|	Расчеты.Период
	|";
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке","КПоступлению");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Расход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыРегистраторов", СписокТиповРегистраторовПланов());
	
	Результат  = Запрос.Выполнить();
	ПриходныеДвиженияГрафикаОтгрузки = Результат.Выгрузить();
	
	Возврат ПриходныеДвиженияГрафикаОтгрузки;
	
КонецФункции

//Возвращает таблицу закрывающих планы движений накладных
Функция ПолучитьУточненияГрафиковОтгрузок(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)        КАК ДатаДвижения,
	|	Расчеты.ДатаРегистратора                            КАК ДатаВозникновения,
	|	ВЫБОР КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ                                               КАК ДатаПлановогоПогашения,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	ВЫБОР КОГДА &ГрафикВДоговоре
	|			ТОГДА &ГрафикИсполненияДоговора
	|			ИНАЧЕ Расчеты.ПродажаПоЗаказу
	|	КОНЕЦ                                               КАК Заказ,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = &Приход
	|		ТОГДА Расчеты.КОтгрузке
	|		ИНАЧЕ -Расчеты.КОтгрузке
	|	КОНЕЦ) КАК Сумма
	|ИЗ
	|	РасчетыДвижения КАК Расчеты
	|ГДЕ
	|	Расчеты.КОтгрузке > 0
	|	И (Расчеты.ПродажаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы) ИЛИ &ГрафикВДоговоре)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповУточняющихПланы)
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ),
	|	Расчеты.ДатаРегистратора,
	|	ВЫБОР КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.Регистратор,
	|	ВЫБОР КОГДА &ГрафикВДоговоре
	|			ТОГДА &ГрафикИсполненияДоговора
	|			ИНАЧЕ Расчеты.ПродажаПоЗаказу
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.ДатаРегистратора
	|";
	Запрос.УстановитьПараметр("СписокТиповУточняющихПланы", СписокТиповУточняющихПланы());
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами ","РегистрНакопления.РасчетыСПоставщиками ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПродажаПоЗаказу","ЗакупкаПоЗаказу");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке","КПоступлению");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Приход","ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	УточненияГрафиковОтгрузок = Результат.Выгрузить();
	УточненияГрафиковОтгрузок.Индексы.Добавить("Заказ");
	
	Возврат УточненияГрафиковОтгрузок;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыДобавленияСтрок

//Переоценивает долг до момента оплаты.
Процедура ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, РасчетыОтгрузкиПоставки, Регистратор, ЗНАЧ ПериодЗачета = Неопределено, ПереоценкаНаДатуОплаты = ИСТИНА)
	
	Если ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки Тогда
		Возврат;
	КонецЕсли;
	СтрокиОтгрузки = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("Регистратор",Регистратор));
	Если ПериодЗачета <> Неопределено Тогда
		ПериодЗачета = НачалоДня(ПериодЗачета);
	КонецЕсли;
	
	Для Каждого СтрокаОтгрузки Из СтрокиОтгрузки Цикл
		
		Если СтрокаОтгрузки.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ГлобальныеПеременные.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки Тогда
			// Переоценка до фиксированного курса возможна после частичной оплаты по другому ручному курсу или оплате в валюте, отличной от  валюты регл. учета
			Если ПериодЗачета <> Неопределено Тогда
				СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * (СтрокаОтгрузки.ИсходнаяСуммаРегл/СтрокаОтгрузки.ИсходнаяСумма), 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
				СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * (СтрокаОтгрузки.ИсходнаяСуммаРегл/СтрокаОтгрузки.ИсходнаяСумма), 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, НачалоДня(ПериодЗачета), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
				
				СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
				СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
				
				СтрокаОтгрузки.ДатаПереоценки = НачалоДня(ПериодЗачета);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
			ДатаКэш = НачалоДня(СтрокаОтгрузки.ДатаПереоценки);
		Иначе
			ДатаКэш = НачалоДня(КонецМесяца(СтрокаОтгрузки.ДатаПереоценки));
		КонецЕсли;
		
		ОкончательнаяДатаПереоценки = ?(ПериодЗачета <> Неопределено, ПериодЗачета, ТекущаяДатаСеанса());
		
		Пока ДатаКэш < ОкончательнаяДатаПереоценки Цикл
			
			//Отгрузку могли уже переоценить до даты предыдущей оплаты.
			Если ДатаКэш > СтрокаОтгрузки.ДатаПереоценки Тогда
				СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(ДатаКэш, "Дата");
				
				Если СтрокаКурса <> Неопределено Тогда
					СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
					СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл / СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, КонецДня(ДатаКэш), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
					
					СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
					СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
					
					СтрокаОтгрузки.ДатаПереоценки = ДатаКэш;
				КонецЕсли;
			КонецЕсли;
			
			Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
				ДатаКэш = ДатаКэш + 86400;
			Иначе
				ДатаКэш = НачалоДня(КонецМесяца(КонецМесяца(ДатаКэш)+1));
			КонецЕсли;
			
		КонецЦикла;
		
		//Требуется переоценка на дату оплаты.
		Если ПериодЗачета <> Неопределено И ПериодЗачета > СтрокаОтгрузки.ДатаПереоценки И ПереоценкаНаДатуОплаты Тогда
			
			СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(ПериодЗачета, "Дата");
			Если СтрокаКурса <> Неопределено Тогда 
				//Долг всегда переоценивается на дату оплаты.
				СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
				СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма  * СтрокаКурса.КурсРегл / СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, НачалоДня(ПериодЗачета), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
				
				СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
				СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
				
				СтрокаОтгрузки.ДатаПереоценки = ПериодЗачета;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи прихода по ресурсам долг и предоплата.
Процедура ДобавитьПриход(ГлобальныеПеременные, ТаблицаДвиженийРасчетов, СтрокаРасчетов, ТипИсточника, ТаблицаЗачетовОплат, Индекс)
	
	Если ТипИсточника = "Оплата" Тогда
		СтрокиЗачетов = ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ИндексСтрокиОплат,ПриходДобавлен", Индекс, ЛОЖЬ));
	Иначе
		СтрокиЗачетов = ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ИндексСтрокиОтгрузокПоставок,ПриходДобавлен", Индекс, ЛОЖЬ));
	КонецЕсли;
	
	Если СтрокиЗачетов.Количество() > 0 Тогда
		ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов, ТипИсточника);
	КонецЕсли;
	
	Сумма = СтрокаРасчетов.Сумма;
	СуммаРегл = СтрокаРасчетов.СуммаРегл;
	СуммаУпр = СтрокаРасчетов.СуммаУпр;
	
	Для Каждого СтрокаЗачета Из СтрокиЗачетов Цикл
		
		Если СтрокаЗачета.Сумма = 0
			ИЛИ ТипИсточника = "Оплата" И НЕ СтрокаЗачета.ЗачетАванса И СтрокаЗачета.ИндексСтрокиОтгрузокПоставок <> -1
			ИЛИ ТипИсточника <> "Оплата" И СтрокаЗачета.ЗачетАванса И СтрокаЗачета.ИндексСтрокиОплат <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписанияРегл = СуммаСписания(0,СуммаРегл,Сумма, СтрокаЗачета.Сумма);
		СуммаСписанияУпр  = СуммаСписания(0,СуммаУпр,Сумма, СтрокаЗачета.Сумма);
		Если СтрокаРасчетов.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
			
			НовСтр = ТаблицаДвиженийРасчетов.Добавить();
			НовСтр.ВидДвижения                   = ВидДвиженияНакопления.Приход;
			НовСтр.ДокументРегистратор           = СтрокаРасчетов.Регистратор;
			НовСтр.РасчетныйДокумент             = СтрокаРасчетов.РасчетныйДокумент;
			Если НЕ ЗначениеЗаполнено(НовСтр.РасчетныйДокумент) Тогда
				НовСтр.РасчетныйДокумент = СтрокаРасчетов.Регистратор;
			КонецЕсли;
			НовСтр.ХозяйственнаяОперация         = СтрокаРасчетов.ХозяйственнаяОперация;
			НовСтр.ВалютаДокумента               = СтрокаРасчетов.ВалютаДокумента;
			НовСтр.ДатаВозникновения             = СтрокаРасчетов.ДатаВозникновения;
			НовСтр.Период                        = СтрокаРасчетов.Период;
			НовСтр.ПорядокЗачета                 = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
			НовСтр.ПорядокОперации               = СтрокаРасчетов.ПорядокОперации;
			НовСтр.СтатьяДвиженияДенежныхСредств = СтрокаРасчетов.СтатьяДвиженияДенежныхСредств;
			НовСтр.НастройкаХозяйственнойОперации = СтрокаРасчетов.НастройкаХозяйственнойОперации;
			НовСтр.ИдентификаторФинЗаписи        = СтрокаРасчетов.ИдентификаторФинЗаписи;
			НовСтр.КорОбъектРасчетов             = СтрокаРасчетов.КорОбъектРасчетов;
			НовСтр.КорАналитикаУчетаПоПартнерам  = СтрокаРасчетов.КорАналитикаУчетаПоПартнерам;
			НовСтр.Сторно                        = СтрокаРасчетов.Сторно;
			
			Если ТипИсточника = "Оплата" Тогда
			
				НовСтр.СвязанныйДокумент     = СтрокаРасчетов.СвязанныйДокумент;
			
				НовСтр.Долг           = 0;
				НовСтр.ДолгРегл       = 0;
				НовСтр.ДолгУпр        = 0;
			
				НовСтр.Предоплата     = СтрокаЗачета.Сумма;
				НовСтр.ПредоплатаРегл = СуммаСписанияРегл;
				НовСтр.ПредоплатаУпр  = СуммаСписанияУпр;
				НовСтр.ДатаПлановогоПогашения = ?(СтрокаЗачета.ДатаПлановогоПогашенияОплаты = Дата(1,1,1),
													СтрокаРасчетов.ДатаПлановогоПогашения,
													СтрокаЗачета.ДатаПлановогоПогашенияОплаты);
			ИначеЕсли ТипИсточника = "ОтгрузкаПоставка" Тогда
			
				НовСтр.Долг           = СтрокаЗачета.Сумма;
				НовСтр.ДолгРегл       = СуммаСписанияРегл;
				НовСтр.ДолгУпр        = СуммаСписанияУпр;
				
				НовСтр.Предоплата     = 0;
				НовСтр.ПредоплатаРегл = 0;
				НовСтр.ПредоплатаУпр  = 0;
				НовСтр.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
				
			КонецЕсли;
			
			Сумма = Сумма - НовСтр.Предоплата - НовСтр.Долг;
			СуммаРегл = СуммаРегл - НовСтр.ПредоплатаРегл - НовСтр.ДолгРегл;
			СуммаУпр = СуммаУпр - НовСтр.ПредоплатаУпр - НовСтр.ДолгУпр;
			
		КонецЕсли;
		
		Если ТипИсточника = "ОтгрузкаПоставка" Тогда
			//Записи в ДанныеНакладных может не быть.
			Если ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор] = Неопределено Тогда
				ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаРасчетов.Регистратор, СтруктураСумм());
			КонецЕсли;
			
			//Если добавляем приход, значит авансы уже зачтены, и осталась часть долга по курсу накладной.
			ДанныеНакладной = ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор];
			ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента + СтрокаЗачета.Сумма;
			ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СуммаСписанияРегл;
			ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СуммаСписанияУпр;
		КонецЕсли;
		
		СтрокаЗачета.ПриходДобавлен = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи переоценки долга.
Процедура ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, Период, СтрокаРасчетов, Тип, СуммаРегл, СуммаУпр)
	
	Если НЕ ГлобальныеПеременные.Свойство("ТаблицаКурсовВалют")
		ИЛИ СуммаРегл = 0 И СуммаУпр = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокПереоценки = ГлобальныеПеременные.ПорядокПереоценки.Получить(Период);
	Если ПорядокПереоценки = Неопределено Тогда
		ПорядокПереоценки = Порядок(Период,"", Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99");
		ГлобальныеПеременные.ПорядокПереоценки.Вставить(Период, ПорядокПереоценки);
	КонецЕсли;
	
	Если ПорядокПереоценки < ГлобальныеПеременные.ПорядокФакт Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаРегл < 0 ИЛИ СуммаУпр < 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Расход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаОтрицательная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.НастройкаХозяйственнойОперации = ГлобальныеПеременные.НастройкиХО["ПереоценкаОтрицательная"];
		СтрокаПереоценки.ИдентификаторФинЗаписи   = Новый УникальныйИдентификатор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасчетов,"ПорядокЗачетаПоДатеПлатежа") Тогда
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		Иначе
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		КонецЕсли;
		СтрокаПереоценки.Период                   = Период;
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		СтрокаПереоценки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл             = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр              = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл       = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр        = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = Дата(1,1,1);
		КонецЕсли;
		
		СтрокаПереоценки.КорОбъектРасчетов            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		
	КонецЕсли;
	
	Если СуммаРегл > 0 ИЛИ СуммаУпр > 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Приход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаПоложительная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.НастройкаХозяйственнойОперации = ГлобальныеПеременные.НастройкиХО["ПереоценкаПоложительная"];
		СтрокаПереоценки.ИдентификаторФинЗаписи   = Новый УникальныйИдентификатор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасчетов,"ПорядокЗачетаПоДатеПлатежа") Тогда
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		Иначе
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		КонецЕсли;
		СтрокаПереоценки.Период                   = Период;
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		СтрокаПереоценки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл               = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр                = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл         = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр          = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = Дата(1,1,1);
		КонецЕсли;
		
		СтрокаПереоценки.КорОбъектРасчетов            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

//Пересчитывает сумму регл. и упр. учета строки расчетов по курсу связанного документа, если он проведен.
Процедура ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов, ТипИсточника = "")
	
	Если (СтрокаРасчетов.ЭтоКорректировка ИЛИ ТипИсточника <> "ОтгрузкаПоставка")
		И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент] <> Неопределено
			И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента <> 0 Тогда
		
		Если ГлобальныеПеременные.ВалютаРегламентированногоУчета <> СтрокаРасчетов.ВалютаДокумента
				И ГлобальныеПеременные.ВалютаРегламентированногоУчета <> ГлобальныеПеременные.ВалютаРасчетов Тогда
			СтрокаРасчетов.СуммаРегл = Окр(СтрокаРасчетов.Сумма *
				(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаРегл
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
		Если ГлобальныеПеременные.ВалютаУправленческогоУчета <> СтрокаРасчетов.ВалютаДокумента
				И ГлобальныеПеременные.ВалютаУправленческогоУчета <> ГлобальныеПеременные.ВалютаРасчетов Тогда
			СтрокаРасчетов.СуммаУпр = Окр(СтрокаРасчетов.Сумма *
				(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаУпр
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
		
		Если ТипИсточника = "ОтгрузкаПоставка" Тогда
			СтрокаРасчетов.СуммаРеглДляПереоценки = СтрокаРасчетов.СуммаРегл;
			СтрокаРасчетов.СуммаУпрДляПереоценки = СтрокаРасчетов.СуммаУпр;
			
			СтрокаРасчетов.ИсходнаяСуммаРегл = Окр(СтрокаРасчетов.ИсходнаяСумма
				* (ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаРегл
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
			СтрокаРасчетов.ИсходнаяСуммаУпр = Окр(СтрокаРасчетов.ИсходнаяСумма
				* (ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаУпр
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасчетов.ЭтоКорректировка = Ложь;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата - Передается, если план оплаты заказа уменьшается нераспределенным авансом
Процедура УменьшитьПланОплатыПоЗаказу(ТаблицаДвиженийПлановыхОплат, ОстаткиПлановыхОплат, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	СтрокаУточнения.Сумма = СтрокаУточнения.Сумма - СуммаСписания;
	
	НовСтр = ТаблицаДвиженийПлановыхОплат.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.ВариантОплаты             = СтрокаОстатка.ВариантОплаты;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаВозникновения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ?(ДатаНераспределенногоАванса = Неопределено, ЛОЖЬ, ИСТИНА);
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.КОплате                   = СуммаСписания;
	
	// Т.к. ОстаткиПлановыхОплат не всегда владелец строки остатка
	Если ДатаНераспределенногоАванса <> Неопределено Тогда
		НовСтр = ОстаткиПлановыхОплат.Добавить();
		НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
		НовСтр.ВариантОплаты             = СтрокаОстатка.ВариантОплаты;
		НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
		НовСтр.НераспределенныйАванс     = ИСТИНА;
		НовСтр.КОплате                   = -СуммаСписания;
	КонецЕсли;
	
	СтрокаОстатка.КОплате = СтрокаОстатка.КОплате - СуммаСписания;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата - Передается если сторнируется запись нераспределенного аванса другим нераспределенным авансом.
Процедура СторнироватьНераспределенныйАванс(ТаблицаДвиженийПлановыхОплат, ОстаткиПлановыхОплат, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	НовСтр = ТаблицаДвиженийПлановыхОплат.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.ВариантОплаты             = СтрокаОстатка.ВариантОплаты;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаДвижения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ИСТИНА;
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.КОплате                   = СуммаСписания;
	
	// Т.к. ОстаткиПлановыхОплат не всегда владелец строки остатка
	Если ОстаткиПлановыхОплат.Индекс(СтрокаОстатка) = -1 Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ДокументПлан",           СтрокаОстатка.ДокументПлан);
		СтруктураПоиска.Вставить("ВариантОплаты",          СтрокаОстатка.ВариантОплаты);
		СтруктураПоиска.Вставить("ДатаВозникновения",      СтрокаОстатка.ДатаВозникновения);
		СтруктураПоиска.Вставить("ДатаПлановогоПогашения", СтрокаОстатка.ДатаПлановогоПогашения);
		СтруктураПоиска.Вставить("НераспределенныйАванс",  ИСТИНА);
		СтрокиПлановыхОплат = ОстаткиПлановыхОплат.НайтиСтроки(СтруктураПоиска);
		СуммаСписанияИзПланов = -СуммаСписания;
		Для Каждого Стр Из СтрокиПлановыхОплат Цикл
			Если СуммаСписанияИзПланов = 0 Тогда
				Прервать;
			КонецЕсли;
			ТекущаяСуммаСписания = Мин(СуммаСписанияИзПланов,-Стр.КОплате);
			Стр.КОплате = Стр.КОплате + ТекущаяСуммаСписания;
			СуммаСписанияИзПланов = СуммаСписанияИзПланов - ТекущаяСуммаСписания;
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаОстатка.КОплате = СтрокаОстатка.КОплате - СуммаСписания;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата
Процедура УменьшитьПланОтгрузкиПоЗаказу(ТаблицаДвиженийПлановыхОтгрузок, ОстаткиПлановыхОтгрузок, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	СтрокаУточнения.Сумма = СтрокаУточнения.Сумма - СуммаСписания;
	
	НовСтр = ТаблицаДвиженийПлановыхОтгрузок.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаДвижения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ?(ДатаНераспределенногоАванса = Неопределено, ЛОЖЬ, ИСТИНА);
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.Сумма                     = СуммаСписания;
	
	//Т.к. ОстаткиПлановыхОплат не всегда владелец строки остатка
	Если ОстаткиПлановыхОтгрузок.Индекс(СтрокаОстатка) = -1 Тогда
		НовСтр = ОстаткиПлановыхОтгрузок.Добавить();
		НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
		НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
		НовСтр.НераспределенныйАванс     = ?(ДатаНераспределенногоАванса = Неопределено, ЛОЖЬ, ИСТИНА);
		НовСтр.Сумма                   = -СуммаСписания;
	КонецЕсли;
	
	СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаСписания;
	
КонецПроцедуры

// Параметры:
//  ТаблицаДвиженийПлановыхОплат - ТаблицаЗначений
//  ОстаткиПлановыхОплат - ТаблицаЗначений
//  СтрокаОстатка - СтрокаТаблицыЗначений
//  СтрокаУточнения - СтрокаТаблицыЗначений
//  СуммаСписания - Число
//  ДатаНераспределенногоАванса - Дата
Процедура СторнироватьНераспределенныйАвансПланаОтгрузок(ТаблицаДвиженийПлановыхОтгрузок, ОстаткиПлановыхОтгрузок, СтрокаОстатка, СтрокаУточнения, СуммаСписания, ДатаНераспределенногоАванса = Неопределено)
	
	НовСтр = ТаблицаДвиженийПлановыхОтгрузок.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = ?(СтрокаУточнения.ДатаВозникновения < СтрокаОстатка.ДатаВозникновения , СтрокаОстатка.ДокументПлан, СтрокаУточнения.Регистратор);
	НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
	НовСтр.Период                    = ?(ДатаНераспределенногоАванса = Неопределено, СтрокаУточнения.ДатаДвижения, ДатаНераспределенногоАванса);
	НовСтр.ПорядокОперации           = СтрокаУточнения.ПорядокОперации;
	НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
	НовСтр.НераспределенныйАванс     = ИСТИНА;
	НовСтр.ДокументОплаты            = СтрокаУточнения.Регистратор;
	НовСтр.Сумма                   = СуммаСписания;
	
	//Т.к. ОстаткиПлановыхОтгрузок не всегда владелец строки остатка
	Если ОстаткиПлановыхОтгрузок.Индекс(СтрокаОстатка) = -1 Тогда
		НовСтр = ОстаткиПлановыхОтгрузок.Добавить();
		НовСтр.ДокументПлан              = СтрокаОстатка.ДокументПлан;
		НовСтр.ДатаВозникновения         = СтрокаОстатка.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаОстатка.ДатаПлановогоПогашения;
		НовСтр.НераспределенныйАванс     = ИСТИНА;
		НовСтр.Сумма                   = -СуммаСписания;
	КонецЕсли;
	
	СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаСписания;
	
КонецПроцедуры

Процедура УточнитьГрафикПогашенияАванса(ТаблицаЗачетовОплат, ДвижениеПредоплаты, ЗНАЧ СуммаСписания, ДатаПлановогоПогашения, ЗачетОплатПоДатеПлатежа)
	
	СтрокиДокументаОплаты = ТаблицаЗачетовОплат.НайтиСтроки(Новый Структура("ДокументОплаты,ДатаПогашенияАвансаУточнена", ДвижениеПредоплаты.Регистратор, Ложь));
	
	Для Каждого СтрокаТаблицыЗачетов Из СтрокиДокументаОплаты Цикл
		Если СуммаСписания <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если (СтрокаТаблицыЗачетов.ЗачетАванса //авансы
			ИЛИ СтрокаТаблицыЗачетов.ИндексСтрокиОтгрузокПоставок = -1 //остатки оплат
			ИЛИ ЗачетОплатПоДатеПлатежа) //распределение по дате платежа. 
			Тогда
			
			СуммаСписанияСтроки = Мин(СуммаСписания,СтрокаТаблицыЗачетов.Сумма);
			Если СуммаСписанияСтроки < СтрокаТаблицыЗачетов.Сумма Тогда
				НовСтр = ТаблицаЗачетовОплат.Вставить(ТаблицаЗачетовОплат.Индекс(СтрокаТаблицыЗачетов));
				ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТаблицыЗачетов);
				НовСтр.Сумма = СуммаСписанияСтроки;
				СтрокаТаблицыЗачетов.Сумма = СтрокаТаблицыЗачетов.Сумма - СуммаСписанияСтроки;
				СуммаСписания = 0;
			Иначе
				НовСтр = СтрокаТаблицыЗачетов;
				СуммаСписания = СуммаСписания - СтрокаТаблицыЗачетов.Сумма;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗачетов.ДатаПлановогоПогашенияОплаты) Тогда
				НовСтр.ДатаПлановогоПогашенияОплаты = ДатаПлановогоПогашения;
			КонецЕсли;
			НовСтр.ДатаПогашенияАвансаУточнена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаОнлайнВзаиморасчеты

Процедура ЗаполнитьРегистрПереходаНаОнлайн()
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСКлиентами.ДатаДвижения) КАК ДатаДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	|	МАКСИМУМ(РасчетыСКлиентами.Приоритет) КАК Приоритет
	|ИЗ 
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ЗаказКлиента КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Расчеты.КорОбъектРасчетов, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|					= ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСПартнерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|				ПО Расчеты.Регистратор = РасчетыСПартнерами.Регистратор
	|					И Расчеты.АналитикаУчетаПоПартнерам = РасчетыСПартнерами.АналитикаУчетаПоПартнерам
	|					И Расчеты.ОбъектРасчетов = РасчетыСПартнерами.ЗаказКлиента
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА РасчетыСПартнерами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ 
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСПартнерами
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам
	|			ГДЕ
	|				РасчетыСПартнерами.АналитикаУчетаПоПартнерам = РасчетыПоДокументам.АналитикаУчетаПоПартнерам
	|				И РасчетыСПартнерами.ОбъектРасчетов = РасчетыПоДокументам.ЗаказКлиента
	|				И РасчетыСПартнерами.Валюта = РасчетыПоДокументам.Валюта
	|		)
	|
	|	) КАК РасчетыСКлиентами
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСПоставщиками.ДатаДвижения) КАК ДатаДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	|	МАКСИМУМ(РасчетыСПоставщиками.Приоритет) КАК Приоритет
	|ИЗ 
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ЗаказПоставщику КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Расчеты.КорОбъектРасчетов, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|					= ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПартнерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|				ПО Расчеты.Регистратор = РасчетыСПартнерами.Регистратор
	|					И Расчеты.АналитикаУчетаПоПартнерам = РасчетыСПартнерами.АналитикаУчетаПоПартнерам
	|					И Расчеты.ОбъектРасчетов = РасчетыСПартнерами.ЗаказПоставщику
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА РасчетыСПартнерами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ 
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПартнерами
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|			ГДЕ
	|				РасчетыСПартнерами.АналитикаУчетаПоПартнерам = РасчетыПоДокументам.АналитикаУчетаПоПартнерам
	|				И РасчетыСПартнерами.ОбъектРасчетов = РасчетыПоДокументам.ЗаказПоставщику
	|				И РасчетыСПартнерами.Валюта = РасчетыПоДокументам.Валюта
	|		)
	|
	|	) КАК РасчетыСПоставщиками
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
	Набор.Записать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		Если НомерСтроки = 1000 Тогда
			Набор.Записать(Ложь);
			Набор.Очистить();
			НомерСтроки = 0;
		КонецЕсли;
		
	КонецЦикла;
	Набор.Записать(Ложь);
	ВсегоКПереносу = Выборка.Количество();
	
	ХранилищеОбщихНастроек.Сохранить("ПереходНаНовуюАрхитектуруВзаиморасчетов", "ВсегоКПереносу", ВсегоКПереносу);
	
	Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ВсегоЗаписей = НСтр("ru = 'Всего кортежей к переносу'")+": %1";
	ЗаписьЖурналаРегистрации(Текст,
		УровеньЖурналаРегистрации.Информация,,,СтрШаблон(ВсегоЗаписей, ВсегоКПереносу));
	
КонецПроцедуры

// Выполняет заполнение оперативных взаиморасчетов при включении опции Онлайн взаиморасчетов
// 
// Параметры:
//   Параметры - Структура - Необязательный.
//   АдресРезультата - Строка - Необязательный
//
// Возвращаемое значение:
//   Число - Количество обработанных записей
//
Функция ВыполнитьПереносОфлайнВзаиморасчетов(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И Параметры.Свойство("ДанныеКОбработке") Тогда
		ДанныеКОбработке = Параметры.ДанныеКОбработке;
	Иначе
		ПараметрыДанных = ПараметрыДанныхМногопоточнойОбработки();
		ДанныеКОбработке = ДанныеДляОбработки(ПараметрыДанных);
	КонецЕсли;
	
	КоличествоОбработанныхЗаписей = 0;
	ПорядокОперации = Новый Соответствие();
	Запрос = Новый Запрос();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХозяйственныеОперацииНеОтгрузка", ХозяйственныеОперацииНеОтгрузка());
	Для Каждого Отбор Из ДанныеКОбработке Цикл
		
		НачатьТранзакцию();
		Попытка
			
			//1. Перенесем РасчетыПоДокументам.
			ЭтоРасчетыСКлиентами = Отбор.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
			Если ЭтоРасчетыСКлиентами Тогда
				Запрос.Текст = ТекстЗапросаРасчетыСКлиентамиПоДокументам();
				СписокТиповИсходящихПлатежей = Новый Массив;
				СписокТиповИсходящихПлатежей.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
				СписокТиповИсходящихПлатежей.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
				Запрос.УстановитьПараметр("СписокТиповИсходящихПлатежей", СписокТиповИсходящихПлатежей);
			Иначе
				Запрос.Текст = ТекстЗапросаРасчетыСПоставщикамиПоДокументам();
			КонецЕсли;
			Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Отбор.АналитикаУчетаПоПартнерам);
			Запрос.УстановитьПараметр("ОбъектРасчетов", Отбор.ОбъектРасчетов);
			Запрос.УстановитьПараметр("Валюта", Отбор.ВалютаРасчетов);
			ТаблицаДетальныхЗаписей = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаДетальныхЗаписей.Количество() > 0 Тогда
				ЗаписатьНовыеЗаписиРасчетовПоСрокам(ЭтоРасчетыСКлиентами, ТаблицаДетальныхЗаписей, ПорядокОперации);
				КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + ТаблицаДетальныхЗаписей.Количество();
			КонецЕсли;
			
			Запрос.Текст = "УНИЧТОЖИТЬ ВтРегистраторы; УНИЧТОЖИТЬ ПорядокДокументов; УНИЧТОЖИТЬ ВтРасчеты";
			Запрос.Выполнить();
			
			//2. Заполняем планы по новому алгоритму за весь период.
			ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
			ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Отбор);
			ОсновныеПараметры.ЭтоРасчетыСКлиентами = ЭтоРасчетыСКлиентами;
			ОсновныеПараметры.НачальноеЗаполнение = НЕ ЗначениеЗаполнено(Отбор.ДатаПересчета);
			Если ЗначениеЗаполнено(Отбор.ДатаПересчета) Тогда
				ОсновныеПараметры.ПорядокФакт = Формат(Отбор.ДатаПересчета, "ДФ=yyyyMMdd000000");
			КонецЕсли;
			Если ЗначениеЗаполнено(Отбор.ДатаПересчетаПлан) Тогда
				ОсновныеПараметры.ПорядокПлан = Формат(Отбор.ДатаПересчетаПлан, "ДФ=yyyyMMdd000000");
			КонецЕсли;
			ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
			
			ДопИзмеренияОтбора = "";
			Если Отбор.ДатаПересчета = Дата('00010101') Тогда
				ДопИзмеренияОтбора = "ДатаПересчета";
			КонецЕсли;
			ОтметитьВыполнениеЗадания(Отбор, ДопИзмеренияОтбора);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Работа потока.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки
		
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоОбработанныхЗаписей);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

Процедура ЗаписатьНовыеЗаписиРасчетовПоСрокам(ЭтоРасчетыСКлиентами, ТаблицаДетальныхЗаписей, ПорядокОперации)
	
	Если ЭтоРасчетыСКлиентами Тогда
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Для Каждого СтрокаДвижений Из ТаблицаДетальныхЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДвижений.ПорядокОперации) Тогда
			Если ПорядокОперации.Получить(СтрокаДвижений.Период) = Неопределено Тогда
				ПорядокОперации.Вставить(СтрокаДвижений.Период, Порядок(СтрокаДвижений.Период, "", Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99"));
			КонецЕсли;
			СтрокаДвижений.ПорядокОперации = ПорядокОперации[СтрокаДвижений.Период];
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДетальныхЗаписей.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторРасчетов"));
	ТаблицаДетальныхЗаписей.Индексы.Добавить("Регистратор");
	
	ТаблицаАналитик = ТаблицаДетальныхЗаписей.Скопировать();
	ТаблицаАналитик.Свернуть("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
	Отбор = ТаблицаАналитик[0];
	
	СтруктураПараметровРегистраторов = Новый Структура;
	СтруктураПараметровРегистраторов.Вставить("ОбъектРасчетов",            Отбор.ОбъектРасчетов);
	СтруктураПараметровРегистраторов.Вставить("АналитикаУчетаПоПартнерам", Отбор.АналитикаУчетаПоПартнерам);
	СтруктураПараметровРегистраторов.Вставить("ВалютаРасчетов",            Отбор.Валюта);
	СтруктураПараметровРегистраторов.Вставить("Организация",               Отбор.Организация);
	СтруктураПараметровРегистраторов.Вставить("ЭтоРасчетыСКлиентами",      ЭтоРасчетыСКлиентами);
	
	УчитыватьКоличествоЗаписейРегистраторовРасчетов = ОбработчикОбновленияРегистраВзаиморасчетовВыполнен(
		"РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	СтруктураПараметровРегистраторов.Вставить("УчитыватьКоличествоЗаписейРегистраторовРасчетов",
		УчитыватьКоличествоЗаписейРегистраторовРасчетов);
	
	ПодготовитьДанныеДляЗаписи(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);
	ЗаписатьПорционно(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);

КонецПроцедуры

Функция ТекстЗапросаРасчетыСКлиентамиПоДокументам()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.ЗаказКлиента = &ОбъектРасчетов
	|	И Расчеты.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
	|	КОНЕЦ                                      КАК Регистратор,
	|	МИНИМУМ(РасчетыСКлиентами.ПорядокОперации) КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	МИНИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатков
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|						ТОГДА РасчетыСКлиентами.ДатаРегистратора
	|				ИНАЧЕ РасчетыСКлиентами.Период
	|			КОНЕЦ)                             КАК ДатаВозникновения,
	|	МИНИМУМ(РасчетыСКлиентами.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыСКлиентами.ДатаПлатежа)    КАК ДатаПлатежа
	|ПОМЕСТИТЬ ПорядокДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = РасчетыСКлиентами.Регистратор
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И НЕ РасчетыСКлиентами.ПорядокОперации = """"
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента.ТипОбъектаРасчетов       КАК ТипОбъектаРасчетов,
	|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
	|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
	|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                               КАК ВидДвижения,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Предоплата
	|	КОНЕЦ                                                               КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                               КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                               КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Долг
	|	КОНЕЦ                                                               КАК Долг,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                               КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                               КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0))
	|			И НЕ ((РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|		ПО РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|		ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	И РасчетыСКлиентамиПоДокументам.Регистратор <> РасчетыСКлиентамиПоДокументам.РасчетныйДокумент
	|	И (РасчетыСКлиентамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСКлиентамиПоДокументам.Активность
	|	И РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСКлиентамиПоДокументам.ЗаказКлиента = &ОбъектРасчетов
	|	И РасчетыСКлиентамиПоДокументам.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента.ТипОбъектаРасчетов       КАК ТипОбъектаРасчетов,
	|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
	|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
	|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|			И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей) 
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|					)
	|						И РасчетыСКлиентамиПоДокументам.Предоплата > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И НЕ ((ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|			)
	|				И РасчетыСКлиентамиПоДокументам.Предоплата > 0)
	|			И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                               КАК ВидДвижения,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование
	|	КОНЕЦ КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|				)
	|		И РасчетыСКлиентамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
	|			-РасчетыСКлиентамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Предоплата
	|	КОНЕЦ                                                               КАК Предоплата,
	|	ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|				)
	|		И РасчетыСКлиентамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
	|			-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                               КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|				)
	|		И РасчетыСКлиентамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
	|			-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                               КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Долг
	|		+ ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|					)
	|			И РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ТОГДА РасчетыСКлиентамиПоДокументам.Предоплата
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                               КАК Долг,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгУпр
	|		+ ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|						)
	|			И РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ТОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                               КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгРегл
	|		+ ВЫБОР КОГДА (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиПоДокументам.Регистратор) В (&СписокТиповИсходящихПлатежей)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//++ Локализация
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.ОперацияПоЯндексКассе).ХозяйственнаяОперация,Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	//-- Локализация
	|						)
	|			И РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0
	|				ТОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                               КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0)
	|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0))
	|			И НЕ ((РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И
	|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|				ИНАЧЕ ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|			ПО РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(НЕ (РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор = РасчетыСКлиентамиПоДокументам.РасчетныйДокумент)
	|	И (РасчетыСКлиентамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСКлиентамиПоДокументам.Активность
	|	И РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСКлиентамиПоДокументам.ЗаказКлиента = &ОбъектРасчетов
	|	И РасчетыСКлиентамиПоДокументам.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	Расчеты.Валюта                        КАК Валюта,
	|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Расчеты.Период                        КАК Период,
	|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
	|	Расчеты.ВидДвижения                   КАК ВидДвижения,
	|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг)                   КАК Долг,
	|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
	|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
	|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
	|	Расчеты.Организация                   КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ	ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)  КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоДокументам.Валюта                        КАК Валюта,
	|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
	|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента)
	|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		РасчетыПоДокументам.Период                        КАК Период,
	|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
	|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
	|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
	|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
	|		РасчетыПоДокументам.Долг                          КАК Долг,
	|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
	|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
	|		ВЫБОР КОГДА (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоДокументам.Предоплата > 0)
	|			ИЛИ (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоДокументам.Долг > 0)
	|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
	|			ИНАЧЕ Неопределено
	|		КОНЕЦ                                             КАК СвязанныйДокумент,
	|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
	|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
	|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.Период,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ВидДвижения,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачета,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.Организация
	|";
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоДокументам()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.ЗаказПоставщику = &ОбъектРасчетов
	|	И Расчеты.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
	|	КОНЕЦ                                         КАК Регистратор,
	|	МИНИМУМ(РасчетыСПоставщиками.ПорядокОперации) КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	МИНИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|						ТОГДА РасчетыСПоставщиками.ДатаРегистратора
	|				ИНАЧЕ РасчетыСПоставщиками.Период
	|			КОНЕЦ)                                КАК ДатаВозникновения,
	|	МИНИМУМ(РасчетыСПоставщиками.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыСПоставщиками.ДатаПлатежа)    КАК ДатаПлатежа
	|ПОМЕСТИТЬ ПорядокДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = РасчетыСПоставщиками.Регистратор
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И НЕ РасчетыСПоставщиками.ПорядокОперации = """"
	|	И (РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                           КАК ВидДвижения,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Предоплата
	|	КОНЕЦ                                                           КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                           КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Долг
	|	КОНЕЦ                                                           КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                           КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                           КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
	|			И НЕ ((РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|		ПО РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	И РасчетыСПоставщикамиПоДокументам.Регистратор <> РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|	И (РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Активность
	|	И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = &ОбъектРасчетов
	|	И РасчетыСПоставщикамиПоДокументам.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И НЕ (ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|						И РасчетыСПоставщикамиПоДокументам.Предоплата > 0)
	|				И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0 )
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|				И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0
	|					ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|						И РасчетыСПоставщикамиПоДокументам.Предоплата > 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                           КАК ВидДвижения,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаПриобретения 
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование
	|	КОНЕЦ КАК СвязанныйДокумент,
	|
	//Некорректно отражались расчеты по документам
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И РасчетыСПоставщикамиПоДокументам.Предоплата > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
	|			-РасчетыСПоставщикамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Предоплата
	|	КОНЕЦ                                                           КАК Предоплата,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
	|			-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0 
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
	|			-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                           КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Долг
	|		+ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|			И РасчетыСПоставщикамиПоДокументам.Предоплата > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.Предоплата
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                           КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
	|		+ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|			И РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                           КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|		+ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),ТИП(Документ.ПриходныйКассовыйОрдер))
	|			И РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ТОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ                                                           КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И 
	|				(РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И 
	|				(РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
	|			И НЕ ((РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|				ИНАЧЕ ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|		ПО РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(НЕ (РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков 
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор = РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент)
	|	И (РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Активность
	|	И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = &ОбъектРасчетов
	|	И РасчетыСПоставщикамиПоДокументам.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	Расчеты.Валюта                        КАК Валюта,
	|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Расчеты.Период                        КАК Период,
	|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
	|	Расчеты.ВидДвижения                   КАК ВидДвижения,
	|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг)                   КАК Долг,
	|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
	|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
	|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
	|	Расчеты.Организация                   КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                              КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                                 КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                    КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                    КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                                 КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                      КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                                 КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                             КАК ВидДвижения,
	|		0                                                                  КАК Предоплата,
	|		0                                                                  КАК ПредоплатаУпр,
	|		0                                                                  КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                             КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                          КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                         КАК ДолгРегл,
	|		Неопределено                                                       КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)    КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                        КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                        КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                  КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоДокументам.Валюта                        КАК Валюта,
	|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
	|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику)
	|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		РасчетыПоДокументам.Период                        КАК Период,
	|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
	|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
	|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
	|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
	|		РасчетыПоДокументам.Долг                          КАК Долг,
	|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
	|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
	|		ВЫБОР КОГДА (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоДокументам.Предоплата > 0)
	|			ИЛИ (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоДокументам.Долг > 0)
	|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
	|			ИНАЧЕ Неопределено
	|		КОНЕЦ                                             КАК СвязанныйДокумент,
	|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
	|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
	|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.Период,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ВидДвижения,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачета,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.Организация
	|";
	
КонецФункции

#КонецОбласти

#Область ОчисткаРегистровВзаиморасчетов

//Очищает все новые регистры расчетов.
Процедура ОчиститьРегистрыВзаиморасчетов() Экспорт
	
	ОписаниеЗамераОчистки = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.Многопоточный");
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ОписаниеЗамераОчистки = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ФайловаяБаза");
	КонецЕсли;
	
	ОписаниеЗамераОтключениеИтогов = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ОтключениеИтогов");
	ОтключитьИтогиРегистровРасчетов();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОтключениеИтогов, 1);
	
	ОписаниеЗамераУдалениеДвижений = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.УдалениеДвижений");
	ВсегоОбработано = 0;
	ОчиститьРегистр("РасчетыСКлиентамиПоСрокам", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСКлиентамиПланОплат", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСКлиентамиПланОтгрузок", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПоСрокам", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПланОплат", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПланПоставок", ВсегоОбработано);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераУдалениеДвижений, ВсегоОбработано / 100);
	
	ОписаниеЗамераВключитьИтоги = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ВключениеИтогов");
	ВключитьИтогиРегистровРасчетов();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераВключитьИтоги, 1);
	
	УдалитьСлужебныеРегистраторыМногопоточно();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОчистки, ВсегоОбработано / 100);
	
КонецПроцедуры

//Очищает переданный регистр расчетов.
Процедура ОчиститьРегистр(ИмяРегистра, ВсегоОбработано = 0) Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		КоличествоЗаписей = ВыполнитьОчисткуРегистраМногопоточно(ИмяРегистра);
		ВсегоОбработано = ВсегоОбработано + КоличествоЗаписей;
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
		|ГДЕ
		|	Расчеты.Регистратор ССЫЛКА Документ.РегистраторРасчетов";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления." + ИмяРегистра);
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		ВсегоОбработано = ВсегоОбработано + Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Очищает переданный регистр расчетов в несколько потоков.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя очищаемого регистра накопления
// Возвращаемое значение:
// 	Число - Количество обработанных регистраторов
//
Функция ВыполнитьОчисткуРегистраМногопоточно(ИмяРегистра) Экспорт
	
	Потоки = Новый Массив;
	КоличествоСвободныхПотоков = 1; // КоличествоПотоковРаспределенияВзаиморасчетов(); до исправления 10231410
	КоличествоОбъектовДляОчистки = РазмерПорцииОбработкиВОдномПотоке() * КоличествоСвободныхПотоков;
	// для избежания взаимоблокировок при записи даты минимальных итогов в таблицу AccumRegOpt
	Первый = ДанныеДляОчистки(ИмяРегистра, Неопределено, 1);
	Если Первый.Следующий() Тогда
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
		НаборЗаписей.Отбор.Регистратор.Установить(Первый.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	МоментВремени = Неопределено;
	КонтрольныйЗапуск = 3;
	КоличествоОбработанныхЗаписей = 0;
	Пока КоличествоОбъектовДляОчистки > 0 И КонтрольныйЗапуск > 0 Цикл
		
		Если КоличествоСвободныхПотоков > 0 Тогда
			
			РазмерВыборки = РазмерПорцииОбработкиВОдномПотоке() * КоличествоСвободныхПотоков;
			ВыборкаДляОчистки = ДанныеДляОчистки(ИмяРегистра, МоментВремени, РазмерВыборки);
			КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + ВыборкаДляОчистки.Количество();
			КоличествоОбъектовДляОчистки = ВыборкаДляОчистки.Количество();
			Если КоличествоОбъектовДляОчистки > 0 Тогда
				
				ДанныеПотока = Новый Массив;
				Пока ВыборкаДляОчистки.Следующий() Цикл
					
					МоментВремени = ВыборкаДляОчистки.МоментВремени;
					ДанныеПотока.Добавить(ВыборкаДляОчистки.Регистратор);
					Если ДанныеПотока.Количество() = РазмерПорцииОбработкиВОдномПотоке() Тогда
						Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьЗаписиДокументов");
						Поток.НаименованиеЗадания = НСтр("ru = 'Очистка регистра'") + " " + ИмяРегистра;
						Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
						Поток.ПараметрыПроцедуры.Вставить("ИмяРегистра", ИмяРегистра);
						ЗапуститьОбработкуВФоне(Поток);
						Потоки.Добавить(Поток);
						ДанныеПотока = Новый Массив;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДанныеПотока.Количество() > 0 Тогда
					Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьЗаписиДокументов");
					Поток.НаименованиеЗадания = НСтр("ru = 'Очистка регистра'") + " " + ИмяРегистра;
					Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
					Поток.ПараметрыПроцедуры.Вставить("ИмяРегистра", ИмяРегистра);
					ЗапуститьОбработкуВФоне(Поток);
					Потоки.Добавить(Поток);
				КонецЕсли;
				
			ИначеЕсли КонтрольныйЗапуск > 0 Тогда
				МоментВремени = Неопределено;
				КонтрольныйЗапуск = КонтрольныйЗапуск - 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ОжидатьЗавершениеПотока(Поток);
		
		ЗавершитьПотокиВыполнившиеФЗ(Потоки);
		
		КоличествоДоступныхПотоков = 1; // КоличествоПотоковРаспределенияВзаиморасчетов(); до исправления 10231410
		КоличествоСвободныхПотоков = Макс(КоличествоДоступныхПотоков - Потоки.Количество(), 0);
		
	КонецЦикла;
	
	ОжидатьЗавершениеВсехПотоков(Потоки);
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

//Удаляет служебные регистраторы.
//
Процедура УдалитьСлужебныеРегистраторыМногопоточно() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбработанныхЗаписей = Выборка.Количество();
	РазмерПорцииОдномПотоке = Цел(Выборка.Количество()/КоличествоПотоковРаспределенияВзаиморасчетов()) + 1;
	Потоки = Новый Массив;
	ДанныеПотока = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеПотока.Добавить(Выборка.Ссылка);
		Если ДанныеПотока.Количество() = РазмерПорцииОдномПотоке Тогда
			Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьСлужебныеРегистраторы");
			Поток.НаименованиеЗадания = НСтр("ru = 'Удаление служебных регистраторов'");
			Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
			ЗапуститьОбработкуВФоне(Поток);
			Потоки.Добавить(Поток);
			ДанныеПотока = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПотока.Количество() > 0 Тогда
		Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьСлужебныеРегистраторы");
		Поток.НаименованиеЗадания = НСтр("ru = 'Удаление служебных регистраторов'");
		Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
		ЗапуститьОбработкуВФоне(Поток);
		Потоки.Добавить(Поток);
		ДанныеПотока = Новый Массив;
	КонецЕсли;
	
	ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей);
	
КонецПроцедуры

Функция ДанныеДляОчистки(ИмяРегистра, МоментВремени, РазмерПорции = 0)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Расчеты.МоментВремени КАК МоментВремени,
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор ССЫЛКА Документ.РегистраторРасчетов
	|	И (&БезОтбора ИЛИ Расчеты.МоментВремени > &МоментВремени)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.МоментВремени,
	|	Расчеты.Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.МоментВремени"; // сортировать только по возрастанию периода для избежания взаимоблокировок при записи даты минимальных итогов в таблицу AccumRegOpt 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления."+ИмяРегистра);
	Если РазмерПорции > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(РазмерПорции, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени('00010101'));
	КонецЕсли;
	Запрос.УстановитьПараметр("БезОтбора", МоментВремени = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура УдалитьЗаписиДокументов(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКОбработке = Параметры.ДанныеКОбработке;
	ИмяРегистра = Параметры.ИмяРегистра;
	КоличествоРегистраторов = ДанныеКОбработке.Количество();
	Для Каждого Регистратор Из ДанныеКОбработке Цикл
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоРегистраторов);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСлужебныеРегистраторы(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКОбработке = Параметры.ДанныеКОбработке;
	КоличествоРегистраторов = ДанныеКОбработке.Количество();
	Для Каждого Регистратор Из ДанныеКОбработке Цикл
		
		РегистрЧислоСтрокРегистраторовРасчетов = РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.СоздатьНаборЗаписей();
		РегистрЧислоСтрокРегистраторовРасчетов.Отбор.Документ.Установить(Регистратор);
		РегистрЧислоСтрокРегистраторовРасчетов.Записать();
		
		ДокументОбъект = Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Удалить();
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоРегистраторов);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеРаспределениеПлановыхОплат

Процедура ВыполнитьФоновоеРаспределениеРасчетов(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	РаспределитьФактическиеРасчеты = Ложь;
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("РаспределитьФактическиеРасчеты") Тогда
		РаспределитьФактическиеРасчеты = Параметры.РаспределитьФактическиеРасчеты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Константы.ВыполняетсяРаспределениеПлановыхРасчетов.Установить(Истина);
		
		КоличествоПопыток = 0;
		Пока КоличествоПопыток < 10 Цикл
			
			ОбщегоНазначенияБТС.Пауза(1);
			
			ПараметрыМП = ПараметрыМногопоточнойОбработкиРасчетов();
			ПараметрыМП.Процедура.Имя = "ОперативныеВзаиморасчетыСервер.ВыполнитьОтложенноеРаспределение";
			ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Распределение плановых расчетов'");
			ПараметрыМП.Данные.УсловиеЗапроса = "Задания.ДатаПересчета = ДАТАВРЕМЯ(3000,1,1)";
			Если РаспределитьФактическиеРасчеты Тогда
				ПараметрыМП.Данные.УсловиеЗапроса = "";
				ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Распределение фактических расчетов'");
			КонецЕсли;
			
			ВсегоОбработано = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
			
			КоличествоПопыток = КоличествоПопыток + 1;
			Если ВсегоОбработано > 0 Тогда
				КоличествоПопыток = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Событие = НСтр("ru = 'Фоновое распределение плановых расчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
		Если РаспределитьФактическиеРасчеты Тогда
			Событие = НСтр("ru = 'Фоновое распределение фактических расчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Константы.ВыполняетсяРаспределениеПлановыхРасчетов.Установить(Ложь);
	Если РаспределитьФактическиеРасчеты Тогда
		Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Установить(Ложь);
		ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеФункции

#Область МенеджерМногопоточнойОбработкиРасчетов

Функция МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(Параметры)
	
	ПроцедураОбработки = Параметры.Процедура;
	ПараметрыДанных = Параметры.Данные;
	РазмерПорцииОбработкиВОдномПотоке = Параметры.РазмерПорцииОбработкиВОдномПотоке;
	
	Потоки = Новый Массив;
	КоличествоСвободныхПотоков = КоличествоПотоковРаспределенияВзаиморасчетов();
	КоличествоОбъектовДляОбработки = РазмерПорцииОбработкиВОдномПотоке * КоличествоСвободныхПотоков;
	ПараметрыДанных.ПоследняяЗапись = НовыйКурсор();
	КоличествоОбработанныхЗаписей = 0;
	КоличествоОбработанныхЗаданий = 0;
	Пока КоличествоОбъектовДляОбработки > 0 Цикл
		
		Если КоличествоСвободныхПотоков > 0 Тогда
			
			ПараметрыДанных.РазмерПорции = РазмерПорцииОбработкиВОдномПотоке * КоличествоСвободныхПотоков;
			Выборка = ДанныеДляОбработки(ПараметрыДанных);
			ПараметрыДанных.ПоследняяЗапись = НовыйКурсор();
			Если Выборка.Количество() = ПараметрыДанных.РазмерПорции Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыДанных.ПоследняяЗапись, Выборка[Выборка.Количество() - 1]);
			КонецЕсли;
			
			ПараметрыДанных.РазмерПорции = 1;
			Если Выборка.Количество()/КоличествоСвободныхПотоков > 1 Тогда
				ПараметрыДанных.РазмерПорции = Окр(Выборка.Количество()/КоличествоСвободныхПотоков,0,РежимОкругления.Окр15как20);
			КонецЕсли;
			КоличествоОбъектовДляОбработки = 0;
			Пока Выборка.Количество() > 0 Цикл
				
				ДанныеПотока = ВыбратьДанныеДляПотока(Выборка, ПараметрыДанных.РазмерПорции);
				Поток = НовоеОписаниеПотока(ПроцедураОбработки.Имя);
				Поток.НаименованиеЗадания = ПроцедураОбработки.ПредставлениеЗадания;
				Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
				Для Каждого Параметр Из ПроцедураОбработки.Параметры Цикл
					Поток.ПараметрыПроцедуры.Вставить(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				ЗапуститьОбработкуВФоне(Поток);
				КоличествоОбъектовДляОбработки = КоличествоОбъектовДляОбработки + ДанныеПотока.Количество();
				КоличествоОбработанныхЗаданий = КоличествоОбработанныхЗаданий + ДанныеПотока.Количество();
				Потоки.Добавить(Поток);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОжидатьЗавершениеПотока(Поток);
		
		ЗавершитьПотокиВыполнившиеФЗ(Потоки, КоличествоОбработанныхЗаписей);
		Если ПараметрыДанных.ПоследняяЗапись.ОбъектРасчетов = Неопределено Тогда
			ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей);
		КонецЕсли;
		
		КоличествоДоступныхПотоков = КоличествоПотоковРаспределенияВзаиморасчетов();
		КоличествоСвободныхПотоков = Макс(КоличествоДоступныхПотоков - Потоки.Количество(), 0);
		
	КонецЦикла;
	
	ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей);
	
	Если КоличествоОбработанныхЗаписей = 0 Тогда
		Возврат КоличествоОбработанныхЗаданий;
	КонецЕсли;
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

Функция ПараметрыМногопоточнойОбработкиРасчетов(РазмерПорцииВОдномПотоке = Неопределено)
	
	Результат = Новый Структура;
	
	ПроцедураОбработки = Новый Структура;
	ПроцедураОбработки.Вставить("Имя", "");
	ПроцедураОбработки.Вставить("ПредставлениеЗадания", "");
	ПроцедураОбработки.Вставить("Параметры", Новый Структура);
	
	ДанныеОбработки = ПараметрыДанныхМногопоточнойОбработки();
	
	Результат.Вставить("РазмерПорцииОбработкиВОдномПотоке", РазмерПорцииОбработкиВОдномПотоке());
	Если РазмерПорцииВОдномПотоке <> Неопределено Тогда
		Результат.РазмерПорцииОбработкиВОдномПотоке = РазмерПорцииВОдномПотоке;
	КонецЕсли;
	Результат.Вставить("Процедура", ПроцедураОбработки);
	Результат.Вставить("Данные", ДанныеОбработки);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыДанныхМногопоточнойОбработки()
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("ПоследняяЗапись", Неопределено);
	ДанныеОбработки.Вставить("РазмерПорции", Неопределено);
	ДанныеОбработки.Вставить("УсловиеЗапроса", "");
	ДанныеОбработки.Вставить("ПараметрыЗапроса", Новый Структура);
	
	Возврат ДанныеОбработки;
	
КонецФункции

Функция НовыйКурсор()
	
	ПоследняяЗапись = Новый Структура("КоличествоДокументов,АналитикаУчетаПоПартнерам,ОбъектРасчетов");
	ПоследняяЗапись.КоличествоДокументов = 0;
	
	Возврат ПоследняяЗапись;
	
КонецФункции

Функция ДанныеДляОбработки(Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Задания.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ЭтоРасчетыСКлиентами,
	|	Задания.ТипРасчетов КАК ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задания.ОбъектРасчетов.Объект КАК Объект,
	|	Задания.Валюта КАК ВалютаРасчетов,
	|	МИНИМУМ(Задания.ДатаПересчета) КАК ДатаПересчета,
	|	МИНИМУМ(Задания.ДатаПересчетаПлан) КАК ДатаПересчетаПлан,
	|	СУММА(Задания.КоличествоДокументов) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК Задания
	|ГДЕ
	|	Задания.Обработка = 0
	|	И (Задания.КоличествоДокументов <= &КоличествоДокументов ИЛИ &КоличествоДокументов = 0)
	|	И (Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов > &ОбъектРасчетов
	|		ИЛИ Задания.АналитикаУчетаПоПартнерам > &АналитикаУчетаПоПартнерам
	|		ИЛИ &БезАналитики)
	|	И &Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Валюта,
	|	Задания.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР,
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов";
	
	Если Параметры.РазмерПорции = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(Параметры.РазмерПорции, "ЧН=0; ЧГ=0"));
	УсловиеЗапроса = Параметры.УсловиеЗапроса;
	Если НЕ ЗначениеЗаполнено(УсловиеЗапроса) Тогда
		УсловиеЗапроса = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", УсловиеЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоличествоДокументов", 0);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Неопределено);
	Запрос.УстановитьПараметр("ОбъектРасчетов", Неопределено);
	Запрос.УстановитьПараметр("БезАналитики", Истина);
	
	ПоследняяЗапись = Параметры.ПоследняяЗапись;
	Если ПоследняяЗапись <> Неопределено Тогда
		Запрос.УстановитьПараметр("КоличествоДокументов", ПоследняяЗапись.КоличествоДокументов);
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ПоследняяЗапись.АналитикаУчетаПоПартнерам);
		Запрос.УстановитьПараметр("ОбъектРасчетов", ПоследняяЗапись.ОбъектРасчетов);
		Запрос.УстановитьПараметр("БезАналитики", НЕ ЗначениеЗаполнено(ПоследняяЗапись.АналитикаУчетаПоПартнерам));
	КонецЕсли;
	
	Для Каждого Параметр Из Параметры.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ВыбратьДанныеДляПотока(ДанныеКОбработке, РазмерПорции)
	
	ДанныеПотока = ДанныеКОбработке.СкопироватьКолонки();
	Индекс = 0;
	Пока (ДанныеПотока.Количество() < РазмерПорции 
			ИЛИ ДанныеКОбработке.Количество()/РазмерПорции <= 1) // это последняя порция
		 И ДанныеКОбработке.Количество() > 0 Цикл
		Запись = ДанныеКОбработке[Индекс];
		ЗаполнитьЗначенияСвойств(ДанныеПотока.Добавить(), Запись);
		ДанныеКОбработке.Удалить(Запись);
		Индекс = Индекс + РазмерПорции;
		Если Индекс >= ДанныеКОбработке.Количество() Тогда
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПотока;
	
КонецФункции

Процедура ОтметитьВыполнениеЗадания(ОтборПоИзмерениям, ДополнительныеИзмеренияОтбора = "")
	
	ИзмеренияОтбораСтрокой =  
	"ТипРасчетов,
	|АналитикаУчетаПоПартнерам,
	|ОбъектРасчетов,
	|Валюта,
	|ВалютаРасчетов";
	Если НЕ ПустаяСтрока(ДополнительныеИзмеренияОтбора)  Тогда
		ИзмеренияОтбораСтрокой = ИзмеренияОтбораСтрокой + "," + ДополнительныеИзмеренияОтбора;
	КонецЕсли;
	
	ИзмеренияОтбора = Новый Структура(ИзмеренияОтбораСтрокой);
	ЗаполнитьЗначенияСвойств(ИзмеренияОтбора, ОтборПоИзмерениям);
	
	Набор = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
	Для Каждого Измерение Из ИзмеренияОтбора Цикл
		Если Измерение.Значение <> Неопределено Тогда
			ИмяИзмерения = ?(Измерение.Ключ = "ВалютаРасчетов", "Валюта", Измерение.Ключ);
			Набор.Отбор[ИмяИзмерения].Установить(Измерение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПотоками

Функция РазмерПорцииОбработкиВОдномПотоке()
	
	Возврат 1000;
	
КонецФункции

Функция КоличествоПотоковРаспределенияВзаиморасчетов()
	
	Количество = Константы.КоличествоПотоковРаспределенияВзаиморасчетов.Получить();
	Если Количество = 0 Тогда
		Количество = 8;
	КонецЕсли;
	Возврат Количество;
	
КонецФункции

// Новое описание потока.
// 
// Параметры:
//  ИмяМетода - Строка - Имя метода
// 
// Возвращаемое значение:
//  
Функция НовоеОписаниеПотока(ИмяМетода = "")
	
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторЗадания", Неопределено);
	Описание.Вставить("Процедура", ИмяМетода);
	Описание.Вставить("АдресРезультата", "");
	Описание.Вставить("НаименованиеЗадания", "");
	Описание.Вставить("ПараметрыПроцедуры", Новый Структура);
	Возврат Описание;
	
КонецФункции

Процедура ЗапуститьОбработкуВФоне(Поток)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Поток.НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(Поток.Процедура, Поток.ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Поток.АдресРезультата = РезультатЗапуска.АдресРезультата;
	Статус = РезультатЗапуска.Статус;
	
	Если Статус = "Выполняется" Тогда
		Поток.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
	ИначеЕсли Статус <> "Выполняется" И Статус <> "Выполнено" Тогда
		ВызватьИсключение РезультатЗапуска.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей = 0)
	Пока Потоки.Количество() > 0 Цикл
		Если НЕ ЗавершитьПотокиВыполнившиеФЗ(Потоки, КоличествоОбработанныхЗаписей) Тогда
			ОжидатьЗавершениеПотока(Потоки[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗавершитьПотокиВыполнившиеФЗ(Потоки, КоличествоОбработанныхЗаписей = 0)
	
	ЕстьЗавершенныеПотоки = Ложь;
	
	Индекс = Потоки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Поток = Потоки[Индекс];
		ИдентификаторЗадания = Поток.ИдентификаторЗадания;
		
		Если ИдентификаторЗадания <> Неопределено Тогда
			ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		КонецЕсли;
		
		Если ИдентификаторЗадания = Неопределено ИЛИ ЗаданиеВыполнено Тогда
			Если ЗначениеЗаполнено(Поток.АдресРезультата) Тогда
				Результат = ПолучитьИзВременногоХранилища(Поток.АдресРезультата);
				Если Результат <> Неопределено И Результат.Свойство("КоличествоОбработанныхЗаписей") Тогда
					КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + Результат.КоличествоОбработанныхЗаписей;
				КонецЕсли;
				УдалитьИзВременногоХранилища(Поток.АдресРезультата);
			КонецЕсли;
			Потоки.Удалить(Индекс);
			ЕстьЗавершенныеПотоки = Истина;
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ЕстьЗавершенныеПотоки;
	
КонецФункции

Функция ОжидатьЗавершениеПотока(Поток, Длительность = 1)
	
	Если Поток <> Неопределено И Поток.ИдентификаторЗадания <> Неопределено Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Поток.ИдентификаторЗадания);
		
		Если Задание <> Неопределено Тогда
			Попытка
				Задание.ОжидатьЗавершенияВыполнения(Длительность);
				Возврат Истина;
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

//Возвращает таблицу объектов расчетов по которым есть движения по ресурсам "Сумма", "КОплате", "КОтгрузке"
//
// Параметры:
//	Период - Дата - Необязательный, дата, после которой искать движения по регистрам.
//	
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица объектов расчетов:
//			* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//			* ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//			* ВалютаРасчетов - СправочникСсылка.Валюты.
//			* ЭтоРасчетыСКлиентами - Булево.
//			* КорАналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//			* КорОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//
Функция ПолучитьВсеОбъекты(Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	РасчетыСКлиентами.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	РасчетыСКлиентами.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	(РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0 ИЛИ РасчетыСКлиентами.КОтгрузке <> 0)
	|	И РасчетыСКлиентами.Период >= &Период
	|	И РасчетыСКлиентами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	РасчетыСПоставщиками.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	РасчетыСПоставщиками.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	(РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0 ИЛИ РасчетыСПоставщиками.КПоступлению <> 0)
	|	И РасчетыСПоставщиками.Период >= &Период
	|	И РасчетыСПоставщиками.Активность
	|УПОРЯДОЧИТЬ ПО
	|	КорОбъектРасчетов
	|";
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено,Дата(1,1,1),Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Для целей сортировки документов в пределах 1 секунды.
// 
// Параметры:
// 	ТипДокумента - Тип - Тип документ, для которого подбирается номер.
// Возвращаемое значение:
// 	Строка - Номер для порядка.
Функция НомерТипа(ТипДокумента) Экспорт
	
	//	При добавлении документа - добавить в конец с новым номером, не меняя типы других документов.
	
	Если ТипДокумента = Тип("ДокументСсылка.РасчетКурсовыхРазниц") ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистраторРасчетов")Тогда
		Тип="99";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Тип="01";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Тип="14";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Тип="16";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Тип="39";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Тип="35";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		Тип="02";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Тип="41";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Тип="22";
	//++ Локализация
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		Тип="23";
	//-- Локализация
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Тип="33";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводОстатков")
		Или ТипДокумента = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
		Тип="03";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		Тип="04";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		Тип="07";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Тип="06";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Тип="07";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		Тип="09";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика") Тогда
		Тип="10";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГрафикИсполненияДоговора") Тогда
		Тип="12";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Тип="17";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Тип="18";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Тип="19";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Тип="20";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
		Тип="21";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		Тип="25";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		Тип="26";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Тип="27";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		Тип="28";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Тип="30";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
		Тип="31";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Тип="32";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Тип="36";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Тип="37";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Тип="38";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Тип="40";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
		Тип="42";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Тип="43";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров") Тогда
		Тип="11";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупТоваровХранителем") Тогда
		Тип="45";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОСписанииТоваровСХранения") Тогда
		Тип="46";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках") Тогда
		 Тип="47";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Бронирование") Тогда
		Тип="49";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Сторно") Тогда
		Тип="50";
	КонецЕсли;
	
	Если Тип = "" Тогда
		
		ПодробноеПредставлениеОшибки = СтрЗаменить(
			НСтр("ru = 'Не определен порядок распределения типа документа в пределах дня %1.'"),
			"%1",
			ТипДокумента);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Оперативные взаиморасчеты с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	Иначе
		Возврат Тип;
	КонецЕсли;
	
КонецФункции

//Возвращает структуру данных реализации для передачи между служебными процедурами.
//
// Возвращаемое значение:
//	Структура - структура данных реализации.
//		* СуммаОстаток для корректировок - при первом упоминании формируется запись с первоначальной суммой, далее из нее вычитаются оплаты и корректировки.
//		* Остальные суммы для расчета среднего курса и, наверное, формирования движений по Суммам документов в валюте регл.
Функция СтруктураСумм(СуммаДокумента = 0, СуммаДокументаРегл = 0, СуммаДокументаУпр = 0)
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураСумм.Вставить("СуммаДокументаРегл", СуммаДокументаРегл);
	СтруктураСумм.Вставить("СуммаДокументаУпр", СуммаДокументаУпр);
	Возврат СтруктураСумм;
КонецФункции

//Типы регистраторов, которые двигают план оплат, отгрузок и поставок в приход.
//
// Возвращаемое значение:
// 	СписокЗначений из Тип - Список типов документов, которые двигают только плановые регистры расчетов. Используется для распредедления плановых расчетов.
Функция СписокТиповРегистраторовПланов()
	СписокТиповРегистраторовПланов = Новый СписокЗначений;

	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ГрафикИсполненияДоговора"));
	Возврат СписокТиповРегистраторовПланов;
КонецФункции

//Для данных хоз операций не будет сформирована двойная запись в регистрах расчетов по срокам.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив операций, для которых не нужно делать запись по переносу аванса.
//
Функция ХозяйственныеОперацииНеОтгрузка() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.НачислениеКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.НачислениеДебиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.РезервированиеАвансаКлиента);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОтражениеВозвратаОплатыЧерезКомиссионера);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, ХозяйственныеОперацииПереносаРасчетов());
	
	Возврат Массив;
КонецФункции

//Для данных хоз операций не будет сформирована двойная запись в регистрах расчетов по срокам, а так же будет сохранена исходная хозяйственная операция.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив операций, для которых не нужно делать запись по переносу аванса.
//
Функция ХозяйственныеОперацииПереносаРасчетов()
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносАванса);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносДолга);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом);
	Возврат Массив;
КонецФункции

//По данным хоз. операциям суммы в валюте регламентированного и управленческого учета не будут пересчитаны с учетом авансов.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив непересчитываемых операций.
Функция НепересчитываемыеХозяйственныеОперации() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика);
	Возврат Массив;
КонецФункции

//Возвращает движения документов Реализация товаров и услуг с хоз. операцией Товары в пути к движениям,
//пригодным для офлайн взаиморасчетов.
//
Процедура ВернутьДвиженияПоРасчетамСКлиентами()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Регистратор                  КАК Регистратор,
	|	МАКСИМУМ(РасчетыСКлиентами.Период)             КАК МаксимальныйПериод
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (ТИП(Документ.РеализацияТоваровУслуг),
	|													ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСКлиентами.Период) > 1");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Сумма <> 0 Тогда
				Запись.Период = Выборка.МаксимальныйПериод;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

//Количество одновременно записываемых записей регистров под одним служебным документом регистратором.
Функция РазмерПорцииЗаписи()
	Возврат 1000;
КонецФункции

Процедура ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаЗаписей, НаборЗаписей) 
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	Для Каждого РегистраторРасчетов Из ГлобальныеПеременные["МассивЗадействованныхРегистраторов"+ИмяРегистра] Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
		НаборЗаписей.Загрузить(ТаблицаЗаписей.Скопировать(Новый Структура("Регистратор", РегистраторРасчетов)));
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого СтрокаСвободныхРегистраторов Из ГлобальныеПеременные["МассивСвободныхРегистраторов"+ИмяРегистра] Цикл
		
		Если СтрокаСвободныхРегистраторов.ТребуетсяОчистка Тогда
			ТекущийРегистратор = СтрокаСвободныхРегистраторов.Ссылка; //ДокументСсылка.РегистраторРасчетов
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаЗаписей, НаборЗаписей)
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	МассивСвободныхРегистраторов = СвободныеРегистраторыРасчетов(ГлобальныеПеременные, ИмяРегистра, ТаблицаЗаписей.Количество());
	МассивЗадействованныхРегистраторов = Новый Массив;
	
	ТаблицаЗаписейПоПериодам = Новый ТаблицаЗначений;
	ТаблицаЗаписейПоПериодам.Колонки.Добавить("ПериодЗаписи", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаЗаписейПоПериодам.Колонки.Добавить("КоличествоЗаписей", ОбщегоНазначения.ОписаниеТипаЧисло(15,0));
	
	Если МассивСвободныхРегистраторов.Количество() > 0 Тогда
		
		счСтрок = 1;
		счРегистраторов = 0;
		
		МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
		МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
		
		Для Каждого Строка Из ТаблицаЗаписей Цикл
			Если ТипЗнч(Строка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
				Продолжить;
			КонецЕсли;
			Если счСтрок > РазмерПорцииЗаписи Тогда
				ОтразитьКоличествоЗаписейРегистраторовРасчетов(ГлобальныеПеременные, МассивСвободныхРегистраторов[счРегистраторов].Ссылка, ИмяРегистра, ТаблицаЗаписейПоПериодам);
				счСтрок = 1;
				счРегистраторов = счРегистраторов + 1;
				МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
				МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
			КонецЕсли;
			Строка.Регистратор = МассивСвободныхРегистраторов[счРегистраторов].Ссылка;
			
			ЗаписьПоПериоду = ТаблицаЗаписейПоПериодам.Добавить();
			ЗаписьПоПериоду.ПериодЗаписи = НачалоДня(Строка.Период);
			ЗаписьПоПериоду.КоличествоЗаписей = 1;
			
			счСтрок = счСтрок + 1;
		КонецЦикла;
		
		ОтразитьКоличествоЗаписейРегистраторовРасчетов(ГлобальныеПеременные, МассивСвободныхРегистраторов[счРегистраторов].Ссылка, ИмяРегистра, ТаблицаЗаписейПоПериодам);
	
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить("МассивСвободныхРегистраторов" + ИмяРегистра, МассивСвободныхРегистраторов);
	ГлобальныеПеременные.Вставить("МассивЗадействованныхРегистраторов" + ИмяРегистра, МассивЗадействованныхРегистраторов);
КонецПроцедуры

Процедура ОтразитьКоличествоЗаписейРегистраторовРасчетов(Параметры, Документ, ИмяРегистра, ТаблицаЗаписейПоПериодам)
	
	ТаблицаЗаписейПоПериодам.Свернуть("ПериодЗаписи", "КоличествоЗаписей");
	
	НаборЗаписей = РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Отбор.ИмяТаблицы.Установить(ИмяРегистра);
	
	Для каждого ТекущаяЗапись Из ТаблицаЗаписейПоПериодам Цикл
		ЗаписьРегистра                              = НаборЗаписей.Добавить();
		ЗаписьРегистра.АналитикаУчетаПоПартнерам    = Параметры.АналитикаУчетаПоПартнерам;
		ЗаписьРегистра.ОбъектРасчетов               = Параметры.ОбъектРасчетов;
		ЗаписьРегистра.Валюта                       = Параметры.ВалютаРасчетов;
		ЗаписьРегистра.ИмяТаблицы                   = ИмяРегистра;
		ЗаписьРегистра.ПериодЗаписи                 = ТекущаяЗапись.ПериодЗаписи;
		ЗаписьРегистра.Документ                     = Документ;
		ЗаписьРегистра.КоличествоЗаписей            = ТекущаяЗапись.КоличествоЗаписей;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	ТаблицаЗаписейПоПериодам.Очистить();
	
КонецПроцедуры

// Находит неиспользуемые регистраторы расчетов и удаляет их
//
// Параметры:
//   Запрос - Запрос - Запрос с установленными параметрами.
//   ИмяРегистраРасчетов - Строка.
//   ИмяРегистраПланаОплат - Строка.
//   ИмяРегистраПланаОтгрузкиПоставки - Строка.
//
Процедура УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки)
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|ГДЕ            
	|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РегистраторРасчетов.Валюта                    = &ВалютаРасчетов
	|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаПланаОплат КАК РасчетыПланОплат
	|		ГДЕ
	|			РасчетыПланОплат.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаПланаОтгрузкиПоставки КАК РасчетыПланОтгрузокПоставок
	|		ГДЕ
	|			РасчетыПланОтгрузокПоставок.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаРасчетов КАК РасчетыПоСрокам
	|		ГДЕ
	|			РасчетыПоСрокам.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаРасчетов", "РегистрНакопления." + ИмяРегистраРасчетов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаПланаОтгрузкиПоставки", "РегистрНакопления." + ИмяРегистраПланаОтгрузкиПоставки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаПланаОплат", "РегистрНакопления." + ИмяРегистраПланаОплат);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект(); // ДокументОбъект.РегистраторРасчетов
		ДокументОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьВсе(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	
КонецПроцедуры

// Находит по указанным параметрам корректировки регистров, очищает их и возвращает новую корректировку.
//
// Параметры:
//   ПериодКорректировки - Дата - Все корректировки позже этой даты будут очищены, а с равной датой еще и удалены.
//   Организация - СправочникСсылка.Организации.
//   Операция - ПеречислениеСсылка.ОперацииКорректировкиРегистров.
//
// Возвращаемое значение:
//   ДокументОбъект.КорректировкаРегистров - Пустой документ корректировки, с заполненными реквизитами.
//
Функция КорректировкаРегистров(ПериодКорректировки, Организация, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КорректировкаРегистров.Ссылка КАК Ссылка,
	|	КорректировкаРегистров.Дата КАК Дата
	|ИЗ
	|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|ГДЕ
	|	КорректировкаРегистров.Дата >= &Дата
	|	И КорректировкаРегистров.Операция = &Операция
	|	И КорректировкаРегистров.Организация = &Организация
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРегистров.Дата ВОЗР";
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ПериодКорректировки));
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	КорректировкаОбъект = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.КорректировкаРегистров
		Для Каждого Регистр Из ДокументОбъект.ТаблицаРегистров Цикл
			Движения = ДокументОбъект.Движения[Регистр.Имя]; // РегистрНакопленияНаборЗаписей
			Движения.Записать();
		КонецЦикла;
		
		Если Выборка.Дата = КонецМесяца(ПериодКорректировки) Тогда
			КорректировкаОбъект = ДокументОбъект;
			КорректировкаОбъект.УстановитьПометкуУдаления(Ложь);
		Иначе
			ДокументОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректировкаОбъект = Неопределено Тогда
		КорректировкаОбъект = Документы.КорректировкаРегистров.СоздатьДокумент();
		КорректировкаОбъект.Дата        = ПериодКорректировки;
		КорректировкаОбъект.Операция    = Операция;
		КорректировкаОбъект.Организация = Организация;
		КорректировкаОбъект.УстановитьСсылкуНового(Документы.КорректировкаРегистров.ПолучитьСсылку());
		
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "РасчетыСКлиентамиПоСрокам";
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "РасчетыСПоставщикамиПоСрокам";
		
		КорректировкаОбъект.Записать();
	КонецЕсли;
	
	Возврат КорректировкаОбъект;
	
КонецФункции

Процедура УдалитьСистемныеКорректировкиРегистров(ДатаПересчета, Организация = Неопределено, Операция = Неопределено, Контрагент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КорректировкаРегистров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|ГДЕ
	|	КорректировкаРегистров.Дата >= &Дата
	|	И (КорректировкаРегистров.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И КорректировкаРегистров.Операция В (&Операции)
	|	И &ПоВсемКонтрагентам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючАналитики
	|			ПО КлючАналитики.Ссылка = Расчеты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Расчеты.Период >= &Дата
	|	И КлючАналитики.Контрагент = &Контрагент
	|	И (КлючАналитики.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И НЕ &ПоВсемКонтрагентам
	|	И Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРегистров).Операция В (&Операции)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючАналитики
	|			ПО КлючАналитики.Ссылка = Расчеты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Расчеты.Период >= &Дата
	|	И КлючАналитики.Контрагент = &Контрагент
	|	И (КлючАналитики.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И НЕ &ПоВсемКонтрагентам
	|	И Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРегистров).Операция В (&Операции)
	|
	|;
	|
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|ГДЕ
	|	(КлючиАналитикиУчетаПоПартнерам.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И КлючиАналитикиУчетаПоПартнерам.Контрагент = &Контрагент
	|	И НЕ &ПоВсемКонтрагентам";
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПересчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Организация = Неопределено);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", Контрагент = Неопределено);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Операции = Новый Массив;
	Если ЗначениеЗаполнено(Операция) Тогда
		Операции.Добавить(Операция);
	Иначе
		Операции.Добавить(Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазрывовОстатковВзаиморасчетов);
		Операции.Добавить(Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
	КонецЕсли;
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	ТаблицаАналитик = Результат[1].Выгрузить();
	ТаблицаАналитик.Индексы.Добавить("АналитикаУчетаПоПартнерам");
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.КорректировкаРегистров
		
		Для Каждого Регистр Из ДокументОбъект.ТаблицаРегистров Цикл
			Движения = ДокументОбъект.Движения[Регистр.Имя]; // РегистрНакопленияНаборЗаписей
			Если ЗначениеЗаполнено(Контрагент) 
				И (Регистр.Имя = Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя 
					Или Регистр.Имя = Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя) Тогда
					Движения.Прочитать();
					Счетчик = Движения.Количество();
					Пока Счетчик > 0 Цикл
						Счетчик = Счетчик - 1;
						Если ТаблицаАналитик.Найти(Движения[Счетчик].АналитикаУчетаПоПартнерам) <> Неопределено Тогда
							Движения.Удалить(Счетчик);
						КонецЕсли;
					КонецЦикла;
					
			КонецЕсли;
			Движения.Записать();
		КонецЦикла;
		
		Если ДокументОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
			И ДокументОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
			ДокументОбъект.Удалить();
		Иначе
			ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(ДокументОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИзмененийДляПересчета(МенеджерВременныхТаблиц, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипРегистратора", ТипЗнч(Регистратор));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ТипРасчетов                      КАК ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов                   КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов                   КАК ВалютаРасчетов,
	|	МИНИМУМ(ВложенныйЗапрос.ПустойКорОбъектРасчетов) КАК ПустойКорОбъектРасчетов,
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокФакт)             КАК ПорядокФакт,
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокПлан)             КАК ПорядокПлан
	|ИЗ 
	|	&ТаблицаИзменений КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов
	|УПОРЯДОЧИТЬ ПО
	|	МИНИМУМ(ВложенныйЗапрос.ПустойКорОбъектРасчетов) УБЫВ
	|";
	
	ТекстыВложенногоЗапроса = Новый Массив;
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено Тогда
		ТекстыВложенногоЗапроса.Добавить("
		|	ВЫБРАТЬ
		|		ВЫБОР 
		|			КОГДА &ТипРегистратора = ТИП(Документ.ВводОстатков)
		|				ИЛИ &ТипРегистратора = ТИП(Документ.ВводОстатковВзаиморасчетов)
		|				ТОГДА """"
		|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОтгрузке<> 0)
		|				ТОГДА Изменения.ПорядокОперации
		|			ИНАЧЕ ""30000101""
		|		КОНЕЦ                                                                           КАК ПорядокФакт,
		|		Изменения.ПорядокОперации                                                       КАК ПорядокПлан,
		|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
		|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)                 КАК ТипРасчетов,
		|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
		|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
		|	ИЗ
		|		РасчетыСКлиентамиИзменения КАК Изменения
		|	ГДЕ
		|		Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОплате <> 0 ИЛИ Изменения.КОтгрузке <> 0 
		|");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено
		И МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено Тогда
		ТекстыВложенногоЗапроса.Добавить("
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено Тогда
		ТекстыВложенногоЗапроса.Добавить("
		|	ВЫБРАТЬ
		|		ВЫБОР 
		|			КОГДА &ТипРегистратора = ТИП(Документ.ВводОстатков)
		|				ИЛИ &ТипРегистратора = ТИП(Документ.ВводОстатковВзаиморасчетов)
		|				ТОГДА """"
		|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КПоступлению<> 0)
		|				ТОГДА Изменения.ПорядокОперации
		|			ИНАЧЕ ""30000101""
		|		КОНЕЦ                                                                           КАК ПорядокФакт,
		|		Изменения.ПорядокОперации                                                       КАК ПорядокПлан,
		|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
		|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)              КАК ТипРасчетов,
		|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
		|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
		|	ИЗ
		|		РасчетыСПоставщикамиИзменения КАК Изменения
		|	ГДЕ
		|		Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0 ИЛИ Изменения.КОплате <> 0 ИЛИ Изменения.КПоступлению <> 0 
		|");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаИзменений", СтрШаблон("(%1)", СтрСоединить(ТекстыВложенногоЗапроса)));
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Процедура ОтключитьИтогиРегистровРасчетов()
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
	
КонецПроцедуры

Процедура ВключитьИтогиРегистровРасчетов()
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПересчитатьИтоги();
	
КонецПроцедуры

#Область РасчетКурсовыхРазниц

// Возвращает структуру параметров необходимых для регистрации документа к отложенному распределению расчетов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  *ЭтоРасчетыСКлиентами - Булево - Истина если это расчеты с клиентами.
//  *ПереоценкаПоДням - Булево - Истина если необходимо переоценивать каждый день, иначе только по дням оплаты.
//  *ПерезаполнениеРегистровНУ - Булево - Истина если выполняется расчет курсовых по НУ.
//
Функция ПараметрыПереоценки(ЭтоРасчетыСКлиентами = Неопределено, ПереоценкаПоДням = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Результат.Вставить("ПереоценкаПоДням", ПереоценкаПоДням);
	Если ПереоценкаПоДням = Неопределено Тогда
		Результат.Вставить("ПереоценкаПоДням", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	КонецЕсли;
	Результат.Вставить("ПерезаполнениеРегистровНУ", Ложь);

	Возврат Результат;
	
КонецФункции

Функция УдалитьКурсовыеРазницыЗаДень(Период, НаборЗаписей)
	
	Индекс = 0;
	БылоУдаление = Ложь;
	Пока Индекс < НаборЗаписей.Количество() Цикл
		Запись = НаборЗаписей[Индекс];
		Если НачалоДня(Запись.Период) = НачалоДня(Период)
			И ТипЗнч(Запись.ДокументРегистратор) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
			НаборЗаписей.Удалить(Запись);
			БылоУдаление = Истина;
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат БылоУдаление;
	
КонецФункции

Функция ДниПереоценки(МассивОрганизаций, НачалоПериода, КонецПериода, Параметры)
	
	#Область ТекстЗапроса
	ТекстЗапроса = "
	|// Оплаты клиентов в валюте
	|ВЫБРАТЬ
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Период КАК Период
	|ПОМЕСТИТЬ втОборотыВалюты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|	ПО
	|		Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|ГДЕ
	|	&РасчетыСКлиентами
	|	И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Организации.Ссылка В (&Организации)
	|	И (Расчеты.Валюта <> &ВалютаУправленческогоУчета ИЛИ Расчеты.Валюта <> Организации.ВалютаРегламентированногоУчета)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Долг <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Оплаты поставщикам в валюте
	|ВЫБРАТЬ
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|	ПО
	|		Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|ГДЕ
	|	&РасчетыСПоставщиками
	|	И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Организации.Ссылка В (&Организации)
	|	И (Расчеты.Валюта <> &ВалютаУправленческогоУчета ИЛИ Расчеты.Валюта <> Организации.ВалютаРегламентированногоУчета)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Долг <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(втОборотыВалюты.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	втОборотыВалюты КАК втОборотыВалюты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалют.Период
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ПереоценкаПоДням
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&КонецПериода, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организации",  МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",  Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("РасчетыСКлиентами", Параметры.ЭтоРасчетыСКлиентами = Неопределено ИЛИ Параметры.ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("РасчетыСПоставщиками", Параметры.ЭтоРасчетыСКлиентами = Неопределено ИЛИ НЕ Параметры.ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("ПереоценкаПоДням",  Параметры.ПереоценкаПоДням);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

Функция РегистраторыКурсовыхРазниц(Параметры, РегистраторыРасчетов, КоличествоЗаписей)
	
	Если КоличествоЗаписей = 0 Тогда
		КоличествоРегистраторов = 0;
	Иначе
		КоличествоРегистраторов = Цел(КоличествоЗаписей/РазмерПорцииЗаписи()) + 1;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ВалютаРасчетов,ЭтоРасчетыСКлиентами");
	ЗаполнитьЗначенияСвойств(Отбор, Параметры);
	
	ТипРасчетов = ?(Параметры.ЭтоРасчетыСКлиентами, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	ТаблицаДокументов = РегистраторыРасчетов.Скопировать(Отбор); // см.СвободныеРегистраторыРасчетов
	
	Пока ТаблицаДокументов.Количество() < КоличествоРегистраторов Цикл
		ДокументОбъект = Документы.РегистраторРасчетов.СоздатьДокумент();
		ДокументОбъект.Валюта = Параметры.ВалютаРасчетов;
		ДокументОбъект.АналитикаУчетаПоПартнерам = Параметры.АналитикаУчетаПоПартнерам;
		ДокументОбъект.Организация = ?(Параметры.Организация = Неопределено,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.АналитикаУчетаПоПартнерам, "Организация"),
										Параметры.Организация);
		ДокументОбъект.ОбъектРасчетов = Параметры.ОбъектРасчетов;
		ДокументОбъект.ТипРасчетов = ТипРасчетов;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НовСтр = ТаблицаДокументов.Добавить();
		НовСтр.Ссылка = ДокументОбъект.Ссылка;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

#КонецОбласти

Функция СуммаСписания(Курс, СуммаВВалюте, СуммаВзаиморасчетов, СуммаКСписанию)
	
	Если СуммаКСписанию = СуммаВзаиморасчетов Тогда
		Возврат СуммаВВалюте;
	ИначеЕсли СуммаВВалюте = 0 Или СуммаВзаиморасчетов = 0 Тогда
		Возврат 0;
	Иначе
		Если Курс = 0 Тогда
			Если СуммаВВалюте > СуммаВзаиморасчетов Тогда
				Возврат Окр(СуммаВВалюте / СуммаВзаиморасчетов * СуммаКСписанию, 2);
			Иначе
				Возврат Окр(СуммаКСписанию / (СуммаВзаиморасчетов/СуммаВВалюте), 2);
			КонецЕсли;
		Иначе
			Возврат Окр(Курс * СуммаКСписанию,2);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Включить)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "РаспределениеФактическихВзаиморасчетов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() = 1 Тогда
		Параметры = Новый Структура();
		Параметры.Вставить("Использование", Включить);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задания[0].УникальныйИдентификатор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМетодаОтложенногоРаспределенияВзаиморасчетов()
	Возврат "ОперативныеВзаиморасчетыСервер.ВыполнитьФоновоеРаспределениеРасчетов";
КонецФункции

Процедура СоздатьТаблицуДатЗаПериод(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ДатаНачала, ДатаОкончания)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ ДатаНачала<Дата(1980,1,1) Тогда
		ВызватьИсключение(НСтр("ru = 'Не заполнена дата начала границы курсов.'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 0 КАК Шаг
	|ПОМЕСТИТЬ ТаблицаИсходныхЦифр
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 1
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 2
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 3
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 4
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 5
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 6
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 7
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 8
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 9
	|ИНДЕКСИРОВАТЬ ПО
	|	Шаг
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсходныхЦифр1.Шаг * 1000 + ТаблицаИсходныхЦифр2.Шаг * 100 + ТаблицаИсходныхЦифр3.Шаг * 10 + ТаблицаИсходныхЦифр4.Шаг КАК Счетчик
	|ПОМЕСТИТЬ ТаблицаСчетчик
	|ИЗ
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр1,
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр2,
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр3,
	|	ТаблицаИсходныхЦифр КАК ТаблицаИсходныхЦифр4
	|ГДЕ
	|	(ТаблицаИсходныхЦифр1.Шаг * 1000 + ТаблицаИсходныхЦифр2.Шаг * 100 + ТаблицаИсходныхЦифр3.Шаг * 10 + ТаблицаИсходныхЦифр4.Шаг) <= РАЗНОСТЬДАТ(&ДатаНачала,&ДатаОкончания,ДЕНЬ)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, ТаблицаСчетчик.Счетчик) КАК Дата
	|ПОМЕСТИТЬ ИмяВТ
	|ИЗ
	|	ТаблицаСчетчик КАК ТаблицаСчетчик
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата
	|";
	
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",НачалоДня(ДатаОкончания));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИмяВТ",ИмяВременнойТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОбработчикОбновленияРегистраВзаиморасчетовВыполнен(ИмяОбработчика)
	
	ОбработчикОбновленияВыполнен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбработчикиОбновления.ИмяОбработчика,
	|	ОбработчикиОбновления.Статус
	|ИЗ
	|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
	|ГДЕ
	|	ОбработчикиОбновления.ИмяОбработчика = &ИмяОбработчика
	|СГРУППИРОВАТЬ ПО
	|	ОбработчикиОбновления.ИмяОбработчика,
	|	ОбработчикиОбновления.Статус";
	
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.СтатусыОбработчиковОбновления.Выполнен Тогда
			ОбработчикОбновленияВыполнен = Истина;
		Иначе
			ОбработчикОбновленияВыполнен = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбработчикОбновленияВыполнен;
	
КонецФункции

Процедура ОтразитьСостоянияЗаказов(ОбработанныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбработанныеДанные", ОбработанныеДанные);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Таблица.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтОбработанныеДанные
	|ИЗ
	|	&ОбработанныеДанные КАК Таблица
	|
	|;
	|
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК ОбработанныйДокумент
	|ИЗ
	|	ВтОбработанныеДанные КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Ссылка = Таблица.ОбъектРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасчетыСКлиентами.ПродажаПоЗаказу КАК ОбработанныйДокумент
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = РасчетыСКлиентами.ПродажаПоЗаказу
	|ГДЕ
	|	(РасчетыСКлиентами.АналитикаУчетаПоПартнерам, РасчетыСКлиентами.ОбъектРасчетов)
	|	В (ВЫБРАТЬ Т.АналитикаУчетаПоПартнерам, Т.ОбъектРасчетов ИЗ ВтОбработанныеДанные КАК Т)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу <> НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасчетыСПоставщиками.ЗакупкаПоЗаказу КАК ОбработанныйДокумент
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = РасчетыСПоставщиками.ЗакупкаПоЗаказу
	|ГДЕ
	|	(РасчетыСПоставщиками.АналитикаУчетаПоПартнерам, РасчетыСПоставщиками.ОбъектРасчетов)
	|	В (ВЫБРАТЬ Т.АналитикаУчетаПоПартнерам, Т.ОбъектРасчетов ИЗ ВтОбработанныеДанные КАК Т)
	|	И РасчетыСПоставщиками.ЗакупкаПоЗаказу <> НЕОПРЕДЕЛЕНО
	|";
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбработанныйДокумент");
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(МассивДокументов, Ложь);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(МассивДокументов, Ложь);
	
КонецПроцедуры

#КонецОбласти
