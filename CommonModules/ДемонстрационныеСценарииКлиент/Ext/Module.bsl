
#Область ПрограммныйИнтерфейс

// Обрабатывает событие поиска и замены в формах демонстрационных сценариев
//
// Параметры:
//  ПараметрыСобытия  - см. НовыйПараметрыОповещенияИзмененияПоискаИЗамены
//  Форма             - ФормаКлиентскогоПриложения - форма в которой происходит событие
//
Процедура ОбработатьСобытиеПоискаИЗамены(ПараметрыСобытия, Форма) Экспорт
	
	ДемонстрационныйСценарий = Форма.Объект.Ссылка;
	
	Если ПараметрыСобытия.ДемонстрационныйСценарий <> ДемонстрационныйСценарий Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОповещения = НовыйПараметрыОповещенияИзмененияПоискаИЗамены();
	ПараметрыОповещения.ДемонстрационныйСценарий = ДемонстрационныйСценарий;
	
	Если ПараметрыСобытия.Операция = "НайтиВсеВхождения" Тогда
		
		ОтменитьРезультатыПоискаЕслиНеобходимо(Форма);
		
		РезультатОперации = РезультатПоискаВсехВхождений(Форма.ТекстСценария, ПараметрыСобытия);
		
		Если РезультатОперации.ЕстьРезультатыПоиска Тогда
			
			Форма.ВыполненПоиск = Истина;
			Форма.СтрокаПоиска  = ПараметрыСобытия.ЧтоМеняем;
			Форма.ПоследнееНаправлениеПоиска  = "Вперед";
			
			ПараметрыОповещения.ЕстьРезультатыПоиска       = Истина;
			ПараметрыОповещения.ЕстьСледующийРезультат     = РезультатОперации.ПозицииНайденного.Количество() > 1;
			ПараметрыОповещения.ЕстьТекущийРезультатПоиска = Истина;
			
		КонецЕсли;
		
		Оповестить("ДемонстрационныеСценарии_ИзменениеПараметровФормыПоискаИЗамены", ПараметрыОповещения, Форма);
		
	ИначеЕсли ПараметрыСобытия.Операция = "ЗаменитьВсеВхождения" Тогда 
		
		РезультатОперации = РезультатЗаменыВсехВхождений(Форма.ТекстСценария, ПараметрыСобытия);
		
		Если РезультатОперации.БылаВыполненаЗамена Тогда
			
			Форма.ВыполненПоиск               = Истина;
			Форма.СтрокаПоиска                = "";
			Форма.ПоследнееНаправлениеПоиска  = "";
			Форма.ЕстьИзмененияРедактирования = Истина; 
			Форма.Модифицированность          = Истина;
			
		КонецЕсли;
			
		Оповестить("ДемонстрационныеСценарии_ИзменениеПараметровФормыПоискаИЗамены", ПараметрыОповещения, Форма); 
		
	ИначеЕсли ПараметрыСобытия.Операция = "ЗаменитьТекущее" Тогда 
		
		РезультатОперации = РезультатЗаменыТекущегоВхождения(Форма.ТекстСценария, ПараметрыСобытия, Форма.ПоследнееНаправлениеПоиска);
		
		Если РезультатОперации.БылаВыполненаЗамена Тогда
			Форма.ЕстьИзмененияРедактирования = Истина;
			Форма.Модифицированность          = Истина;
		КонецЕсли;
		
		Если Не РезультатОперации.ЕстьСледующееНайденное 
			И Не РезультатОперации.ЕстьПредыдущееНайденное Тогда
			
			ПараметрыОповещения.ЕстьРезультатыПоиска = Ложь;
			Форма.ВыполненПоиск                      = Истина;
			Форма.СтрокаПоиска                       = "";
			Форма.ПоследнееНаправлениеПоиска         = "";
			
		КонецЕсли;
		
		Если РезультатОперации.ЕстьСледующееНайденное
			Или РезультатОперации.ЕстьПредыдущееНайденное 
			Или РезультатОперации.ЕстьТекущийРезультатПоиска Тогда
			
			ПараметрыОповещения.ЕстьРезультатыПоиска = Истина;
			
		КонецЕсли;
		
		ПараметрыОповещения.ЕстьСледующийРезультат     = РезультатОперации.ЕстьСледующееНайденное;
		ПараметрыОповещения.ЕстьПредыдущийРезультат    = РезультатОперации.ЕстьПредыдущееНайденное;
		ПараметрыОповещения.ЕстьТекущийРезультатПоиска = РезультатОперации.ЕстьТекущийРезультатПоиска;
		
		Оповестить("ДемонстрационныеСценарии_ИзменениеПараметровФормыПоискаИЗамены", ПараметрыОповещения, Форма);

		
	ИначеЕсли ПараметрыСобытия.Операция = "НайтиСледующий" Тогда 
		
		РезультатОперации = РезультатПоискаСледующего(Форма.ТекстСценария, ПараметрыСобытия);
		
		ПараметрыОповещения.ЕстьРезультатыПоиска       = Истина;
		ПараметрыОповещения.ЕстьСледующийРезультат     = РезультатОперации.ЕстьСледующееНайденное;
		ПараметрыОповещения.ЕстьПредыдущийРезультат    = РезультатОперации.ЕстьПредыдущееНайденное;
		ПараметрыОповещения.ЕстьТекущийРезультатПоиска = Истина;
		
		Форма.ПоследнееНаправлениеПоиска             = "Вперед";
		
		Оповестить("ДемонстрационныеСценарии_ИзменениеПараметровФормыПоискаИЗамены", ПараметрыОповещения, Форма);
		
	ИначеЕсли ПараметрыСобытия.Операция = "НайтиПредыдущий" Тогда 
		
		РезультатОперации = РезультатПоискаПредыдущего(Форма.ТекстСценария, ПараметрыСобытия);
		
		ПараметрыОповещения.ЕстьРезультатыПоиска       = Истина;
		ПараметрыОповещения.ЕстьСледующийРезультат     = РезультатОперации.ЕстьСледующееНайденное;
		ПараметрыОповещения.ЕстьПредыдущийРезультат    = РезультатОперации.ЕстьПредыдущееНайденное;
		ПараметрыОповещения.ЕстьТекущийРезультатПоиска = Истина;
		
		Форма.ПоследнееНаправлениеПоиска             = "Назад";
		
		Оповестить("ДемонстрационныеСценарии_ИзменениеПараметровФормыПоискаИЗамены", ПараметрыОповещения, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие закрытия формы и замены
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма в которой обрабатывается событие
//
Процедура ПослеЗакрытияФормыПоискаИЗамены(Форма) Экспорт
	
	ОтменитьРезультатыПоискаЕслиНеобходимо(Форма);
	ПеренестиРезультатыИзмененийЕслиНеобходимо(Форма);
	
КонецПроцедуры

// Обрабатывает событие принятия результатов перевода
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма в которой обрабатывается событие
//  Результат               - КодВозвратаДиалога - ответ пользователя на вопрос о принятии результатов перевода
//  ДополнительныеПараметры  - Структура - дополнительные данные события
//
Процедура ПослеПринятияРезультатовПеревода(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ТекстСценария               = ДополнительныеПараметры.ПереведенныйТекст;
	Форма.ЕстьИзмененияРедактирования = Истина;
	Форма.Модифицированность          = Истина;
	
	ПеренестиРезультатыИзмененийЕслиНеобходимо(Форма);
	
КонецПроцедуры

// Обрабатывает событие нажатия в поле HTML документа
//
// Параметры:
//  Элемент               - ПолеФормы - поле формы, в которой возникает событие
//  ДанныеСобытия         - Структура - данные события
//  СтандартнаяОбработка  - Булево - признак стандартной обработки события
//
Процедура ПриНажатииВПолеHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	Если ДанныеСобытия <> Неопределено
		И Не ПустаяСтрока(ДанныеСобытия.Href) > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ДанныеСобытия.Href);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму поиска и замены в демонстрационных сценариях
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма из которой открывается форма поиска
//
Процедура ОткрытьФормуПоиска(Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДемонстрационныйСценарий", Форма.Объект.Ссылка);
	Если Форма.ПараметрыПоискаПриОткрытии <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ПараметрыПоискаПриОткрытии", Форма.ПараметрыПоискаПриОткрытии); 
	КонецЕсли;
	
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыПоискаИЗамены", Форма);
	
	ОткрытьФорму("Справочник.ДемонстрационныеСценарии.Форма.ПоискИЗамена", ПараметрыОткрытия, Форма,
	             ,,,ОповещениеОЗакрытииФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет перевод с языка просмотра в форме демонстрационного сценария
//
// Параметры:
//  Форма                     - ФормаКлиентскогоПриложения - форма, в которой выполняется перевод
//  ИсходныйТекст             - Строка - Исходный текст
//  ТекстПеревода             - Строка - Текст, который содержится в реквизите, в который будет помещен перевод
//  ИсходныйЯзык              - Строка - код языка, с которого осуществляется перевод
//  ЯзыкПеревода              - Строка - язык, на который будет выполняется перевод
//  ЭлементСообщенияОбОшибке  - ПолеФормы - поле, для которого будет выводиться сообщение об ошибке
//  Вложения                  - Неопределено, Структура - вложения HTML документа
//
Процедура ПеревестиСЯзыкаПросмотра(Форма, ИсходныйТекст, ТекстПеревода, ИсходныйЯзык, ЯзыкПеревода, ЭлементСообщенияОбОшибке, Вложения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЯзыкПеревода)
		И ЗначениеЗаполнено(ИсходныйЯзык) 
		И Не ЯзыкПеревода = ИсходныйЯзык Тогда 
		
		РезультатПеревода = ДемонстрационныеСценарииВызовСервера.РезультатПереводаНаДругиеЯзыки(ИсходныйТекст, ИсходныйЯзык, ЯзыкПеревода);
		Если Не РезультатПеревода.Успешно Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПеревода.СообщениеПользователю,, ЭлементСообщенияОбОшибке);
			
		Иначе
			
			Если РезультатПеревода.ПереведенныйТекст <> ТекстПеревода Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПереведенныйТекст", РезультатПеревода.ПереведенныйТекст);
				ДополнительныеПараметры.Вставить("Вложения",          Вложения);
				
				ОповещениеВопросПослеПеревода = Новый ОписаниеОповещения("ПослеОтветаНаВопросПослеПеревода", Форма, ДополнительныеПараметры);
				ТекстВопроса = СтрШаблон(НСтр("ru = 'В результате перевода текст на языке ""%1"" будет изменен, продолжить?'; en = 'As a result of translation text in language ""%1"" will be changed'"), ЯзыкПеревода);
				ПоказатьВопрос(ОповещениеВопросПослеПеревода, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
				
			Иначе
				
				ТексСообщения = СтрШаблон(НСтр("ru = 'После перевода текст на языке ""%1"" изменен не был'; en = 'After translation text in language ""%1"" is not changed'"), ЯзыкПеревода);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТексСообщения,, ЭлементСообщенияОбОшибке);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Новый параметры оповещения поиска и замены.
// 
// Возвращаемое значение:
//  Структура - содержит:
// * ЕстьРезультатыПоиска       - Булево -
// * ЕстьСледующийРезультат     - Булево -
// * ЕстьПредыдущийРезультат    - Булево -
// * ЕстьТекущийРезультатПоиска - Булево -
// * ДемонстрационныйСценарий   - СправочникСсылка.ДемонстрационныеСценарии -
Функция НовыйПараметрыОповещенияИзмененияПоискаИЗамены()
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЕстьРезультатыПоиска",       Ложь);
	ПараметрыОповещения.Вставить("ЕстьСледующийРезультат",     Ложь);
	ПараметрыОповещения.Вставить("ЕстьПредыдущийРезультат",    Ложь);
	ПараметрыОповещения.Вставить("ЕстьТекущийРезультатПоиска", Ложь);
	ПараметрыОповещения.Вставить("ДемонстрационныйСценарий",   ПредопределенноеЗначение("Справочник.ДемонстрационныеСценарии.ПустаяСсылка"));
	
	Возврат ПараметрыОповещения;

КонецФункции

Функция РезультатПоискаВсехВхождений(ТекстСценария, ПараметрыСобытия) 
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьРезультатыПоиска", Ложь);
	Результат.Вставить("ПозицииНайденного",    Неопределено);
	
	ПозицииНайденногоВТексте =  ДемонстрационныеСценарииКлиентСервер.ПозицииНайденногоВТексте(ТекстСценария, ПараметрыСобытия);
	
	Если ПозицииНайденногоВТексте.Количество() > 0 Тогда
		ВыделитьНайденноеВТексте(ТекстСценария, ПараметрыСобытия.ЧтоМеняем, ПозицииНайденногоВТексте);
		Результат.ЕстьРезультатыПоиска = Истина;
		Результат.ПозицииНайденного    = ПозицииНайденногоВТексте;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗаменыТекущегоВхождения(ТекстДляИзменения, ПараметрыСобытия, ПоследнееНаправлениеПоиска)
	
	Результат = Новый Структура;
	Результат.Вставить("БылаВыполненаЗамена",        Ложь);
	Результат.Вставить("ЕстьПредыдущееНайденное",    Ложь);
	Результат.Вставить("ЕстьСледующееНайденное",     Ложь);
	Результат.Вставить("ЕстьТекущийРезультатПоиска", Ложь);
	
	ДлинаНаЧтоМеняем = СтрДлина(ПараметрыСобытия.НаЧтоМеняем);
	
	
#Область ЗаменаТекущего
	
	ПараметрыВыделенияТекущегоНайденного = ПараметрыВыделенияТекущегоНайденногоТекста();

	НачальнаяПозиция   = 1;
	
	ВыделенныйТекстТекущееНайденное        = ТекстСТегамиВыделения(ПараметрыВыделенияТекущегоНайденного, ПараметрыСобытия.ЧтоМеняем);
	ДлинаВыделенногоТекстаТекущееНайденное = СтрДлина(ВыделенныйТекстТекущееНайденное);
	НайденнаяПозиция                       = СтрНайти(ТекстДляИзменения, ВыделенныйТекстТекущееНайденное, НаправлениеПоиска.СНачала, НачальнаяПозиция); 
	
	Если НайденнаяПозиция <> 0 Тогда
		
		ТекстДляИзменения = Лев(ТекстДляИзменения, НайденнаяПозиция - 1) 
		                    + ПараметрыСобытия.НаЧтоМеняем
		                    + Прав(ТекстДляИзменения, СтрДлина(ТекстДляИзменения) - НайденнаяПозиция - ДлинаВыделенногоТекстаТекущееНайденное + 1);
		
		Результат.БылаВыполненаЗамена = Истина;
		
	КонецЕсли; 
	
#КонецОбласти

#Область ВыделениеСледующего

	ПараметрыВыделенияНайденного  = ПараметрыВыделенияНайденногоТекста();
	
	Если ПоследнееНаправлениеПоиска = "Назад" Тогда
		
		НачальнаяПозиция        = НайденнаяПозиция - 1; 
		НаправлениеПоискаТекста = НаправлениеПоиска.СКонца;
		
	Иначе
		
		НачальнаяПозиция        = НайденнаяПозиция + ДлинаНаЧтоМеняем;
		НаправлениеПоискаТекста = НаправлениеПоиска.СНачала;
		
	КонецЕсли;
	
	ВыделенныйТекстНайденное      = ТекстСТегамиВыделения(ПараметрыВыделенияНайденного, ПараметрыСобытия.ЧтоМеняем);
	ДлинаВыделенныйТекстНайденное = СтрДлина(ВыделенныйТекстНайденное);
	НайденнаяПозиция              = СтрНайти(ТекстДляИзменения, ВыделенныйТекстНайденное, НаправлениеПоискаТекста, НачальнаяПозиция); 
	
	Если НайденнаяПозиция <> 0 Тогда
		
		ТекстДляИзменения = Лев(ТекстДляИзменения, НайденнаяПозиция - 1) 
		                    + ВыделенныйТекстТекущееНайденное
		                    + Прав(ТекстДляИзменения, СтрДлина(ТекстДляИзменения) - НайденнаяПозиция - ДлинаВыделенныйТекстНайденное + 1);
		
		Результат.ЕстьСледующееНайденное     = СтрНайти(ТекстДляИзменения, ВыделенныйТекстНайденное, НаправлениеПоиска.СНачала, НайденнаяПозиция) <> 0;
		Результат.ЕстьПредыдущееНайденное    = СтрНайти(ТекстДляИзменения, ВыделенныйТекстНайденное, НаправлениеПоиска.СКонца, НайденнаяПозиция - 1) <> 0;
		Результат.ЕстьТекущийРезультатПоиска = Истина;
		
	Иначе
		
		Результат.ЕстьСледующееНайденное  = СтрНайти(ТекстДляИзменения, ВыделенныйТекстНайденное, НаправлениеПоиска.СНачала, 1) <> 0;
		
	КонецЕсли;
	
#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗаменыВсехВхождений(ТекстДляИзменения, ПараметрыСобытия)
	
	Результат = Новый Структура;
	Результат.Вставить("БылаВыполненаЗамена", Ложь);
	Результат.Вставить("ПозицииЗамененного",  Неопределено);
	
	ПозицииЗамененного = Новый Массив;
	МассивЗаменяемыйТекст = Новый Массив;
	
	МассивЗаменяемыйТекст.Добавить(ТекстСТегамиВыделения(ПараметрыВыделенияНайденногоТекста(), ПараметрыСобытия.ЧтоМеняем));
	МассивЗаменяемыйТекст.Добавить(ТекстСТегамиВыделения(ПараметрыВыделенияТекущегоНайденногоТекста(), ПараметрыСобытия.ЧтоМеняем));
	
	Для Каждого ВыделенныйТекст Из МассивЗаменяемыйТекст Цикл
	
		НачальнаяПозиция   = 1;
		ДлинаВыделенногоТекста = СтрДлина(ВыделенныйТекст);
		ДлинаЧтоМеняем         = СтрДлина(ПараметрыСобытия.ЧтоМеняем);
		ДлинаНаЧтоМеняем       = СтрДлина(ПараметрыСобытия.НаЧтоМеняем);
		НайденнаяПозиция       = СтрНайти(ТекстДляИзменения, ВыделенныйТекст, НаправлениеПоиска.СНачала, НачальнаяПозиция);
		
		Пока НайденнаяПозиция <> 0 Цикл
			
			ТекстДляИзменения = Лев(ТекстДляИзменения, НайденнаяПозиция - 1) 
			                    + ПараметрыСобытия.НаЧтоМеняем
			                    + Прав(ТекстДляИзменения, СтрДлина(ТекстДляИзменения) - НайденнаяПозиция - ДлинаВыделенногоТекста + 1);
			
			НачальнаяПозиция = НайденнаяПозиция + ДлинаНаЧтоМеняем;
			ПозицииЗамененного.Добавить(НайденнаяПозиция);
			
			НайденнаяПозиция = СтрНайти(ТекстДляИзменения, ВыделенныйТекст, НаправлениеПоиска.СНачала, НачальнаяПозиция);
			
		КонецЦикла; 
	
	КонецЦикла;
	
	Если ПозицииЗамененного.Количество() > 0 Тогда
		Результат.БылаЕстьИзмененияРедактирования = Истина;
		Результат.ПозицииЗамененного              = ПозицииЗамененного;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПоискаПредыдущего(ТекстСценария, ПараметрыСобытия)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПредыдущееНайденное", Ложь);
	Результат.Вставить("ЕстьСледующееНайденное",  Ложь);
	
	ПараметрыВыделенияТекущегоНайденного = ПараметрыВыделенияТекущегоНайденногоТекста();
	ПараметрыВыделенияНайденного         = ПараметрыВыделенияНайденногоТекста();
	
	НачальнаяПозиция       = 1;
	ВыделенныйТекстТекущееНайденное        = ТекстСТегамиВыделения(ПараметрыВыделенияТекущегоНайденного, ПараметрыСобытия.ЧтоМеняем);
	ДлинаВыделенногоТекстаТекущееНайденное = СтрДлина(ВыделенныйТекстТекущееНайденное); 
	ВыделенныйТекстНайденное               = ТекстСТегамиВыделения(ПараметрыВыделенияНайденного, ПараметрыСобытия.ЧтоМеняем); 
	ДлинаВыделенныйТекстНайденное          = СтрДлина(ВыделенныйТекстНайденное);
	
	НайденнаяПозиция = СтрНайти(ТекстСценария, ВыделенныйТекстТекущееНайденное, НаправлениеПоиска.СНачала, НачальнаяПозиция);
	
	Если НайденнаяПозиция <> 0 Тогда
		
		ТекстСценария = Лев(ТекстСценария, НайденнаяПозиция - 1) 
		                    + ВыделенныйТекстНайденное
		                    + Прав(ТекстСценария, СтрДлина(ТекстСценария) - НайденнаяПозиция - ДлинаВыделенногоТекстаТекущееНайденное + 1);
		
		НачальнаяПозиция = НайденнаяПозиция - 1;
		Результат.ЕстьСледующееНайденное = Истина;
		
	КонецЕсли;
	
	НайденнаяПозиция = СтрНайти(ТекстСценария, ВыделенныйТекстНайденное, НаправлениеПоиска.СКонца, НачальнаяПозиция );
	
	Если НайденнаяПозиция <> 0 Тогда
		
		ТекстСценария = Лев(ТекстСценария, НайденнаяПозиция - 1) 
		                + ВыделенныйТекстТекущееНайденное
		                + Прав(ТекстСценария, СтрДлина(ТекстСценария) - НайденнаяПозиция - ДлинаВыделенныйТекстНайденное + 1);
		
		Результат.ЕстьПредыдущееНайденное = СтрНайти(ТекстСценария, ВыделенныйТекстНайденное, НаправлениеПоиска.СКонца, НайденнаяПозиция); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПоискаСледующего(ТекстСценария, ПараметрыСобытия)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПредыдущееНайденное", Ложь);
	Результат.Вставить("ЕстьСледующееНайденное",  Ложь);
	
	ПараметрыВыделенияТекущегоНайденного = ПараметрыВыделенияТекущегоНайденногоТекста();
	ПараметрыВыделенияНайденного         = ПараметрыВыделенияНайденногоТекста();
	
	НачальнаяПозиция       = 1;
	ВыделенныйТекстТекущееНайденное        = ТекстСТегамиВыделения(ПараметрыВыделенияТекущегоНайденного, ПараметрыСобытия.ЧтоМеняем);
	ДлинаВыделенногоТекстаТекущееНайденное = СтрДлина(ВыделенныйТекстТекущееНайденное); 
	ВыделенныйТекстНайденное               = ТекстСТегамиВыделения(ПараметрыВыделенияНайденного, ПараметрыСобытия.ЧтоМеняем); 
	ДлинаВыделенныйТекстНайденное          = СтрДлина(ВыделенныйТекстНайденное);
	
	НайденнаяПозиция = СтрНайти(ТекстСценария, ВыделенныйТекстТекущееНайденное, НаправлениеПоиска.СНачала, НачальнаяПозиция);
	
	Если НайденнаяПозиция <> 0 Тогда
		
		ТекстСценария = Лев(ТекстСценария, НайденнаяПозиция - 1) 
		                    + ВыделенныйТекстНайденное
		                    + Прав(ТекстСценария, СтрДлина(ТекстСценария) - НайденнаяПозиция - ДлинаВыделенногоТекстаТекущееНайденное + 1);
		
		НачальнаяПозиция = НайденнаяПозиция + ДлинаВыделенныйТекстНайденное;
		Результат.ЕстьПредыдущееНайденное = Истина;
		
	КонецЕсли;
	
	НайденнаяПозиция = СтрНайти(ТекстСценария, ВыделенныйТекстНайденное, НаправлениеПоиска.СНачала, НачальнаяПозиция);
	
	Если НайденнаяПозиция <> 0 Тогда
		
		ТекстСценария = Лев(ТекстСценария, НайденнаяПозиция - 1) 
		                + ВыделенныйТекстТекущееНайденное
		                + Прав(ТекстСценария, СтрДлина(ТекстСценария) - НайденнаяПозиция - ДлинаВыделенныйТекстНайденное + 1); 
		
		Результат.ЕстьСледующееНайденное = СтрНайти(ТекстСценария, ВыделенныйТекстНайденное, НаправлениеПоиска.СНачала, НайденнаяПозиция) <> 0; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстСТегамиВыделения(ПараметрыВыделения, ВыделяемыйТекст)
	
	Возврат ПараметрыВыделения.ОткрывающийТег + ВыделяемыйТекст + ПараметрыВыделения.ЗакрывающийТег;
	
КонецФункции

Процедура ВыделитьНайденноеВТексте(ТекстДляИзменения, ВыделяемыйТекст, ПозицииНайденногоВТексте)
	
	Сдвиг                  = 0;
	ДлинаВыделяемогоТекста = СтрДлина(ВыделяемыйТекст);
	ДлинаВсегоТекста       = СтрДлина(ТекстДляИзменения);
	НовыеПозицииНайденного = Новый Массив;
	
	ЭтоТекущееНайденное = Истина;

	Для Каждого ПозицияНайденногоВТексте Из ПозицииНайденногоВТексте Цикл
		
		Если ЭтоТекущееНайденное Тогда
			ПараметрыВыделенияНайденногоТекста = ПараметрыВыделенияТекущегоНайденногоТекста();
		Иначе
			ПараметрыВыделенияНайденногоТекста = ПараметрыВыделенияНайденногоТекста();
		КонецЕсли;
		
		НовыеПозицииНайденного.Добавить(ПозицияНайденногоВТексте + Сдвиг);
		
		ТекстДляИзменения = Лев(ТекстДляИзменения, ПозицияНайденногоВТексте + Сдвиг -1)
			+ ТекстСТегамиВыделения(ПараметрыВыделенияНайденногоТекста, ВыделяемыйТекст)
			+ Прав(ТекстДляИзменения, ДлинаВсегоТекста - ПозицияНайденногоВТексте - ДлинаВыделяемогоТекста + 1);
			
		Сдвиг = Сдвиг + ПараметрыВыделенияНайденногоТекста.ИтоговыйСдвиг;
		ЭтоТекущееНайденное = Ложь;
		
	КонецЦикла;
	
	ПозицииНайденногоВТексте = НовыеПозицииНайденного;
	
КонецПроцедуры

Процедура ОтменитьВыделениеРезультатовПоиска(ТекстДляИзменения, СтрокаПоиска)
	
	ОтменитьВыделениеВТексте(ТекстДляИзменения, ПараметрыВыделенияНайденногоТекста(), СтрокаПоиска);
	ОтменитьВыделениеВТексте(ТекстДляИзменения, ПараметрыВыделенияТекущегоНайденногоТекста(), СтрокаПоиска);

КонецПроцедуры

Процедура ОтменитьВыделениеВТексте(ТекстДляИзменения, ПараметрыВыделения, СтрокаПоиска)
	
	НачальнаяПозиция       = 1;
	ВыделенныйТекст        = ТекстСТегамиВыделения(ПараметрыВыделения, СтрокаПоиска);
	ДлинаВыделенногоТекста = СтрДлина(ВыделенныйТекст);
	ДлинаСтрокиПоиска      = СтрДлина(СтрокаПоиска);
	НайденнаяПозиция       = СтрНайти(ТекстДляИзменения, ВыделенныйТекст, НаправлениеПоиска.СНачала, НачальнаяПозиция);
	
	Пока НайденнаяПозиция <> 0 Цикл
		
		ТекстДляИзменения = Лев(ТекстДляИзменения, НайденнаяПозиция - 1) 
		                    + СтрокаПоиска
		                    + Прав(ТекстДляИзменения, СтрДлина(ТекстДляИзменения) - НайденнаяПозиция - ДлинаВыделенногоТекста + 1);
		
		НачальнаяПозиция = НайденнаяПозиция + ДлинаСтрокиПоиска;
		НайденнаяПозиция = СтрНайти(ТекстДляИзменения, ВыделенныйТекст, НаправлениеПоиска.СНачала, НачальнаяПозиция);
		
	КонецЦикла
	
КонецПроцедуры

Функция ПараметрыВыделенияНайденногоТекста()
	
	ПараметрыВыделения = Новый Структура;
	ПараметрыВыделения.Вставить("ОткрывающийТег", "<span style='color:#FF7C80;background:white'>");
	ПараметрыВыделения.Вставить("ЗакрывающийТег", "</span>");
	ПараметрыВыделения.Вставить("ИтоговыйСдвиг", СтрДлина(ПараметрыВыделения.ОткрывающийТег) + СтрДлина(ПараметрыВыделения.ЗакрывающийТег));

	Возврат ПараметрыВыделения;

КонецФункции

Функция ПараметрыВыделенияТекущегоНайденногоТекста()
	
	ПараметрыВыделения = Новый Структура;
	ПараметрыВыделения.Вставить("ОткрывающийТег", "<span style='color:#339966;background:silver'>");
	ПараметрыВыделения.Вставить("ЗакрывающийТег", "</span>");
	ПараметрыВыделения.Вставить("ИтоговыйСдвиг", СтрДлина(ПараметрыВыделения.ОткрывающийТег) + СтрДлина(ПараметрыВыделения.ЗакрывающийТег));

	Возврат ПараметрыВыделения;

КонецФункции

Процедура ОтменитьРезультатыПоискаЕслиНеобходимо(Форма)
	
	Если Форма.ВыполненПоиск Тогда
		
		ОтменитьВыделениеРезультатовПоиска(Форма.ТекстСценария, Форма.СтрокаПоиска);
		Форма.ВыполненПоиск = Ложь;
		Форма.СтрокаПоиска  = "";
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПеренестиРезультатыИзмененийЕслиНеобходимо(Форма)
	
	Если Форма.ЕстьИзмененияРедактирования Тогда
		
		СтруктураПоиска = Новый Структура("КодЯзыка", Форма.ЯзыкСценария);
		
		НайденныеСтроки = Форма.ОписанияСценария.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ТекстHTML       = Форма.ТекстСценария;
			НайденныеСтроки[0].ЕстьИзмененияРедактирования = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


