
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуОчередиЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		45,
		КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОчередиЗаданий

&НаКлиенте
Процедура ОчередиЗаданийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередиЗаданийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередиЗаданийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередиЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОчередиЗаданийАктивность Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТаблицы = ОчередиЗаданий.НайтиПоИдентификатору(ВыбраннаяСтрока);
		СтрокаТаблицы.Активность = Не СтрокаТаблицы.Активность;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНастройки();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуОчередиЗаданий()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередиЗаданий.ИндексСтроки КАК ИндексСтроки,
	|	ОчередиЗаданий.Очередь      КАК Очередь,
	|	ОчередиЗаданий.Приоритет    КАК Приоритет
	|ПОМЕСТИТЬ ОчередиЗаданий
	|ИЗ
	|	&ОчередиЗаданий КАК ОчередиЗаданий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Очередь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиЗаданий.Очередь                                     КАК Очередь,
	|	ВЫБОР
	|		КОГДА ОчередиЗаданий.Приоритет = -1
	|			ТОГДА ""Высокий""
	|		КОГДА ОчередиЗаданий.Приоритет = 0
	|			ТОГДА ""Средний""
	|		КОГДА ОчередиЗаданий.Приоритет = 1
	|			ТОГДА ""Низкий""
	|	КОНЕЦ                                                      КАК Приоритет,
	|	НЕ ЕСТЬNULL(НастройкиОчередейЗаданий.Приостановлена, ЛОЖЬ) КАК Активность
	|ИЗ
	|	ОчередиЗаданий КАК ОчередиЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОчередейЗаданий КАК НастройкиОчередейЗаданий
	|		ПО ОчередиЗаданий.Очередь = НастройкиОчередейЗаданий.Очередь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтроки";
	
	Запрос.УстановитьПараметр("ОчередиЗаданий", ОтложенныеЗадания.ОчередиЗаданий());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МетаРегистр = Метаданные.РегистрыСведений;
	ИмяМодуля   = Метаданные.ОбщиеМодули.ОтложенныеЗадания.Имя;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяРегистра = Выборка.Очередь;
		
		СтрокаТаблицы = ОчередиЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		СтрокаТаблицы.ПредставлениеОчереди = МетаРегистр[ИмяРегистра].Синоним;
		СтрокаТаблицы.Метод                = СтрШаблон("%1.%2", ИмяМодуля, ИмяРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена
	 Или РезультатВопроса = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередиЗаданий.Очередь    КАК Очередь,
	|	ОчередиЗаданий.Активность КАК Активность
	|ПОМЕСТИТЬ ОчередиЗаданий
	|ИЗ
	|	&ОчередиЗаданий КАК ОчередиЗаданий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Очередь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиЗаданий.Очередь                                                        КАК Очередь,
	|	НЕ ОчередиЗаданий.Активность                                                  КАК Приостановлена,
	|	ЕСТЬNULL(НастройкиОчередейЗаданий.ДатаПоследнейОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейОбработки,
	|	НЕ НастройкиОчередейЗаданий.Очередь ЕСТЬ NULL                                 КАК ЕстьЗапись
	|ИЗ
	|	ОчередиЗаданий КАК ОчередиЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОчередейЗаданий КАК НастройкиОчередейЗаданий
	|		ПО ОчередиЗаданий.Очередь = НастройкиОчередейЗаданий.Очередь
	|ГДЕ
	|	ВЫБОР
	|		КОГДА НастройкиОчередейЗаданий.Очередь ЕСТЬ NULL
	|			ТОГДА НЕ ОчередиЗаданий.Активность
	|		ИНАЧЕ ОчередиЗаданий.Активность = НастройкиОчередейЗаданий.Приостановлена
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ОчередиЗаданий", ОчередиЗаданий.Выгрузить(, "Очередь, Активность"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МетаРегистра = Неопределено;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
			
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОчередейЗаданий");
			ЭлементБлокировки.УстановитьЗначение("Очередь", Выборка.Очередь);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();
			
			Если Выборка.Приостановлена Тогда
				
				НаборЗаписей = РегистрыСведений.НастройкиОчередейЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Очередь.Установить(Выборка.Очередь);
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				
				НаборЗаписей.Записать();
				
			ИначеЕсли Выборка.ЕстьЗапись Тогда
				
				НаборЗаписей = РегистрыСведений.НастройкиОчередейЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Очередь.Установить(Выборка.Очередь);
				
				Если ЗначениеЗаполнено(Выборка.ДатаПоследнейОбработки) Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если МетаРегистра = Неопределено Тогда
				МетаРегистра = Метаданные.РегистрыСведений.НастройкиОчередейЗаданий;
			КонецЕсли;
			
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Изменения настроек очереди заданий'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				МетаРегистра,,
				ПредставлениеОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти